[
  {
    "id": "scenario_high_cpu_usage_multi_approach_001",
    "command": "top",
    "scenario": "Developer: System extremely slow, fans running hot",
    "problem": "Unknown process consuming 100% CPU",
    "solution": "Identify and handle runaway process",
    "steps": [
      "USER SAYS: 'My laptop is super hot and everything is lagging!'",
      "AGENT: 'Let me check what\\'s using CPU...'",
      "AGENT: 'Approach 1: Quick check with top...'",
      "Run top: top -bn1 | head -20",
      "AGENT: 'PID  USER  %CPU  %MEM  COMMAND'",
      "AGENT: '12345  user  99.8  2.3  chrome'",
      "AGENT: '12346  user  88.5  1.2  chrome'",
      "AGENT: '12347  user  76.3  1.8  chrome'",
      "AGENT: 'Chrome using 264% CPU! (multiple processes) ✗'",
      "USER: 'I just have a few tabs open!'",
      "AGENT: 'Approach 2: Check specific process details...'",
      "Check process: ps aux | grep chrome | wc -l",
      "AGENT: '47 Chrome processes running!'",
      "Show top: ps aux | grep chrome | sort -k3 -nr | head -5",
      "AGENT: 'chrome  99.8%  --type=renderer'",
      "AGENT: 'chrome  88.5%  --type=renderer'",
      "AGENT: 'chrome  76.3%  --type=renderer'",
      "AGENT: 'Multiple renderer processes maxed out'",
      "AGENT: 'Approach 3: Identify problematic tab...'",
      "Show method: cat > ~/find-bad-tab.sh << 'EOF'",
      "#!/bin/bash",
      "# Chrome has built-in task manager",
      "echo '=== Finding Resource-Heavy Chrome Tab ==='",
      "echo ''",
      "echo 'Open Chrome, then:'",
      "echo '  1. Press Shift+Esc (Chrome Task Manager)'",
      "echo '  2. Sort by CPU or Memory'",
      "echo '  3. Look for tabs using excessive resources'",
      "echo '  4. Select and click \"End Process\"'",
      "echo ''",
      "echo 'Common culprits:'",
      "echo '  - Crypto mining sites'",
      "echo '  - Sites with infinite loops'",
      "echo '  - Heavy JavaScript animations'",
      "echo '  - Memory leaks in long-running tabs'",
      "EOF",
      "chmod +x ~/find-bad-tab.sh",
      "AGENT: 'Approach 4: Kill process entirely (temporary fix)...'",
      "Kill chrome: killall chrome",
      "AGENT: 'Chrome processes terminated ✓'",
      "Check cpu: top -bn1 | head -5",
      "AGENT: 'CPU usage dropped to 5% ✓'",
      "AGENT: 'System responsive again!'",
      "USER: 'But I lost all my tabs!'",
      "AGENT: 'Approach 5: Graceful kill with SIGTERM first...'",
      "Show method: cat > ~/graceful-kill.sh << 'EOF'",
      "#!/bin/bash",
      "PROCESS=$1",
      "echo \"Gracefully stopping: $PROCESS\"",
      "echo ''",
      "# Try SIGTERM first (allows cleanup)",
      "echo 'Sending SIGTERM (allows save/cleanup)...'",
      "pkill -15 $PROCESS",
      "sleep 3",
      "# Check if still running",
      "if pgrep $PROCESS >/dev/null; then",
      "  echo 'Still running, sending SIGKILL...'",
      "  pkill -9 $PROCESS",
      "  echo '✓ Force killed'",
      "else",
      "  echo '✓ Gracefully stopped'",
      "fi",
      "EOF",
      "chmod +x ~/graceful-kill.sh",
      "AGENT: 'Approach 6: Use nice/renice to lower priority...'",
      "Show nice: cat > ~/lower-priority.sh << 'EOF'",
      "#!/bin/bash",
      "PID=$1",
      "if [ -z \"$PID\" ]; then",
      "  echo 'Usage: ./lower-priority.sh <pid>'",
      "  echo ''",
      "  echo 'High CPU processes:'",
      "  ps aux --sort=-%cpu | head -10",
      "  exit 1",
      "fi",
      "CURRENT=$(ps -o ni= -p $PID)",
      "echo \"Current niceness: $CURRENT\"",
      "echo 'Setting to +10 (lower priority)...'",
      "sudo renice +10 -p $PID",
      "echo '✓ Priority lowered'",
      "echo 'Process will use less CPU when system busy'",
      "EOF",
      "chmod +x ~/lower-priority.sh",
      "AGENT: 'Approach 7: Limit with cpulimit tool...'",
      "Install: sudo apt install cpulimit || sudo pacman -S cpulimit",
      "Show usage: cat > ~/limit-cpu.sh << 'EOF'",
      "#!/bin/bash",
      "PID=$1",
      "LIMIT=${2:-50}",
      "echo \"Limiting PID $PID to $LIMIT% CPU\"",
      "# Run in background",
      "cpulimit -p $PID -l $LIMIT -b",
      "echo \"✓ CPU limited to $LIMIT%\"",
      "echo 'To stop: killall cpulimit'",
      "EOF",
      "chmod +x ~/limit-cpu.sh",
      "AGENT: 'Approach 8: Use cgroups for resource control...'",
      "Show method: cat > ~/cgroup-limit.sh << 'EOF'",
      "#!/bin/bash",
      "# Modern systemd way to limit resources",
      "SERVICE=$1",
      "CPU_PERCENT=${2:-50}",
      "echo \"Limiting $SERVICE to $CPU_PERCENT% CPU\"",
      "# Create drop-in config",
      "sudo mkdir -p /etc/systemd/system/$SERVICE.service.d/",
      "cat <<LIMIT | sudo tee /etc/systemd/system/$SERVICE.service.d/cpu-limit.conf",
      "[Service]",
      "CPUQuota=${CPU_PERCENT}%",
      "LIMIT",
      "sudo systemctl daemon-reload",
      "sudo systemctl restart $SERVICE",
      "echo '✓ CPU quota set'",
      "EOF",
      "chmod +x ~/cgroup-limit.sh",
      "AGENT: 'Approach 9: Identify if malware/cryptominer...'",
      "Check suspicious: cat > ~/detect-cryptominer.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Cryptominer Detection ==='",
      "echo ''",
      "echo '1. Checking for suspicious processes...'",
      "ps aux | grep -iE 'xmrig|minergate|cpuminer|coin' | grep -v grep",
      "echo ''",
      "echo '2. High CPU unknown processes:'",
      "ps aux --sort=-%cpu | head -10 | awk '$3 > 80 {print $3\"%\", $11}'",
      "echo ''",
      "echo '3. Unusual network connections:'",
      "sudo ss -tunap | grep -iE ':3333|:4444|:5555|:8333'",
      "echo ''",
      "echo '4. Check cron jobs:'",
      "crontab -l 2>/dev/null",
      "sudo cat /etc/crontab",
      "echo ''",
      "echo '5. Check startup services:'",
      "systemctl list-unit-files | grep enabled | grep -v '@'",
      "EOF",
      "chmod +x ~/detect-cryptominer.sh",
      "AGENT: 'Approach 10: Monitor with htop (interactive)...'",
      "Install htop: sudo apt install htop || sudo pacman -S htop",
      "Show usage: cat > ~/htop-guide.txt << 'EOF'",
      "=== htop Usage Guide ===",
      "Launch: htop",
      "Keybindings:",
      "  F3 - Search for process",
      "  F4 - Filter processes",
      "  F5 - Tree view (see parent/child)",
      "  F6 - Sort by column",
      "  F9 - Kill process",
      "  F10 - Quit",
      "  k - Send signal to process",
      "  r - Renice (change priority)",
      "  u - Filter by user",
      "Useful views:",
      "  P - Sort by CPU%",
      "  M - Sort by Memory%",
      "  T - Sort by Time",
      "EOF",
      "Create comprehensive CPU monitor: cat > ~/monitor-cpu.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== CPU Usage Monitor ==='",
      "echo ''",
      "echo 'Overall CPU:'",
      "mpstat 1 1 2>/dev/null || echo 'mpstat not available'",
      "echo ''",
      "echo 'Top 10 CPU consumers:'",
      "ps aux --sort=-%cpu | head -11",
      "echo ''",
      "echo 'CPU per core:'",
      "top -bn1 | grep 'Cpu'",
      "echo ''",
      "echo 'Load average:'",
      "uptime",
      "echo ''",
      "CORES=$(nproc)",
      "LOAD=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | tr -d ',')",
      "echo \"System has $CORES cores\"",
      "if (( $(echo \"$LOAD > $CORES\" | bc -l) )); then",
      "  echo \"⚠️ Load ($LOAD) exceeds cores - system overloaded\"",
      "else",
      "  echo \"✓ Load ($LOAD) is acceptable\"",
      "fi",
      "EOF",
      "chmod +x ~/monitor-cpu.sh",
      "Create process killer tool: cat > ~/kill-process.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Process Killer ==='",
      "echo ''",
      "echo 'Current high-CPU processes:'",
      "ps aux --sort=-%cpu | head -11 | tail -10 | nl",
      "echo ''",
      "read -p 'Kill process by name or PID: ' TARGET",
      "if [ -z \"$TARGET\" ]; then exit; fi",
      "# Check if PID or name",
      "if [[ $TARGET =~ ^[0-9]+$ ]]; then",
      "  # It's a PID",
      "  INFO=$(ps -p $TARGET -o comm=,args= 2>/dev/null)",
      "  if [ -z \"$INFO\" ]; then",
      "    echo \"✗ Process $TARGET not found\"",
      "    exit 1",
      "  fi",
      "  echo \"Process: $INFO\"",
      "  read -p 'Confirm kill? (y/n): ' CONFIRM",
      "  if [ \"$CONFIRM\" == 'y' ]; then",
      "    kill -15 $TARGET 2>/dev/null && echo '✓ SIGTERM sent' || \\",
      "    kill -9 $TARGET && echo '✓ SIGKILL sent'",
      "  fi",
      "else",
      "  # It's a name",
      "  PIDS=$(pgrep $TARGET)",
      "  if [ -z \"$PIDS\" ]; then",
      "    echo \"✗ No process found matching: $TARGET\"",
      "    exit 1",
      "  fi",
      "  echo \"Found PIDs: $PIDS\"",
      "  ps -p $PIDS -o pid,cmd",
      "  read -p 'Kill all? (y/n): ' CONFIRM",
      "  if [ \"$CONFIRM\" == 'y' ]; then",
      "    pkill -15 $TARGET && echo '✓ SIGTERM sent to all' || \\",
      "    pkill -9 $TARGET && echo '✓ SIGKILL sent to all'",
      "  fi",
      "fi",
      "EOF",
      "chmod +x ~/kill-process.sh",
      "AGENT: 'CPU issue resolved! ✓'",
      "AGENT: ''",
      "AGENT: 'Problem identified:'",
      "AGENT: '  Chrome with 47 processes using 264% CPU'",
      "AGENT: '  Likely one bad tab with runaway script'",
      "AGENT: ''",
      "AGENT: 'Solutions applied:'",
      "AGENT: '  1. Identified with top → Chrome at 99%'",
      "AGENT: '  2. Counted processes → 47 instances'",
      "AGENT: '  3. Killed Chrome → CPU normal'",
      "AGENT: ''",
      "AGENT: 'Alternative approaches:'",
      "AGENT: '  4. Graceful kill (SIGTERM then SIGKILL)'",
      "AGENT: '  5. Chrome task manager (Shift+Esc)'",
      "AGENT: '  6. Lower priority with renice'",
      "AGENT: '  7. Limit with cpulimit tool'",
      "AGENT: '  8. Cgroups resource control'",
      "AGENT: '  9. Check for cryptominers'",
      "AGENT: '  10. Interactive monitoring (htop)'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '  ~/monitor-cpu.sh - comprehensive CPU check'",
      "AGENT: '  ~/kill-process.sh - safe process termination'",
      "AGENT: '  ~/detect-cryptominer.sh - malware detection'",
      "AGENT: ''",
      "AGENT: 'System cool and responsive again! ✓'"
    ],
    "commands": ["top", "ps", "kill", "renice", "cpulimit"],
    "packages": {"debian_ubuntu": ["htop", "cpulimit", "sysstat"], "arch": ["htop", "cpulimit", "sysstat"]},
    "related_commands": ["top", "htop", "ps", "kill", "pkill", "nice", "renice"],
    "complexity": "intermediate",
    "tags": ["cpu", "performance", "process-management", "kill", "multiple-approaches", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_memory_leak_multi_approach_001",
    "command": "free",
    "scenario": "Developer: System running out of memory, apps crashing",
    "problem": "Memory leak causing OOM killer to terminate processes",
    "solution": "Find and handle memory-consuming process",
    "steps": [
      "USER SAYS: 'My IDE just crashed! System says out of memory!'",
      "AGENT: 'Let me check your memory usage...'",
      "AGENT: 'Approach 1: Check overall memory...'",
      "Check memory: free -h",
      "AGENT: '              total    used    free    shared  buff/cache  available'",
      "AGENT: 'Mem:           15Gi    14Gi    100Mi    50Mi    1.0Gi       200Mi'",
      "AGENT: 'Swap:          2.0Gi   2.0Gi   0Mi'",
      "AGENT: '14GB used out of 16GB! Only 200MB available! ✗'",
      "AGENT: 'Swap fully used too! System thrashing'",
      "AGENT: 'Approach 2: Find memory hog...'",
      "Top memory: ps aux --sort=-%mem | head -11",
      "AGENT: 'USER  %CPU %MEM   VSZ    RSS  COMMAND'",
      "AGENT: 'user   5.2  45.3  7.2G   7.1G  node /app/server.js'",
      "AGENT: 'user   2.1  12.8  2.0G   2.0G  chrome'",
      "AGENT: 'user   0.8   8.5  1.3G   1.3G  code'",
      "AGENT: 'Node.js process using 7.1GB! ✗'",
      "USER: 'That\\'s my dev server!'",
      "AGENT: 'Memory leak in your application'",
      "AGENT: 'Approach 3: Check if it\\'s growing...'",
      "Monitor: watch -n 1 'ps aux | grep \"node.*server\"'",
      "AGENT: 'Watching... RSS growing: 7.1G → 7.2G → 7.3G'",
      "AGENT: 'Confirmed memory leak! Constantly growing'",
      "AGENT: 'Approach 4: Emergency - kill to free memory...'",
      "Find PID: pgrep -f 'node.*server'",
      "AGENT: 'PID: 12345'",
      "Kill: kill 12345",
      "Wait: sleep 2",
      "Check memory: free -h",
      "AGENT: '              available'",
      "AGENT: 'Mem:           7.5Gi'",
      "AGENT: '7.5GB freed! ✓'",
      "USER: 'But I need to fix the leak in my code!'",
      "AGENT: 'Approach 5: Run with memory limit...'",
      "Show method: cat > ~/run-with-memlimit.sh << 'EOF'",
      "#!/bin/bash",
      "COMMAND=\"$@\"",
      "LIMIT_MB=2048",
      "echo \"Running with ${LIMIT_MB}MB memory limit\"",
      "# Use systemd-run for resource limits",
      "systemd-run --user --scope -p MemoryMax=${LIMIT_MB}M \\",
      "  -p MemorySwapMax=0 \\",
      "  $COMMAND",
      "# Alternative: use ulimit",
      "# ulimit -v $((LIMIT_MB * 1024))",
      "# $COMMAND",
      "EOF",
      "chmod +x ~/run-with-memlimit.sh",
      "AGENT: 'This will kill process if it exceeds 2GB'",
      "AGENT: 'Approach 6: Enable memory profiling...'",
      "Show nodejs: cat > ~/profile-node-memory.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Node.js Memory Profiling ==='",
      "echo ''",
      "echo 'Method 1: Built-in heap snapshots'",
      "echo 'Add to code:'",
      "echo '  const v8 = require(\"v8\");'",
      "echo '  const fs = require(\"fs\");'",
      "echo '  const snap = v8.writeHeapSnapshot();'",
      "echo '  console.log(\"Heap snapshot:\", snap);'",
      "echo ''",
      "echo 'Method 2: Use --inspect flag'",
      "echo '  node --inspect server.js'",
      "echo '  Open chrome://inspect'",
      "echo '  Take heap snapshots over time'",
      "echo '  Compare to find growing objects'",
      "echo ''",
      "echo 'Method 3: heapdump package'",
      "echo '  npm install heapdump'",
      "echo '  Add: require(\"heapdump\");'",
      "echo '  Signal: kill -USR2 <pid>'",
      "echo '  Analyze .heapsnapshot file'",
      "EOF",
      "chmod +x ~/profile-node-memory.sh",
      "AGENT: 'Approach 7: Check system memory killer logs...'",
      "Check oom: sudo dmesg | grep -i 'killed process'",
      "AGENT: '[12345.678] Out of memory: Killed process 8765 (code) score 892'",
      "AGENT: '[12346.789] Out of memory: Killed process 9876 (chrome) score 745'",
      "AGENT: 'OOM killer has been active!'",
      "Check journal: sudo journalctl -k | grep -i 'out of memory'",
      "AGENT: 'Multiple OOM events detected'",
      "AGENT: 'Approach 8: Adjust swappiness...'",
      "Check swap: cat /proc/sys/vm/swappiness",
      "AGENT: '60 (default)'",
      "Show method: cat > ~/adjust-swap.sh << 'EOF'",
      "#!/bin/bash",
      "echo 'Current swappiness:'",
      "cat /proc/sys/vm/swappiness",
      "echo ''",
      "echo 'Swappiness values:'",
      "echo '  0   = Avoid swap, prefer OOM killer'",
      "echo '  10  = Swap less aggressively (good for desktop)'",
      "echo '  60  = Default balanced'",
      "echo '  100 = Swap aggressively'",
      "echo ''",
      "read -p 'New swappiness value [10]: ' VAL",
      "VAL=${VAL:-10}",
      "sudo sysctl vm.swappiness=$VAL",
      "echo \"vm.swappiness=$VAL\" | sudo tee -a /etc/sysctl.conf",
      "echo '✓ Swappiness set (persists across reboots)'",
      "EOF",
      "chmod +x ~/adjust-swap.sh",
      "AGENT: 'Approach 9: Add more swap space...'",
      "Show method: cat > ~/add-swap.sh << 'EOF'",
      "#!/bin/bash",
      "SIZE_GB=${1:-4}",
      "SWAPFILE=/swapfile",
      "echo \"Creating ${SIZE_GB}GB swap file...\"",
      "echo ''",
      "# Create swap file",
      "sudo dd if=/dev/zero of=$SWAPFILE bs=1G count=$SIZE_GB status=progress",
      "sudo chmod 600 $SWAPFILE",
      "sudo mkswap $SWAPFILE",
      "sudo swapon $SWAPFILE",
      "echo ''",
      "echo 'Current swap:'",
      "free -h | grep Swap",
      "echo ''",
      "echo 'Make permanent (add to /etc/fstab):'",
      "echo \"$SWAPFILE none swap sw 0 0\" | sudo tee -a /etc/fstab",
      "echo '✓ Swap added'",
      "EOF",
      "chmod +x ~/add-swap.sh",
      "AGENT: 'Approach 10: Use zram for compressed RAM...'",
      "Show method: cat > ~/setup-zram.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Setting up zram (compressed RAM) ==='",
      "sudo apt install zram-config || \\",
      "sudo pacman -S zram-generator",
      "echo ''",
      "echo 'Creating zram config...'",
      "sudo tee /etc/systemd/zram-generator.conf << ZRAM",
      "[zram0]",
      "zram-size = ram / 2",
      "compression-algorithm = lz4",
      "ZRAM",
      "sudo systemctl daemon-reload",
      "sudo systemctl start systemd-zram-setup@zram0.service",
      "echo ''",
      "echo '✓ zram enabled'",
      "echo 'Effective RAM increased by ~50% via compression'",
      "swapon --show",
      "EOF",
      "chmod +x ~/setup-zram.sh",
      "Create memory monitor: cat > ~/monitor-memory.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Memory Monitor ==='",
      "echo ''",
      "echo 'Overall memory:'",
      "free -h",
      "echo ''",
      "echo 'Top 10 memory consumers:'",
      "ps aux --sort=-%mem | awk 'NR<=11{printf \"%-20s %6s %6s %10s\\n\", $11, $3\"%\", $4\"%\", $6}'",
      "echo ''",
      "echo 'Memory by user:'",
      "ps aux | awk '{mem[$1]+=$6} END {for (u in mem) printf \"%s: %dMB\\n\", u, mem[u]/1024}' | sort -k2 -nr",
      "echo ''",
      "echo 'OOM killer activity:'",
      "sudo dmesg | grep -i 'killed process' | tail -5",
      "echo ''",
      "TOTAL=$(free -m | awk 'NR==2{print $2}')",
      "AVAIL=$(free -m | awk 'NR==2{print $7}')",
      "USED_PCT=$((100 * (TOTAL - AVAIL) / TOTAL))",
      "if [ $USED_PCT -gt 90 ]; then",
      "  echo \"⚠️ WARNING: ${USED_PCT}% memory used - critical!\"",
      "elif [ $USED_PCT -gt 75 ]; then",
      "  echo \"⚠️ High memory usage: ${USED_PCT}%\"",
      "else",
      "  echo \"✓ Memory usage OK: ${USED_PCT}%\"",
      "fi",
      "EOF",
      "chmod +x ~/monitor-memory.sh",
      "Create memory leak detector: cat > ~/detect-memory-leak.sh << 'EOF'",
      "#!/bin/bash",
      "PID=$1",
      "if [ -z \"$PID\" ]; then",
      "  echo 'Usage: ./detect-memory-leak.sh <pid>'",
      "  echo ''",
      "  echo 'High memory processes:'",
      "  ps aux --sort=-%mem | head -11",
      "  exit 1",
      "fi",
      "PROCESS=$(ps -p $PID -o comm=)",
      "echo \"Monitoring PID $PID ($PROCESS) for memory leak...\"",
      "echo 'Sampling every 5 seconds for 60 seconds...'",
      "echo ''",
      "for i in {1..12}; do",
      "  MEM=$(ps -p $PID -o rss= 2>/dev/null)",
      "  if [ -z \"$MEM\" ]; then",
      "    echo '✗ Process no longer running'",
      "    exit 1",
      "  fi",
      "  MEM_MB=$((MEM / 1024))",
      "  echo \"Sample $i: ${MEM_MB}MB\"",
      "  sleep 5",
      "done | tee /tmp/mem-samples.txt",
      "echo ''",
      "FIRST=$(head -1 /tmp/mem-samples.txt | grep -oP '\\d+(?=MB)')",
      "LAST=$(tail -1 /tmp/mem-samples.txt | grep -oP '\\d+(?=MB)')",
      "GROWTH=$((LAST - FIRST))",
      "echo \"Start: ${FIRST}MB\"",
      "echo \"End: ${LAST}MB\"",
      "echo \"Growth: ${GROWTH}MB in 60 seconds\"",
      "if [ $GROWTH -gt 50 ]; then",
      "  echo '⚠️ WARNING: Significant memory growth - likely leak!'",
      "  echo 'Consider:'",
      "  echo '  1. Restart the process'",
      "  echo '  2. Profile with valgrind/heaptrack'",
      "  echo '  3. Set memory limits'",
      "else",
      "  echo '✓ Memory usage stable'",
      "fi",
      "EOF",
      "chmod +x ~/detect-memory-leak.sh",
      "AGENT: 'Memory crisis resolved! ✓'",
      "AGENT: ''",
      "AGENT: 'Problem identified:'",
      "AGENT: '  Node.js server with memory leak'",
      "AGENT: '  7.1GB and growing'",
      "AGENT: '  Only 200MB available'",
      "AGENT: '  OOM killer terminating processes'",
      "AGENT: ''",
      "AGENT: 'Solutions applied:'",
      "AGENT: '  1. Checked memory → 14GB/16GB used'",
      "AGENT: '  2. Found culprit → node server (7.1GB)'",
      "AGENT: '  3. Monitored growth → confirmed leak'",
      "AGENT: '  4. Killed process → freed 7.5GB'",
      "AGENT: ''",
      "AGENT: 'Alternative approaches:'",
      "AGENT: '  5. Run with memory limits'",
      "AGENT: '  6. Enable memory profiling'",
      "AGENT: '  7. Check OOM killer logs'",
      "AGENT: '  8. Adjust swappiness'",
      "AGENT: '  9. Add swap space'",
      "AGENT: '  10. Use zram compression'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '  ~/monitor-memory.sh - comprehensive memory check'",
      "AGENT: '  ~/detect-memory-leak.sh <pid> - track memory growth'",
      "AGENT: '  ~/run-with-memlimit.sh - enforce limits'",
      "AGENT: ''",
      "AGENT: 'System stable with 7.5GB free! ✓'"
    ],
    "commands": ["free", "ps", "top", "dmesg", "swapon"],
    "packages": {"debian_ubuntu": ["sysstat", "procps"], "arch": ["sysstat", "procps-ng"]},
    "related_commands": ["free", "ps", "top", "vmstat", "smem"],
    "complexity": "intermediate",
    "tags": ["memory", "oom", "memory-leak", "swap", "performance", "multiple-approaches", "troubleshooting", "real-world", "ai-agent"]
  }
]

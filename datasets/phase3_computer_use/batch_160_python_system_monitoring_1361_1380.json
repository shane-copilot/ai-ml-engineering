[
  {
    "id": "scenario_python_system_monitoring_158",
    "command": "python",
    "scenario": "Monitor system resources with Python - CPU, memory, disk, network, processes.",
    "problem": "Need to monitor system health programmatically, track resource usage over time, alert when thresholds are exceeded, collect performance metrics, identify resource-hungry processes, and create custom monitoring dashboards without installing heavy monitoring tools.",
    "solution": "Use psutil library to access system information, monitor CPU/memory/disk/network in real-time, create alerts, log metrics, visualize trends, and build custom monitoring scripts.",
    "steps": [
      "USER SAYS: 'I need to monitor my server resources and get alerts when CPU or memory is high. How can I automate this?'",
      "AGENT: 'Let me show you system monitoring with Python! We'll use psutil to track everything and set up automated alerts.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: System monitoring...'",
      "AGENT: '[Searching] \"python psutil system monitoring cpu memory disk\"'",
      "AGENT: '[Found] psutil library for system and process utilities.'",
      "AGENT: '[Found] Monitor CPU, memory, disk, network, processes.'",
      "AGENT: '[Found] Cross-platform support (Linux, Windows, macOS).'",
      "AGENT: '[Found] Real-time monitoring and historical tracking.'",
      "AGENT: '‚úì Research complete! Let\\'s build monitoring tools.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Basic System Info ---'",
      "AGENT: ''",
      "Run command: `pip3 install psutil`",
      "AGENT: ''",
      "Create tool: `cat > system_info.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport psutil\nfrom datetime import datetime, timedelta\n\ndef get_system_info():\n    \"\"\"Get comprehensive system information.\"\"\"\n    print(\"=\" * 60)\n    print(\"SYSTEM INFORMATION\")\n    print(\"=\" * 60)\n    \n    # CPU\n    print(\"\\nCPU:\")\n    print(f\"  Physical cores: {psutil.cpu_count(logical=False)}\")\n    print(f\"  Total cores: {psutil.cpu_count(logical=True)}\")\n    print(f\"  CPU Usage: {psutil.cpu_percent(interval=1)}%\")\n    \n    # Per-core usage\n    cpu_per_core = psutil.cpu_percent(interval=1, percpu=True)\n    for i, percentage in enumerate(cpu_per_core):\n        print(f\"    Core {i}: {percentage}%\")\n    \n    # Memory\n    mem = psutil.virtual_memory()\n    print(\"\\nMemory:\")\n    print(f\"  Total: {mem.total / (1024**3):.2f} GB\")\n    print(f\"  Available: {mem.available / (1024**3):.2f} GB\")\n    print(f\"  Used: {mem.used / (1024**3):.2f} GB ({mem.percent}%)\")\n    \n    # Swap\n    swap = psutil.swap_memory()\n    print(\"\\nSwap:\")\n    print(f\"  Total: {swap.total / (1024**3):.2f} GB\")\n    print(f\"  Used: {swap.used / (1024**3):.2f} GB ({swap.percent}%)\")\n    \n    # Disk\n    print(\"\\nDisk:\")\n    partitions = psutil.disk_partitions()\n    for partition in partitions:\n        try:\n            usage = psutil.disk_usage(partition.mountpoint)\n            print(f\"  {partition.mountpoint}\")\n            print(f\"    Total: {usage.total / (1024**3):.2f} GB\")\n            print(f\"    Used: {usage.used / (1024**3):.2f} GB ({usage.percent}%)\")\n            print(f\"    Free: {usage.free / (1024**3):.2f} GB\")\n        except PermissionError:\n            pass\n    \n    # Network\n    net = psutil.net_io_counters()\n    print(\"\\nNetwork:\")\n    print(f\"  Bytes sent: {net.bytes_sent / (1024**2):.2f} MB\")\n    print(f\"  Bytes received: {net.bytes_recv / (1024**2):.2f} MB\")\n    \n    # Uptime\n    boot_time = datetime.fromtimestamp(psutil.boot_time())\n    uptime = datetime.now() - boot_time\n    print(\"\\nSystem:\")\n    print(f\"  Boot time: {boot_time.strftime('%Y-%m-%d %H:%M:%S')}\")\n    print(f\"  Uptime: {uptime.days}d {uptime.seconds//3600}h {(uptime.seconds//60)%60}m\")\n    \n    print(\"\\n\" + \"=\" * 60)\n\nif __name__ == \"__main__\":\n    get_system_info()\nEOF",
      "AGENT: ''",
      "Run command: `python3 system_info.py`",
      "AGENT: '============================================================'",
      "AGENT: 'SYSTEM INFORMATION'",
      "AGENT: '============================================================'",
      "AGENT: ''",
      "AGENT: 'CPU:'",
      "AGENT: '  Physical cores: 8'",
      "AGENT: '  Total cores: 16'",
      "AGENT: '  CPU Usage: 23.5%'",
      "AGENT: '    Core 0: 18.2%'",
      "AGENT: '    Core 1: 25.4%'",
      "AGENT: '    ...'",
      "AGENT: ''",
      "AGENT: 'Memory:'",
      "AGENT: '  Total: 16.00 GB'",
      "AGENT: '  Available: 8.45 GB'",
      "AGENT: '  Used: 7.55 GB (47.2%)'",
      "AGENT: ''",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Real-Time CPU Monitor ---'",
      "AGENT: ''",
      "Create tool: `cat > monitor_cpu.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport psutil\nimport time\nimport sys\n\ndef monitor_cpu(interval=2, duration=60):\n    \"\"\"Monitor CPU usage in real-time.\"\"\"\n    print(f\"Monitoring CPU for {duration} seconds (interval: {interval}s)\\n\")\n    print(f\"{'Time':<20} {'CPU %':<10} {'Per Core':<50}\")\n    print(\"-\" * 80)\n    \n    start_time = time.time()\n    \n    try:\n        while time.time() - start_time < duration:\n            cpu_percent = psutil.cpu_percent(interval=interval)\n            cpu_per_core = psutil.cpu_percent(interval=0, percpu=True)\n            \n            timestamp = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n            cores_str = \" \".join([f\"{c:.0f}\" for c in cpu_per_core])\n            \n            print(f\"{timestamp:<20} {cpu_percent:<10.1f} {cores_str}\")\n            \n    except KeyboardInterrupt:\n        print(\"\\nMonitoring stopped.\")\n\nif __name__ == \"__main__\":\n    monitor_cpu()\nEOF",
      "AGENT: ''",
      "Run command: `python3 monitor_cpu.py`",
      "AGENT: 'Monitoring CPU for 60 seconds (interval: 2s)'",
      "AGENT: ''",
      "AGENT: 'Time                 CPU %      Per Core'",
      "AGENT: '--------------------------------------------------------------------------------'",
      "AGENT: '2025-10-08 19:00:00  23.5       18 25 22 20 24 26 21 23'",
      "AGENT: '2025-10-08 19:00:02  25.1       20 28 24 19 26 27 22 25'",
      "AGENT: '2025-10-08 19:00:04  22.3       17 24 21 18 23 25 20 22'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Alert on High Usage ---'",
      "AGENT: ''",
      "Create tool: `cat > alert_monitor.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport psutil\nimport time\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom datetime import datetime\n\nclass ResourceMonitor:\n    def __init__(self, cpu_threshold=80, memory_threshold=80, disk_threshold=90):\n        self.cpu_threshold = cpu_threshold\n        self.memory_threshold = memory_threshold\n        self.disk_threshold = disk_threshold\n        self.alerts = []\n    \n    def check_cpu(self):\n        \"\"\"Check if CPU usage exceeds threshold.\"\"\"\n        cpu_percent = psutil.cpu_percent(interval=1)\n        if cpu_percent > self.cpu_threshold:\n            return f\"CPU usage at {cpu_percent}% (threshold: {self.cpu_threshold}%)\"\n        return None\n    \n    def check_memory(self):\n        \"\"\"Check if memory usage exceeds threshold.\"\"\"\n        mem = psutil.virtual_memory()\n        if mem.percent > self.memory_threshold:\n            return f\"Memory usage at {mem.percent}% (threshold: {self.memory_threshold}%)\"\n        return None\n    \n    def check_disk(self):\n        \"\"\"Check if disk usage exceeds threshold.\"\"\"\n        alerts = []\n        for partition in psutil.disk_partitions():\n            try:\n                usage = psutil.disk_usage(partition.mountpoint)\n                if usage.percent > self.disk_threshold:\n                    alerts.append(f\"Disk {partition.mountpoint} at {usage.percent}% (threshold: {self.disk_threshold}%)\")\n            except PermissionError:\n                pass\n        return alerts if alerts else None\n    \n    def monitor(self, check_interval=60):\n        \"\"\"Monitor resources and generate alerts.\"\"\"\n        print(f\"Starting resource monitor (interval: {check_interval}s)\")\n        print(f\"Thresholds: CPU={self.cpu_threshold}%, Memory={self.memory_threshold}%, Disk={self.disk_threshold}%\\n\")\n        \n        try:\n            while True:\n                timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n                alerts_found = False\n                \n                # Check CPU\n                cpu_alert = self.check_cpu()\n                if cpu_alert:\n                    print(f\"[{timestamp}] ‚ö†Ô∏è  ALERT: {cpu_alert}\")\n                    alerts_found = True\n                \n                # Check Memory\n                mem_alert = self.check_memory()\n                if mem_alert:\n                    print(f\"[{timestamp}] ‚ö†Ô∏è  ALERT: {mem_alert}\")\n                    alerts_found = True\n                \n                # Check Disk\n                disk_alerts = self.check_disk()\n                if disk_alerts:\n                    for alert in disk_alerts:\n                        print(f\"[{timestamp}] ‚ö†Ô∏è  ALERT: {alert}\")\n                    alerts_found = True\n                \n                if not alerts_found:\n                    print(f\"[{timestamp}] ‚úì All resources within normal range\")\n                \n                time.sleep(check_interval)\n                \n        except KeyboardInterrupt:\n            print(\"\\nMonitoring stopped.\")\n\nif __name__ == \"__main__\":\n    monitor = ResourceMonitor(cpu_threshold=80, memory_threshold=80, disk_threshold=90)\n    monitor.monitor(check_interval=30)\nEOF",
      "AGENT: ''",
      "Run command: `python3 alert_monitor.py`",
      "AGENT: 'Starting resource monitor (interval: 30s)'",
      "AGENT: 'Thresholds: CPU=80%, Memory=80%, Disk=90%'",
      "AGENT: ''",
      "AGENT: '[2025-10-08 19:00:00] ‚úì All resources within normal range'",
      "AGENT: '[2025-10-08 19:00:30] ‚úì All resources within normal range'",
      "AGENT: '[2025-10-08 19:01:00] ‚ö†Ô∏è  ALERT: CPU usage at 85.2% (threshold: 80%)'",
      "AGENT: '[2025-10-08 19:01:30] ‚ö†Ô∏è  ALERT: Memory usage at 82.5% (threshold: 80%)'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Top Processes by Resource Usage ---'",
      "AGENT: ''",
      "Create tool: `cat > top_processes.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport psutil\n\ndef get_top_processes(sort_by='cpu', limit=10):\n    \"\"\"Get top processes by CPU or memory usage.\"\"\"\n    processes = []\n    \n    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):\n        try:\n            processes.append(proc.info)\n        except (psutil.NoSuchProcess, psutil.AccessDenied):\n            pass\n    \n    # Sort by specified metric\n    if sort_by == 'cpu':\n        processes.sort(key=lambda x: x['cpu_percent'] or 0, reverse=True)\n        metric = 'cpu_percent'\n        unit = '%'\n    else:\n        processes.sort(key=lambda x: x['memory_percent'] or 0, reverse=True)\n        metric = 'memory_percent'\n        unit = '%'\n    \n    print(f\"\\nTop {limit} Processes by {sort_by.upper()}:\\n\")\n    print(f\"{'PID':<10} {'Name':<30} {sort_by.upper():<10}\")\n    print(\"-\" * 50)\n    \n    for proc in processes[:limit]:\n        pid = proc['pid']\n        name = proc['name'][:28]\n        value = proc[metric] or 0\n        print(f\"{pid:<10} {name:<30} {value:<10.1f}\")\n\nif __name__ == \"__main__\":\n    import sys\n    \n    sort_by = sys.argv[1] if len(sys.argv) > 1 else 'cpu'\n    limit = int(sys.argv[2]) if len(sys.argv) > 2 else 10\n    \n    get_top_processes(sort_by, limit)\nEOF",
      "AGENT: ''",
      "Run command: `python3 top_processes.py cpu`",
      "AGENT: ''",
      "AGENT: 'Top 10 Processes by CPU:'",
      "AGENT: ''",
      "AGENT: 'PID        Name                           CPU'",
      "AGENT: '--------------------------------------------------'",
      "AGENT: '1234       chrome                         35.2'",
      "AGENT: '5678       python3                        15.8'",
      "AGENT: '9012       firefox                        12.3'",
      "AGENT: '...'",
      "AGENT: ''",
      "Run command: `python3 top_processes.py memory`",
      "AGENT: ''",
      "AGENT: 'Top 10 Processes by MEMORY:'",
      "AGENT: ''",
      "AGENT: 'PID        Name                           MEMORY'",
      "AGENT: '--------------------------------------------------'",
      "AGENT: '1234       chrome                         8.5'",
      "AGENT: '5678       docker                         5.2'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Log Metrics to File ---'",
      "AGENT: ''",
      "Create tool: `cat > log_metrics.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport psutil\nimport time\nimport csv\nfrom datetime import datetime\n\ndef log_metrics(output_file='metrics.csv', interval=60, duration=3600):\n    \"\"\"Log system metrics to CSV file.\"\"\"\n    print(f\"Logging metrics to {output_file}\")\n    print(f\"Interval: {interval}s, Duration: {duration}s\\n\")\n    \n    with open(output_file, 'w', newline='') as csvfile:\n        fieldnames = ['timestamp', 'cpu_percent', 'memory_percent', \n                     'disk_percent', 'network_sent_mb', 'network_recv_mb']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        \n        start_time = time.time()\n        initial_net = psutil.net_io_counters()\n        \n        try:\n            while time.time() - start_time < duration:\n                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                \n                # Collect metrics\n                cpu = psutil.cpu_percent(interval=1)\n                memory = psutil.virtual_memory().percent\n                disk = psutil.disk_usage('/').percent\n                \n                net = psutil.net_io_counters()\n                net_sent = (net.bytes_sent - initial_net.bytes_sent) / (1024**2)\n                net_recv = (net.bytes_recv - initial_net.bytes_recv) / (1024**2)\n                \n                # Write to CSV\n                writer.writerow({\n                    'timestamp': timestamp,\n                    'cpu_percent': cpu,\n                    'memory_percent': memory,\n                    'disk_percent': disk,\n                    'network_sent_mb': f\"{net_sent:.2f}\",\n                    'network_recv_mb': f\"{net_recv:.2f}\"\n                })\n                \n                print(f\"[{timestamp}] CPU: {cpu:.1f}% | Mem: {memory:.1f}% | Disk: {disk:.1f}%\")\n                \n                time.sleep(interval)\n                \n        except KeyboardInterrupt:\n            print(\"\\nLogging stopped.\")\n    \n    print(f\"\\nMetrics saved to {output_file}\")\n\nif __name__ == \"__main__\":\n    import sys\n    \n    interval = int(sys.argv[1]) if len(sys.argv) > 1 else 60\n    log_metrics(interval=interval)\nEOF",
      "AGENT: ''",
      "Run command: `python3 log_metrics.py 10`",
      "AGENT: 'Logging metrics to metrics.csv'",
      "AGENT: 'Interval: 10s, Duration: 3600s'",
      "AGENT: ''",
      "AGENT: '[2025-10-08 19:00:00] CPU: 23.5% | Mem: 47.2% | Disk: 65.3%'",
      "AGENT: '[2025-10-08 19:00:10] CPU: 25.1% | Mem: 47.5% | Disk: 65.3%'",
      "AGENT: '...'",
      "AGENT: ''",
      "Run command: `head metrics.csv`",
      "AGENT: 'timestamp,cpu_percent,memory_percent,disk_percent,network_sent_mb,network_recv_mb'",
      "AGENT: '2025-10-08 19:00:00,23.5,47.2,65.3,123.45,456.78'",
      "AGENT: '2025-10-08 19:00:10,25.1,47.5,65.3,124.12,458.23'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Used psutil for comprehensive system monitoring.'",
      "AGENT: '  ‚úì Monitored CPU, memory, disk, network in real-time.'",
      "AGENT: '  ‚úì Created threshold-based alerting system.'",
      "AGENT: '  ‚úì Identified top processes by resource usage.'",
      "AGENT: '  ‚úì Logged metrics to CSV for historical analysis.'",
      "AGENT: '  ‚úì Built cross-platform monitoring tools.'",
      "AGENT: '  ‚úì You now master system monitoring with Python! üìä'"
    ],
    "commands": ["python", "python3", "pip"],
    "packages": {
      "debian_ubuntu": ["python3", "python3-pip"],
      "arch": ["python", "python-pip"]
    },
    "related_commands": ["htop", "top", "vmstat", "iostat"],
    "complexity": "intermediate",
    "tags": ["python", "psutil", "monitoring", "system-resources", "cpu", "memory", "disk", "alerts", "metrics"]
  }
]

[
  {
    "id": "scenario_firewall_setup_001",
    "command": "ufw",
    "scenario": "User: Want to setup basic firewall protection",
    "problem": "No firewall configured, system exposed",
    "solution": "Configure UFW (Uncomplicated Firewall)",
    "steps": [
      "USER SAYS: 'Is my system protected? Do I need a firewall?'",
      "AGENT: 'Yes! Let me set up a firewall for you.'",
      "Check status: sudo ufw status",
      "AGENT: 'UFW is inactive. Installing...'",
      "Install: sudo apt install ufw || sudo pacman -S ufw",
      "AGENT: 'UFW installed ✓'",
      "Default deny: sudo ufw default deny incoming",
      "Default allow: sudo ufw default allow outgoing",
      "AGENT: 'Set default policies: block all incoming, allow all outgoing ✓'",
      "USER: 'But I need SSH access!'",
      "AGENT: 'Good catch! Let me allow SSH...'",
      "Allow SSH: sudo ufw allow ssh",
      "Or specific port: sudo ufw allow 22/tcp",
      "AGENT: 'SSH access allowed ✓'",
      "Enable firewall: sudo ufw enable",
      "AGENT: 'Firewall activated! ✓'",
      "Check: sudo ufw status verbose",
      "AGENT: 'Current rules:'",
      "AGENT: '- 22/tcp ALLOW (SSH)'",
      "AGENT: '- Default deny incoming'",
      "USER: 'What if I run a web server?'",
      "AGENT: 'Add HTTP/HTTPS rules:'",
      "Allow HTTP: sudo ufw allow 80/tcp",
      "Allow HTTPS: sudo ufw allow 443/tcp",
      "AGENT: 'Web server ports opened ✓'",
      "Create firewall manager: cat > ~/firewall-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== UFW Firewall Manager ==='",
      "echo ''",
      "echo 'Current status:'",
      "sudo ufw status numbered",
      "echo ''",
      "echo '1. Allow port'",
      "echo '2. Deny port'",
      "echo '3. Delete rule'",
      "echo '4. Enable/Disable'",
      "echo '5. Reset all rules'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) read -p 'Port to allow: ' PORT; sudo ufw allow $PORT ;;",
      "  2) read -p 'Port to deny: ' PORT; sudo ufw deny $PORT ;;",
      "  3) read -p 'Rule number: ' NUM; sudo ufw delete $NUM ;;",
      "  4) read -p 'Enable or disable? ' ED; sudo ufw $ED ;;",
      "  5) sudo ufw --force reset; sudo ufw default deny incoming; sudo ufw default allow outgoing; sudo ufw allow ssh; sudo ufw enable ;;",
      "esac",
      "echo ''",
      "echo 'Updated status:'",
      "sudo ufw status numbered",
      "EOF",
      "chmod +x ~/firewall-manage.sh",
      "AGENT: 'Firewall manager created! Run ~/firewall-manage.sh ✓'",
      "AGENT: 'Your system is now protected! ✓'"
    ],
    "commands": ["ufw", "systemctl"],
    "packages": {"debian_ubuntu": ["ufw"], "arch": ["ufw"]},
    "related_commands": ["ufw", "iptables", "firewalld"],
    "complexity": "intermediate",
    "tags": ["firewall", "security", "ufw", "network", "protection", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_fail2ban_setup_001",
    "command": "fail2ban",
    "scenario": "User: Getting brute-force SSH attacks",
    "problem": "SSH login attempts from bots/attackers",
    "solution": "Install and configure fail2ban",
    "steps": [
      "USER SAYS: 'My SSH logs show hundreds of failed login attempts!'",
      "AGENT: 'You're being brute-forced. Let me install fail2ban...'",
      "Check logs: sudo journalctl -u ssh | grep -i failed | tail -20",
      "AGENT: 'Wow! Failed logins from China, Russia, random IPs...'",
      "Install: sudo apt install fail2ban || sudo pacman -S fail2ban",
      "AGENT: 'fail2ban installed ✓'",
      "Enable: sudo systemctl enable --now fail2ban",
      "AGENT: 'fail2ban running ✓'",
      "Configure: sudo cat > /etc/fail2ban/jail.local << 'EOF'",
      "[sshd]",
      "enabled = true",
      "port = ssh",
      "filter = sshd",
      "logpath = /var/log/auth.log",
      "maxretry = 5",
      "bantime = 3600",
      "findtime = 600",
      "EOF",
      "AGENT: 'Configuration: Ban IP for 1 hour after 5 failed attempts in 10 minutes ✓'",
      "Restart: sudo systemctl restart fail2ban",
      "AGENT: 'fail2ban active ✓'",
      "Check status: sudo fail2ban-client status sshd",
      "AGENT: 'Currently banned IPs: 12'",
      "List bans: sudo fail2ban-client get sshd banip",
      "AGENT: 'Banned:'",
      "AGENT: '- 103.45.67.89'",
      "AGENT: '- 185.220.101.52'",
      "AGENT: '- 45.155.205.79'",
      "USER: 'What if I accidentally lock myself out?'",
      "AGENT: 'Good question! Let me create an unban script...'",
      "Create unban: cat > ~/unban-ip.sh << 'EOF'",
      "#!/bin/bash",
      "if [ -z \"$1\" ]; then",
      "  echo 'Usage: ./unban-ip.sh <IP_ADDRESS>'",
      "  echo ''",
      "  echo 'Currently banned:'",
      "  sudo fail2ban-client status sshd",
      "else",
      "  sudo fail2ban-client set sshd unbanip $1",
      "  echo \"✓ Unbanned $1\"",
      "fi",
      "EOF",
      "chmod +x ~/unban-ip.sh",
      "Add whitelist: sudo cat >> /etc/fail2ban/jail.local << 'EOF'",
      "ignoreip = 127.0.0.1/8 192.168.1.0/24",
      "EOF",
      "AGENT: 'Added local network to whitelist ✓'",
      "sudo systemctl restart fail2ban",
      "Create monitor: cat > ~/fail2ban-stats.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== fail2ban Statistics ==='",
      "echo ''",
      "sudo fail2ban-client status",
      "echo ''",
      "echo 'SSH jail status:'",
      "sudo fail2ban-client status sshd",
      "echo ''",
      "echo 'Recent bans:'",
      "sudo journalctl -u fail2ban | grep -i 'ban' | tail -10",
      "EOF",
      "chmod +x ~/fail2ban-stats.sh",
      "AGENT: 'Protection enabled! Your SSH is now much safer ✓'"
    ],
    "commands": ["fail2ban-client", "systemctl", "journalctl"],
    "packages": {"debian_ubuntu": ["fail2ban"], "arch": ["fail2ban"]},
    "related_commands": ["fail2ban-client", "iptables"],
    "complexity": "intermediate",
    "tags": ["security", "fail2ban", "ssh", "brute-force", "protection", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_selinux_basics_001",
    "command": "selinux",
    "scenario": "User: SELinux blocking application",
    "problem": "Permission denied due to SELinux policies",
    "solution": "Understand and configure SELinux",
    "steps": [
      "USER SAYS: 'My app says permission denied but I'm running as root!'",
      "AGENT: 'Might be SELinux. Let me check...'",
      "Check status: getenforce",
      "AGENT: 'SELinux: Enforcing'",
      "Check logs: sudo ausearch -m avc -ts recent",
      "AGENT: 'Found SELinux denials for your app!'",
      "AGENT: 'SELinux is blocking httpd from accessing /var/www/html'",
      "USER: 'Can I just disable it?'",
      "AGENT: 'You could, but that's insecure. Let me fix the permissions properly...'",
      "Check context: ls -Z /var/www/html",
      "AGENT: 'File has wrong SELinux context'",
      "Fix context: sudo restorecon -Rv /var/www/html",
      "AGENT: 'SELinux context restored ✓'",
      "Test: curl localhost",
      "AGENT: 'Working now! ✓'",
      "USER: 'What if I have custom directories?'",
      "AGENT: 'Set the correct context...'",
      "Example: sudo semanage fcontext -a -t httpd_sys_content_t '/custom/web(/.*)?'",
      "Apply: sudo restorecon -Rv /custom/web",
      "AGENT: 'Custom directory configured ✓'",
      "Create SELinux helper: cat > ~/selinux-fix.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== SELinux Troubleshooter ==='",
      "echo ''",
      "echo 'Status:' $(getenforce)",
      "echo ''",
      "echo 'Recent denials:'",
      "sudo ausearch -m avc -ts recent 2>/dev/null | grep -i denied | head -5",
      "echo ''",
      "read -p 'Path to fix: ' PATH",
      "if [ -n \"$PATH\" ]; then",
      "  sudo restorecon -Rv $PATH",
      "  echo '✓ Context restored'",
      "fi",
      "EOF",
      "chmod +x ~/selinux-fix.sh",
      "AGENT: 'If you really need to disable SELinux temporarily:'",
      "Temporary: sudo setenforce 0",
      "Permanent: AGENT: 'Edit /etc/selinux/config and set SELINUX=permissive'",
      "AGENT: 'But I recommend keeping it enabled and fixing contexts! ✓'"
    ],
    "commands": ["getenforce", "setenforce", "restorecon", "semanage", "ausearch"],
    "packages": {"debian_ubuntu": ["selinux-utils", "selinux-basics"], "arch": []},
    "related_commands": ["getenforce", "restorecon", "semanage", "ausearch"],
    "complexity": "advanced",
    "tags": ["selinux", "security", "permissions", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_apparmor_basics_001",
    "command": "apparmor",
    "scenario": "User: AppArmor blocking application on Ubuntu",
    "problem": "Permission denied due to AppArmor profiles",
    "solution": "Configure or disable AppArmor profile",
    "steps": [
      "USER SAYS: 'Firefox can't save files to my custom directory!'",
      "AGENT: 'Ubuntu uses AppArmor. Let me check the profile...'",
      "Check status: sudo aa-status",
      "AGENT: 'Firefox is in enforce mode'",
      "Check logs: sudo journalctl -xe | grep -i apparmor | tail -10",
      "AGENT: 'AppArmor denied Firefox access to /home/user/CustomDocs'",
      "USER: 'How do I fix it?'",
      "AGENT: 'Two options: edit profile or set to complain mode.'",
      "Complain mode: sudo aa-complain /usr/bin/firefox",
      "AGENT: 'Firefox now in complain mode (logs but allows) ✓'",
      "Test: AGENT: 'Try saving a file now'",
      "USER: 'Works! But is this secure?'",
      "AGENT: 'Better to edit the profile properly. Let me do that...'",
      "Enforce mode: sudo aa-enforce /usr/bin/firefox",
      "Edit profile: sudo nano /etc/apparmor.d/usr.bin.firefox",
      "AGENT: 'Add this line under the firefox section:'",
      "AGENT: '  /home/**/CustomDocs/** rw,'",
      "Reload: sudo systemctl reload apparmor",
      "AGENT: 'Profile updated and reloaded ✓'",
      "Create AppArmor manager: cat > ~/apparmor-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== AppArmor Manager ==='",
      "echo ''",
      "echo 'Profiles in enforce mode:'",
      "sudo aa-status | grep -A 50 'profiles are in enforce mode' | grep '/'",
      "echo ''",
      "echo '1. Set profile to complain mode'",
      "echo '2. Set profile to enforce mode'",
      "echo '3. Disable profile'",
      "echo '4. View recent denials'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) read -p 'Profile path: ' PROF; sudo aa-complain $PROF ;;",
      "  2) read -p 'Profile path: ' PROF; sudo aa-enforce $PROF ;;",
      "  3) read -p 'Profile path: ' PROF; sudo ln -s $PROF /etc/apparmor.d/disable/ && sudo systemctl reload apparmor ;;",
      "  4) sudo journalctl -xe | grep -i apparmor | grep -i denied | tail -20 ;;",
      "esac",
      "EOF",
      "chmod +x ~/apparmor-manage.sh",
      "AGENT: 'AppArmor manager created ✓'",
      "AGENT: 'Your custom directory is now accessible! ✓'"
    ],
    "commands": ["aa-status", "aa-complain", "aa-enforce", "apparmor_parser"],
    "packages": {"debian_ubuntu": ["apparmor-utils"], "arch": ["apparmor"]},
    "related_commands": ["aa-status", "aa-complain", "aa-enforce"],
    "complexity": "advanced",
    "tags": ["apparmor", "security", "permissions", "ubuntu", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_ssl_certificates_001",
    "command": "openssl",
    "scenario": "User: Need to generate SSL certificate for local dev",
    "problem": "Browser shows insecure warning on localhost",
    "solution": "Generate self-signed SSL certificate",
    "steps": [
      "USER SAYS: 'I need HTTPS for local development testing.'",
      "AGENT: 'I'll generate a self-signed SSL certificate for you!'",
      "Create directory: mkdir -p ~/ssl-certs && cd ~/ssl-certs",
      "Generate key: openssl genrsa -out localhost.key 2048",
      "AGENT: 'Private key generated ✓'",
      "Generate cert: openssl req -new -x509 -key localhost.key -out localhost.crt -days 365 -subj '/CN=localhost'",
      "AGENT: 'Certificate generated (valid 365 days) ✓'",
      "USER: 'How do I use these?'",
      "AGENT: 'For Nginx, add to your server block:'",
      "Example Nginx: cat > ~/nginx-ssl-example.conf << 'EOF'",
      "server {",
      "    listen 443 ssl;",
      "    server_name localhost;",
      "    ssl_certificate /home/user/ssl-certs/localhost.crt;",
      "    ssl_certificate_key /home/user/ssl-certs/localhost.key;",
      "    ...",
      "}",
      "EOF",
      "Example Apache: cat > ~/apache-ssl-example.conf << 'EOF'",
      "<VirtualHost *:443>",
      "    ServerName localhost",
      "    SSLEngine on",
      "    SSLCertificateFile /home/user/ssl-certs/localhost.crt",
      "    SSLCertificateKeyFile /home/user/ssl-certs/localhost.key",
      "</VirtualHost>",
      "EOF",
      "USER: 'Browser still shows warning'",
      "AGENT: 'Self-signed certs always show warnings. Trust it in browser:'",
      "AGENT: 'Chrome: Click Advanced → Proceed to localhost'",
      "AGENT: 'Firefox: Advanced → Accept Risk and Continue'",
      "AGENT: 'Or add to system trust store:'",
      "Trust on Debian/Ubuntu: sudo cp localhost.crt /usr/local/share/ca-certificates/",
      "Update: sudo update-ca-certificates",
      "Trust on Arch: sudo trust anchor --store localhost.crt",
      "AGENT: 'Certificate trusted system-wide ✓'",
      "Create cert generator: cat > ~/gen-ssl-cert.sh << 'EOF'",
      "#!/bin/bash",
      "DOMAIN=${1:-localhost}",
      "DAYS=${2:-365}",
      "openssl genrsa -out $DOMAIN.key 2048",
      "openssl req -new -x509 -key $DOMAIN.key -out $DOMAIN.crt -days $DAYS -subj \"/CN=$DOMAIN\"",
      "echo \"✓ Generated $DOMAIN.crt and $DOMAIN.key (valid $DAYS days)\"",
      "echo ''",
      "echo 'For Nginx:'",
      "echo \"  ssl_certificate $(pwd)/$DOMAIN.crt;\"",
      "echo \"  ssl_certificate_key $(pwd)/$DOMAIN.key;\"",
      "EOF",
      "chmod +x ~/gen-ssl-cert.sh",
      "AGENT: 'SSL certificate generator created ✓'",
      "AGENT: 'Usage: ./gen-ssl-cert.sh [domain] [days]'"
    ],
    "commands": ["openssl", "update-ca-certificates", "trust"],
    "packages": {"debian_ubuntu": ["openssl"], "arch": ["openssl"]},
    "related_commands": ["openssl", "certbot", "mkcert"],
    "complexity": "intermediate",
    "tags": ["ssl", "https", "certificates", "security", "development", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_gpg_keys_001",
    "command": "gpg",
    "scenario": "User: Want to encrypt files and emails",
    "problem": "Need secure encryption for sensitive data",
    "solution": "Setup GPG keys for encryption",
    "steps": [
      "USER SAYS: 'I need to encrypt some sensitive files before uploading.'",
      "AGENT: 'Perfect use case for GPG! Let me set it up...'",
      "Check version: gpg --version",
      "Generate key: gpg --full-generate-key",
      "AGENT: 'Options:'",
      "AGENT: '- Type: RSA and RSA (default)'",
      "AGENT: '- Keysize: 4096 bits'",
      "AGENT: '- Valid for: 0 = never expires'",
      "AGENT: '- Enter your name and email'",
      "AGENT: '- Set a strong passphrase'",
      "List keys: gpg --list-keys",
      "AGENT: 'Your key ID: ABC123DEF456 ✓'",
      "USER: 'How do I encrypt a file?'",
      "AGENT: 'Simple!'",
      "Encrypt: gpg --encrypt --recipient your@email.com secret.txt",
      "AGENT: 'Created secret.txt.gpg (encrypted) ✓'",
      "Decrypt: gpg --decrypt secret.txt.gpg > secret.txt",
      "AGENT: 'Decrypted ✓'",
      "USER: 'What about encrypting for someone else?'",
      "AGENT: 'Import their public key first:'",
      "Import: gpg --import their-public-key.asc",
      "Encrypt for them: gpg --encrypt --recipient their@email.com file.txt",
      "AGENT: 'Only they can decrypt it with their private key ✓'",
      "Export public key: gpg --armor --export your@email.com > my-public-key.asc",
      "AGENT: 'Share my-public-key.asc so others can send you encrypted files ✓'",
      "Create encryption script: cat > ~/encrypt-file.sh << 'EOF'",
      "#!/bin/bash",
      "if [ -z \"$1\" ]; then",
      "  echo 'Usage: ./encrypt-file.sh <file>'",
      "  exit 1",
      "fi",
      "FILE=$1",
      "gpg --encrypt --recipient $(gpg --list-keys | grep uid | head -1 | grep -oP '\\S+@\\S+') $FILE",
      "echo \"✓ Encrypted to ${FILE}.gpg\"",
      "echo 'Original file NOT deleted (do it manually if needed)'",
      "EOF",
      "chmod +x ~/encrypt-file.sh",
      "Create decryption script: cat > ~/decrypt-file.sh << 'EOF'",
      "#!/bin/bash",
      "if [ -z \"$1\" ]; then",
      "  echo 'Usage: ./decrypt-file.sh <file.gpg>'",
      "  exit 1",
      "fi",
      "FILE=$1",
      "OUTPUT=${FILE%.gpg}",
      "gpg --decrypt $FILE > $OUTPUT",
      "echo \"✓ Decrypted to $OUTPUT\"",
      "EOF",
      "chmod +x ~/decrypt-file.sh",
      "AGENT: 'Encryption tools ready! ✓'",
      "AGENT: 'Pro tip: Backup your private key:'",
      "Backup: gpg --armor --export-secret-keys your@email.com > private-key-backup.asc",
      "AGENT: 'Store private-key-backup.asc somewhere VERY safe! ✓'"
    ],
    "commands": ["gpg"],
    "packages": {"debian_ubuntu": ["gnupg"], "arch": ["gnupg"]},
    "related_commands": ["gpg", "gpg2", "pgp"],
    "complexity": "intermediate",
    "tags": ["encryption", "gpg", "security", "privacy", "files", "real-world", "ai-agent"]
  }
]

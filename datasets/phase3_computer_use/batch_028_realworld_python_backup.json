[
  {
    "id": "scenario_python_broken_001",
    "command": "multiple",
    "scenario": "User: Python script won't run - module not found",
    "problem": "ImportError or ModuleNotFoundError when running Python script",
    "solution": "Diagnose and fix Python environment and dependencies",
    "steps": [
      "USER SAYS: 'My Python script is broken! It says: ModuleNotFoundError: No module named requests'",
      "AGENT: 'Let me help fix this. First, checking your Python setup...'",
      "Check Python version: python3 --version",
      "Check pip: pip3 --version",
      "AGENT: 'You have Python 3.11.4. Checking if you're in a virtual environment...'",
      "Check venv: echo $VIRTUAL_ENV",
      "If empty: AGENT: 'You're not in a virtual environment. Are you supposed to be?'",
      "USER: 'I don't know, I just want the script to work'",
      "AGENT: 'Let me check where Python is looking for modules...'",
      "Show path: python3 -c 'import sys; print(\"\\n\".join(sys.path))'",
      "AGENT: 'Checking if requests is installed...'",
      "Try import: python3 -c 'import requests' 2>&1",
      "If error: AGENT: 'requests module not installed. Installing...'",
      "Install: pip3 install requests",
      "If permission error: AGENT: 'Need sudo or user install. Using --user flag...'",
      "User install: pip3 install --user requests",
      "Verify: python3 -c 'import requests; print(requests.__version__)'",
      "AGENT: 'requests installed! Version: 2.31.0'",
      "Test script: USER: 'Still getting error!'",
      "AGENT: 'Let me check which Python you're running vs which pip...'",
      "Check Python: which python3",
      "Check pip: which pip3",
      "AGENT: 'Checking what each points to...'",
      "Python real path: readlink -f $(which python3)",
      "Pip Python: pip3 --version | grep -oP '\\(python \\K[^\\)]+'",
      "If mismatch: AGENT: 'Found the problem! Your pip installs to different Python.'",
      "AGENT: 'Python is: /usr/bin/python3.11'",
      "AGENT: 'Pip installs to: /usr/bin/python3.10'",
      "AGENT: 'Fixing by using python -m pip instead...'",
      "Correct install: python3 -m pip install requests",
      "AGENT: 'This ensures module goes to right Python version'",
      "Scenario: requirements.txt",
      "USER: 'I have a requirements.txt file'",
      "AGENT: 'Perfect! Let me install all dependencies...'",
      "Show requirements: cat requirements.txt",
      "AGENT: 'Installing: requests, numpy, pandas, flask'",
      "Install all: pip3 install -r requirements.txt",
      "If version conflicts: AGENT: 'Some version conflicts detected...'",
      "Show conflicts: pip3 install -r requirements.txt 2>&1 | grep -i conflict",
      "AGENT: 'Would you like me to:'",
      "AGENT: '1. Install with --ignore-conflicts'",
      "AGENT: '2. Create virtual environment (recommended)'",
      "AGENT: '3. Upgrade conflicting packages'",
      "USER: 'What's a virtual environment?'",
      "AGENT: 'It's an isolated Python space for your project. Prevents conflicts.'",
      "AGENT: 'Let me set one up for you...'",
      "Create venv: python3 -m venv venv",
      "AGENT: 'Virtual environment created. Activating...'",
      "Activate: source venv/bin/activate",
      "Verify: which python3",
      "AGENT: 'Now using: ./venv/bin/python3 (isolated from system)'",
      "Install in venv: pip install -r requirements.txt",
      "AGENT: 'All dependencies installed in virtual environment!'",
      "Create activation helper: cat > activate.sh << 'EOF'",
      "#!/bin/bash",
      "source venv/bin/activate",
      "echo 'Virtual environment activated!'",
      "echo 'Python: '$(which python)",
      "echo 'To deactivate: deactivate'",
      "EOF",
      "Make executable: chmod +x activate.sh",
      "AGENT: 'Created activate.sh for easy activation'",
      "Scenario: System vs user packages",
      "USER: 'I installed it but script still fails!'",
      "AGENT: 'Let me check all installed locations...'",
      "System packages: pip3 list",
      "User packages: pip3 list --user",
      "Venv packages: source venv/bin/activate && pip list",
      "AGENT: 'I see requests in user packages but not in venv'",
      "AGENT: 'Your script runs in venv but requests is in user install'",
      "Fix: source venv/bin/activate && pip install requests",
      "Scenario: Wrong Python shebang",
      "Check script shebang: head -1 script.py",
      "If #!/usr/bin/python: AGENT: 'Script uses python (Python 2), not python3!'",
      "Fix shebang: sed -i '1s|#!/usr/bin/python|#!/usr/bin/env python3|' script.py",
      "AGENT: 'Updated shebang to use python3'",
      "Verify: head -1 script.py",
      "Scenario: Module installed but not found",
      "USER: 'I know it's installed but Python can't find it'",
      "AGENT: 'Checking Python's module search paths...'",
      "Show paths: python3 -c 'import sys; import pprint; pprint.pprint(sys.path)'",
      "Find module: python3 -c 'import requests; print(requests.__file__)'",
      "AGENT: 'Found requests at: /home/user/.local/lib/python3.11/site-packages'",
      "AGENT: 'This should be in sys.path. Let me verify...'",
      "Check if in path: python3 -c 'import sys; print(\"/home/user/.local/lib/python3.11/site-packages\" in sys.path)'",
      "If False: AGENT: 'Found issue! Path not in sys.path. Adding...'",
      "Add to PYTHONPATH: echo 'export PYTHONPATH=$PYTHONPATH:/home/user/.local/lib/python3.11/site-packages' >> ~/.bashrc",
      "Source: source ~/.bashrc",
      "Create diagnostic script: AGENT: 'Creating Python environment checker...'",
      "Create script: cat > ~/python-check.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Python Environment Diagnostics ==='",
      "echo ''",
      "echo 'Python version:'",
      "python3 --version",
      "echo ''",
      "echo 'Python path:'",
      "which python3",
      "echo ''",
      "echo 'Pip version:'",
      "pip3 --version",
      "echo ''",
      "echo 'Pip path:'",
      "which pip3",
      "echo ''",
      "echo 'Virtual environment:'",
      "[ -n \"$VIRTUAL_ENV\" ] && echo \"Active: $VIRTUAL_ENV\" || echo 'Not active'",
      "echo ''",
      "echo 'Installed packages:'",
      "pip3 list | head -10",
      "echo '...'",
      "echo ''",
      "echo 'Module search paths:'",
      "python3 -c 'import sys; print(\"\\n\".join(sys.path[:5]))'",
      "echo '...'",
      "EOF",
      "Make executable: chmod +x ~/python-check.sh",
      "AGENT: 'Created ~/python-check.sh for diagnostics'",
      "Test it: ~/python-check.sh",
      "Create requirements freezer: AGENT: 'Creating requirements snapshot tool...'",
      "Create script: cat > ~/freeze-requirements.sh << 'EOF'",
      "#!/bin/bash",
      "if [ -n \"$VIRTUAL_ENV\" ]; then",
      "  pip freeze > requirements.txt",
      "  echo '✓ Saved to requirements.txt'",
      "  wc -l requirements.txt",
      "else",
      "  echo '✗ No virtual environment active'",
      "  echo 'Run: source venv/bin/activate'",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/freeze-requirements.sh",
      "Add helpful aliases: cat >> ~/.bashrc << 'EOF'",
      "# Python helpers",
      "alias venv-create='python3 -m venv venv'",
      "alias venv-activate='source venv/bin/activate'",
      "alias venv-deactivate='deactivate'",
      "alias pip-install='pip install'",
      "alias pip-freeze='pip freeze > requirements.txt'",
      "alias python-which='which python3 && python3 --version'",
      "EOF",
      "Source: source ~/.bashrc",
      "Final summary: AGENT: 'Fixed! Summary:'",
      "AGENT: '✓ Created virtual environment: ./venv'",
      "AGENT: '✓ Installed all dependencies from requirements.txt'",
      "AGENT: '✓ Script now runs successfully'",
      "AGENT: ''",
      "AGENT: 'To use:'",
      "AGENT: '1. source venv/bin/activate (or ./activate.sh)'",
      "AGENT: '2. python script.py'",
      "AGENT: '3. deactivate (when done)'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '- activate.sh (quick activation)'",
      "AGENT: '- ~/python-check.sh (diagnostics)'",
      "AGENT: '- ~/freeze-requirements.sh (save dependencies)'",
      "AGENT: ''",
      "AGENT: 'Added aliases: venv-create, venv-activate, pip-freeze'",
      "Test final run: source venv/bin/activate && python3 script.py",
      "AGENT: 'Script runs successfully! ✓'"
    ],
    "commands": ["python3", "pip3", "which", "readlink", "cat", "grep", "sed", "source", "head", "chmod", "wc"],
    "packages": {
      "debian_ubuntu": ["python3", "python3-pip", "python3-venv"],
      "arch": ["python", "python-pip"]
    },
    "related_commands": ["python", "pip", "virtualenv", "conda"],
    "complexity": "intermediate",
    "tags": ["python", "pip", "modules", "dependencies", "troubleshooting", "virtualenv", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_backup_files_001",
    "command": "multiple",
    "scenario": "User: Help me backup my important files",
    "problem": "Need to backup documents, photos, and projects safely",
    "solution": "Create comprehensive backup strategy with verification",
    "steps": [
      "USER SAYS: 'I'm worried about losing my files. Can you help me back them up?'",
      "AGENT: 'Absolutely! Let me help you create a safe backup. What do you want to backup?'",
      "USER: 'My documents, photos, and coding projects'",
      "AGENT: 'Good choices. Where should I backup to? External drive, cloud, or both?'",
      "USER: 'I have an external drive at /mnt/backup'",
      "AGENT: 'Perfect! Let me verify the drive first...'",
      "Check drive: df -h /mnt/backup",
      "AGENT: 'Drive has 500GB free. Calculating size of files to backup...'",
      "Calculate size: du -sh ~/Documents ~/Pictures ~/projects",
      "AGENT: 'Total to backup:'",
      "AGENT: '- Documents: 5.2GB'",
      "AGENT: '- Pictures: 32GB'",
      "AGENT: '- Projects: 8.1GB'",
      "AGENT: '- Total: ~45GB (you have 500GB free)'",
      "USER: 'That's fine, go ahead'",
      "AGENT: 'I'll use rsync for incremental backups. This means:'",
      "AGENT: '1. First backup: Copies everything (~30-45 min)'",
      "AGENT: '2. Future backups: Only copies changes (much faster)'",
      "AGENT: '3. Preserves permissions and timestamps'",
      "Create backup directory: mkdir -p /mnt/backup/$(hostname)-backup",
      "AGENT: 'Created backup folder: /mnt/backup/$(hostname)-backup'",
      "Start Documents backup: AGENT: 'Starting Documents backup...'",
      "Backup Documents: rsync -avh --progress ~/Documents/ /mnt/backup/$(hostname)-backup/Documents/",
      "Flags: -a=archive, -v=verbose, -h=human-readable, --progress=show progress",
      "AGENT: 'Documents backed up successfully!'",
      "Pictures backup: AGENT: 'Backing up Pictures (this will take longer, 32GB)...'",
      "Backup Pictures: rsync -avh --progress ~/Pictures/ /mnt/backup/$(hostname)-backup/Pictures/",
      "AGENT: 'Pictures backed up!'",
      "Projects backup: AGENT: 'Backing up Projects (excluding build files)...'",
      "Backup with excludes: rsync -avh --progress --exclude='node_modules' --exclude='venv' --exclude='__pycache__' --exclude='.git' --exclude='*.pyc' --exclude='build/' --exclude='dist/' ~/projects/ /mnt/backup/$(hostname)-backup/projects/",
      "AGENT: 'Projects backed up (excluded temporary/build files)'",
      "Verify backup: AGENT: 'Verifying backup integrity...'",
      "Check files: diff -qr ~/Documents /mnt/backup/$(hostname)-backup/Documents | head -20",
      "Count files: echo \"Original: $(find ~/Documents -type f | wc -l) files\"",
      "Count backup: echo \"Backup: $(find /mnt/backup/$(hostname)-backup/Documents -type f | wc -l) files\"",
      "AGENT: 'Verification: All files backed up correctly!'",
      "Create backup log: AGENT: 'Creating backup log...'",
      "Log file: cat > /mnt/backup/$(hostname)-backup/backup.log << EOF",
      "Backup Date: $(date)",
      "Hostname: $(hostname)",
      "User: $USER",
      "Backup Location: /mnt/backup/$(hostname)-backup",
      "",
      "Backed up:",
      "- Documents: $(du -sh ~/Documents | cut -f1)",
      "- Pictures: $(du -sh ~/Pictures | cut -f1)",
      "- Projects: $(du -sh ~/projects | cut -f1)",
      "",
      "Total: $(du -sh /mnt/backup/$(hostname)-backup | cut -f1)",
      "EOF",
      "Show log: cat /mnt/backup/$(hostname)-backup/backup.log",
      "Create automated backup script: AGENT: 'Creating automated backup script...'",
      "Create script: cat > ~/backup-to-drive.sh << 'EOF'",
      "#!/bin/bash",
      "BACKUP_DEST='/mnt/backup/$(hostname)-backup'",
      "LOG_FILE=\"$BACKUP_DEST/backup-$(date +%Y%m%d-%H%M%S).log\"",
      "",
      "echo '=== Backup Started: $(date) ===' | tee $LOG_FILE",
      "",
      "# Check if backup drive mounted",
      "if [ ! -d /mnt/backup ]; then",
      "  echo '✗ Backup drive not mounted!' | tee -a $LOG_FILE",
      "  exit 1",
      "fi",
      "",
      "# Backup Documents",
      "echo 'Backing up Documents...' | tee -a $LOG_FILE",
      "rsync -ah --delete ~/Documents/ $BACKUP_DEST/Documents/ 2>&1 | tee -a $LOG_FILE",
      "",
      "# Backup Pictures",
      "echo 'Backing up Pictures...' | tee -a $LOG_FILE",
      "rsync -ah --delete ~/Pictures/ $BACKUP_DEST/Pictures/ 2>&1 | tee -a $LOG_FILE",
      "",
      "# Backup Projects (with excludes)",
      "echo 'Backing up Projects...' | tee -a $LOG_FILE",
      "rsync -ah --delete --exclude='node_modules' --exclude='venv' --exclude='__pycache__' --exclude='.git' ~/projects/ $BACKUP_DEST/projects/ 2>&1 | tee -a $LOG_FILE",
      "",
      "# Summary",
      "echo '' | tee -a $LOG_FILE",
      "echo '=== Backup Complete: $(date) ===' | tee -a $LOG_FILE",
      "echo 'Total backup size: '$(du -sh $BACKUP_DEST | cut -f1) | tee -a $LOG_FILE",
      "echo 'Log saved to: '$LOG_FILE",
      "",
      "# Desktop notification",
      "notify-send 'Backup Complete' 'Your files have been backed up successfully'",
      "EOF",
      "Make executable: chmod +x ~/backup-to-drive.sh",
      "AGENT: 'Created ~/backup-to-drive.sh for easy backups'",
      "Test script: AGENT: 'Want to test the backup script?'",
      "USER: 'Yes'",
      "Run: ~/backup-to-drive.sh",
      "AGENT: 'Backup completed! Check the log.'",
      "Show latest log: ls -lt /mnt/backup/$(hostname)-backup/*.log | head -1 | awk '{print $9}' | xargs cat",
      "Schedule automated backups: AGENT: 'Should I schedule automatic backups?'",
      "USER: 'Yes, daily at 2am'",
      "AGENT: 'Setting up daily backup at 2am...'",
      "Add to crontab: (crontab -l 2>/dev/null; echo '0 2 * * * /home/$USER/backup-to-drive.sh >> /home/$USER/backup.log 2>&1') | crontab -",
      "Verify: crontab -l | grep backup",
      "AGENT: 'Automatic daily backup scheduled at 2am'",
      "Create restore script: AGENT: 'Creating restore script in case you need it...'",
      "Create restore: cat > ~/restore-from-backup.sh << 'EOF'",
      "#!/bin/bash",
      "BACKUP_SRC='/mnt/backup/$(hostname)-backup'",
      "",
      "echo 'Available backups:'",
      "ls -lh $BACKUP_SRC",
      "echo ''",
      "read -p 'Restore from backup? (yes/no): ' CONFIRM",
      "",
      "if [ \"$CONFIRM\" != 'yes' ]; then",
      "  echo 'Restore cancelled'",
      "  exit 0",
      "fi",
      "",
      "echo 'WARNING: This will overwrite your current files!'",
      "read -p 'Are you SURE? (type YES): ' CONFIRM2",
      "",
      "if [ \"$CONFIRM2\" != 'YES' ]; then",
      "  echo 'Restore cancelled'",
      "  exit 0",
      "fi",
      "",
      "echo 'Restoring Documents...'",
      "rsync -avh $BACKUP_SRC/Documents/ ~/Documents/",
      "echo 'Restoring Pictures...'",
      "rsync -avh $BACKUP_SRC/Pictures/ ~/Pictures/",
      "echo 'Restoring Projects...'",
      "rsync -avh $BACKUP_SRC/projects/ ~/projects/",
      "",
      "echo 'Restore complete!'",
      "EOF",
      "Make executable: chmod +x ~/restore-from-backup.sh",
      "AGENT: 'Created ~/restore-from-backup.sh for recovery'",
      "Create quick status check: cat > ~/backup-status.sh << 'EOF'",
      "#!/bin/bash",
      "BACKUP_DEST='/mnt/backup/$(hostname)-backup'",
      "",
      "if [ ! -d \"$BACKUP_DEST\" ]; then",
      "  echo '✗ No backup found'",
      "  exit 1",
      "fi",
      "",
      "echo '=== Backup Status ==='",
      "echo ''",
      "echo 'Location: '$BACKUP_DEST",
      "echo 'Total size: '$(du -sh $BACKUP_DEST | cut -f1)",
      "echo ''",
      "echo 'Latest backup log:'",
      "ls -t $BACKUP_DEST/*.log 2>/dev/null | head -1 | xargs tail -5",
      "echo ''",
      "echo 'Backup contents:'",
      "du -sh $BACKUP_DEST/*/ 2>/dev/null",
      "EOF",
      "Make executable: chmod +x ~/backup-status.sh",
      "Add aliases: cat >> ~/.bashrc << 'EOF'",
      "# Backup aliases",
      "alias backup-now='~/backup-to-drive.sh'",
      "alias backup-status='~/backup-status.sh'",
      "alias backup-restore='~/restore-from-backup.sh'",
      "EOF",
      "Source: source ~/.bashrc",
      "Final summary: AGENT: 'Backup system complete! Summary:'",
      "AGENT: ''",
      "AGENT: '✓ Initial backup: 45GB backed up to /mnt/backup'",
      "AGENT: '✓ Automated daily backups: 2am every day'",
      "AGENT: '✓ Backup log: Tracks each backup'",
      "AGENT: ''",
      "AGENT: 'Commands available:'",
      "AGENT: '- backup-now: Run backup immediately'",
      "AGENT: '- backup-status: Check backup status'",
      "AGENT: '- backup-restore: Restore from backup'",
      "AGENT: ''",
      "AGENT: 'Scripts created:'",
      "AGENT: '- ~/backup-to-drive.sh'",
      "AGENT: '- ~/restore-from-backup.sh'",
      "AGENT: '- ~/backup-status.sh'",
      "AGENT: ''",
      "AGENT: 'Next backup: Tomorrow at 2am'",
      "AGENT: 'Backup includes: Documents, Pictures, Projects'",
      "AGENT: 'Excludes: Build files, temp files, git history'"
    ],
    "commands": ["rsync", "df", "du", "mkdir", "diff", "find", "cat", "date", "hostname", "chmod", "crontab", "ls", "notify-send", "tee"],
    "packages": {
      "debian_ubuntu": ["rsync", "coreutils", "cron", "libnotify-bin"],
      "arch": ["rsync", "coreutils", "cronie", "libnotify"]
    },
    "related_commands": ["rsync", "cp", "tar", "zip", "rclone"],
    "complexity": "beginner",
    "tags": ["backup", "rsync", "data-safety", "automation", "cron", "real-world", "ai-agent"]
  }
]

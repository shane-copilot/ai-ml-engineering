[
  {
    "id": "scenario_database_connection_refused_001",
    "command": "systemctl",
    "scenario": "Developer: Can't connect to local PostgreSQL database",
    "problem": "Database service not running, connection refused",
    "solution": "Start and configure PostgreSQL service",
    "steps": [
      "USER SAYS: 'My app can\\'t connect to PostgreSQL! Getting connection refused.'",
      "AGENT: 'Let me check if PostgreSQL is running...'",
      "Check service: sudo systemctl status postgresql",
      "AGENT: 'postgresql.service: inactive (dead)'",
      "AGENT: 'PostgreSQL is not running!'",
      "Start service: sudo systemctl start postgresql",
      "AGENT: 'Starting PostgreSQL...'",
      "Check status: sudo systemctl status postgresql",
      "AGENT: 'active (running) ✓'",
      "Test connection: psql -U postgres -h localhost",
      "AGENT: 'psql: connection to server at \"localhost\" failed'",
      "AGENT: 'FATAL: Peer authentication failed'",
      "AGENT: 'Service is running but auth is misconfigured'",
      "USER: 'How do I fix authentication?'",
      "AGENT: 'Check pg_hba.conf configuration...'",
      "Find config: sudo -u postgres psql -c 'SHOW hba_file;'",
      "AGENT: '/etc/postgresql/14/main/pg_hba.conf'",
      "Check config: sudo cat /etc/postgresql/14/main/pg_hba.conf | grep -v '^#' | grep -v '^$'",
      "AGENT: 'local   all   postgres   peer'",
      "AGENT: 'host    all   all   127.0.0.1/32   scram-sha-256'",
      "AGENT: '\"peer\" requires Linux user to match DB user'",
      "Backup config: sudo cp /etc/postgresql/14/main/pg_hba.conf /etc/postgresql/14/main/pg_hba.conf.backup",
      "AGENT: 'Config backed up ✓'",
      "Fix auth: sudo sed -i 's/peer/md5/' /etc/postgresql/14/main/pg_hba.conf",
      "AGENT: 'Changed peer to md5 for password auth ✓'",
      "Reload config: sudo systemctl reload postgresql",
      "AGENT: 'Configuration reloaded ✓'",
      "Test: psql -U postgres -h localhost",
      "AGENT: 'Password for user postgres:'",
      "USER: 'I don\\'t know the postgres password!'",
      "AGENT: 'Let me reset it...'",
      "Reset password: sudo -u postgres psql -c \"ALTER USER postgres PASSWORD 'devpass123';\"",
      "AGENT: 'ALTER ROLE ✓'",
      "AGENT: 'Password set to: devpass123'",
      "Test: psql -U postgres -h localhost -W",
      "AGENT: 'Password: [enter devpass123]'",
      "AGENT: 'postgres=# ✓ Connected!'",
      "Create dev database: CREATE DATABASE myapp_dev;",
      "AGENT: 'CREATE DATABASE ✓'",
      "Create dev user: CREATE USER myapp WITH PASSWORD 'devpass';",
      "AGENT: 'CREATE ROLE ✓'",
      "Grant privileges: GRANT ALL PRIVILEGES ON DATABASE myapp_dev TO myapp;",
      "AGENT: 'GRANT ✓'",
      "Exit psql: \\q",
      "Test app connection: psql -U myapp -d myapp_dev -h localhost -W",
      "AGENT: 'myapp_dev=> ✓ Working!'",
      "Enable auto-start: sudo systemctl enable postgresql",
      "AGENT: 'PostgreSQL will start on boot ✓'",
      "Create DB helper: cat > ~/db-helper.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== PostgreSQL Helper ==='",
      "echo ''",
      "echo '1. Check status'",
      "echo '2. Start/Stop/Restart'",
      "echo '3. Create database'",
      "echo '4. Create user'",
      "echo '5. Reset postgres password'",
      "echo '6. Show databases'",
      "echo '7. Show users'",
      "echo '8. Connection info'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1)",
      "    sudo systemctl status postgresql",
      "    ;;",
      "  2)",
      "    echo '1. Start  2. Stop  3. Restart'",
      "    read -p 'Action: ' ACTION",
      "    case $ACTION in",
      "      1) sudo systemctl start postgresql ;;",
      "      2) sudo systemctl stop postgresql ;;",
      "      3) sudo systemctl restart postgresql ;;",
      "    esac",
      "    ;;",
      "  3)",
      "    read -p 'Database name: ' DBNAME",
      "    sudo -u postgres createdb $DBNAME",
      "    echo \"✓ Database $DBNAME created\"",
      "    ;;",
      "  4)",
      "    read -p 'Username: ' USERNAME",
      "    read -s -p 'Password: ' PASSWORD",
      "    echo ''",
      "    sudo -u postgres psql -c \"CREATE USER $USERNAME WITH PASSWORD '$PASSWORD';\"",
      "    echo \"✓ User $USERNAME created\"",
      "    ;;",
      "  5)",
      "    read -s -p 'New postgres password: ' PASS",
      "    echo ''",
      "    sudo -u postgres psql -c \"ALTER USER postgres PASSWORD '$PASS';\"",
      "    echo '✓ Password updated'",
      "    ;;",
      "  6)",
      "    sudo -u postgres psql -l",
      "    ;;",
      "  7)",
      "    sudo -u postgres psql -c '\\du'",
      "    ;;",
      "  8)",
      "    echo 'Connection strings:'",
      "    echo '  psql: psql -U username -d database -h localhost'",
      "    echo '  URI:  postgresql://username:password@localhost/database'",
      "    echo ''",
      "    echo 'Config files:'",
      "    sudo -u postgres psql -c 'SHOW config_file;'",
      "    sudo -u postgres psql -c 'SHOW hba_file;'",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/db-helper.sh",
      "Create connection tester: cat > ~/test-db.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Database Connection Test ==='",
      "echo ''",
      "read -p 'Host [localhost]: ' HOST",
      "HOST=${HOST:-localhost}",
      "read -p 'Port [5432]: ' PORT",
      "PORT=${PORT:-5432}",
      "read -p 'Database: ' DB",
      "read -p 'User: ' USER",
      "read -s -p 'Password: ' PASS",
      "echo ''",
      "echo ''",
      "echo 'Testing connection...'",
      "PGPASSWORD=$PASS psql -h $HOST -p $PORT -U $USER -d $DB -c 'SELECT version();'",
      "if [ $? -eq 0 ]; then",
      "  echo ''",
      "  echo '✓ Connection successful!'",
      "else",
      "  echo ''",
      "  echo '✗ Connection failed'",
      "  echo ''",
      "  echo 'Troubleshooting:'",
      "  echo '1. Check if PostgreSQL is running:'",
      "  echo '   sudo systemctl status postgresql'",
      "  echo '2. Check if port is listening:'",
      "  echo '   sudo ss -tlnp | grep :5432'",
      "  echo '3. Check pg_hba.conf authentication settings'",
      "fi",
      "EOF",
      "chmod +x ~/test-db.sh",
      "Show connection string: echo 'postgresql://myapp:devpass@localhost/myapp_dev'",
      "AGENT: 'Use this connection string in your app ✓'",
      "AGENT: 'PostgreSQL running and accessible! ✓'",
      "AGENT: 'Database myapp_dev ready for development ✓'"
    ],
    "commands": ["systemctl", "psql", "createdb"],
    "packages": {"debian_ubuntu": ["postgresql", "postgresql-contrib"], "arch": ["postgresql"]},
    "related_commands": ["psql", "pg_ctl", "createdb", "dropdb"],
    "complexity": "intermediate",
    "tags": ["postgresql", "database", "service", "authentication", "development", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_environment_variables_not_loading_001",
    "command": "env",
    "scenario": "Developer: App can't find environment variables",
    "problem": "Variables not loading in different contexts",
    "solution": "Properly configure environment variables",
    "steps": [
      "USER SAYS: 'My app crashes! Says API_KEY environment variable is not set!'",
      "AGENT: 'Let me check your environment variables...'",
      "Check variable: echo $API_KEY",
      "AGENT: '(empty)'",
      "AGENT: 'Variable not set in current shell'",
      "Check all env: env | grep API",
      "AGENT: 'No API variables found'",
      "USER: 'But I set it in .bashrc!'",
      "AGENT: 'Let me check...'",
      "Check bashrc: cat ~/.bashrc | grep API_KEY",
      "AGENT: 'export API_KEY=\"sk-abc123\"'",
      "AGENT: 'It\\'s in .bashrc but not loaded'",
      "Reload: source ~/.bashrc",
      "AGENT: 'Sourced .bashrc ✓'",
      "Check again: echo $API_KEY",
      "AGENT: 'sk-abc123 ✓ Now it\\'s set!'",
      "Run app: python app.py",
      "AGENT: 'Application started ✓'",
      "USER: 'But why doesn\\'t it work when I run from VS Code?'",
      "AGENT: 'VS Code doesn\\'t load .bashrc for GUI apps!'",
      "AGENT: 'Better solution: use .env file...'",
      "Create .env: cat > .env << 'EOF'",
      "API_KEY=sk-abc123",
      "DATABASE_URL=postgresql://user:pass@localhost/db",
      "DEBUG=True",
      "LOG_LEVEL=INFO",
      "EOF",
      "AGENT: '.env file created ✓'",
      "Add to gitignore: echo '.env' >> .gitignore",
      "AGENT: '.env added to gitignore (keeps secrets safe!) ✓'",
      "Create template: cat > .env.example << 'EOF'",
      "API_KEY=your_api_key_here",
      "DATABASE_URL=postgresql://user:pass@localhost/db",
      "DEBUG=True",
      "LOG_LEVEL=INFO",
      "EOF",
      "AGENT: '.env.example created for team ✓'",
      "Install loader: pip install python-dotenv",
      "AGENT: 'python-dotenv installed ✓'",
      "Update app: cat > load_env.py << 'EOF'",
      "from dotenv import load_dotenv",
      "import os",
      "# Load .env file",
      "load_dotenv()",
      "# Now variables are available",
      "api_key = os.getenv('API_KEY')",
      "db_url = os.getenv('DATABASE_URL')",
      "print(f'API Key loaded: {api_key[:10]}...')",
      "EOF",
      "Test: python load_env.py",
      "AGENT: 'API Key loaded: sk-abc123... ✓'",
      "AGENT: 'Working from any context now!'",
      "USER: 'What about system-wide variables?'",
      "AGENT: 'For system services, use systemd environment...'",
      "Create env file: sudo cat > /etc/myapp.env << 'EOF'",
      "API_KEY=sk-abc123",
      "DATABASE_URL=postgresql://user:pass@localhost/db",
      "EOF",
      "Secure it: sudo chmod 600 /etc/myapp.env",
      "sudo chown root:root /etc/myapp.env",
      "AGENT: 'System environment file secured ✓'",
      "For systemd: sudo cat > /etc/systemd/system/myapp.service << 'EOF'",
      "[Unit]",
      "Description=My Application",
      "[Service]",
      "EnvironmentFile=/etc/myapp.env",
      "ExecStart=/usr/bin/python3 /opt/myapp/app.py",
      "[Install]",
      "WantedBy=multi-user.target",
      "EOF",
      "AGENT: 'Systemd service will load environment ✓'",
      "Create env helper: cat > ~/env-helper.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Environment Variable Helper ==='",
      "echo ''",
      "echo '1. Show all environment variables'",
      "echo '2. Show specific variable'",
      "echo '3. Set variable (current session)'",
      "echo '4. Add to .bashrc (permanent)'",
      "echo '5. Create .env file'",
      "echo '6. Load .env file'",
      "echo '7. Check where variable is defined'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1)",
      "    env | sort",
      "    ;;",
      "  2)",
      "    read -p 'Variable name: ' VAR",
      "    echo \"$VAR = ${!VAR}\"",
      "    ;;",
      "  3)",
      "    read -p 'Variable name: ' VAR",
      "    read -p 'Value: ' VAL",
      "    export $VAR=\"$VAL\"",
      "    echo \"✓ $VAR set to: $VAL (this session only)\"",
      "    ;;",
      "  4)",
      "    read -p 'Variable name: ' VAR",
      "    read -p 'Value: ' VAL",
      "    echo \"export $VAR=\\\"$VAL\\\"\" >> ~/.bashrc",
      "    export $VAR=\"$VAL\"",
      "    echo \"✓ Added to .bashrc and set for current session\"",
      "    ;;",
      "  5)",
      "    if [ -f .env ]; then",
      "      echo '⚠️ .env already exists'",
      "      read -p 'Overwrite? (y/n): ' CONFIRM",
      "      if [ \"$CONFIRM\" != 'y' ]; then exit; fi",
      "    fi",
      "    read -p 'Add variables (format: KEY=value, empty to finish):'",
      "    echo '# Environment variables' > .env",
      "    while true; do",
      "      read -p 'Variable: ' LINE",
      "      if [ -z \"$LINE\" ]; then break; fi",
      "      echo \"$LINE\" >> .env",
      "    done",
      "    echo '✓ .env created'",
      "    ;;",
      "  6)",
      "    if [ ! -f .env ]; then",
      "      echo '✗ .env file not found'",
      "      exit 1",
      "    fi",
      "    set -a",
      "    source .env",
      "    set +a",
      "    echo '✓ .env loaded into current session'",
      "    ;;",
      "  7)",
      "    read -p 'Variable name: ' VAR",
      "    echo \"Searching for $VAR...\"",
      "    echo ''",
      "    echo 'In current environment:'",
      "    env | grep \"^$VAR=\"",
      "    echo ''",
      "    echo 'In .bashrc:'",
      "    grep \"$VAR\" ~/.bashrc 2>/dev/null",
      "    echo ''",
      "    echo 'In .env:'",
      "    grep \"$VAR\" .env 2>/dev/null",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/env-helper.sh",
      "Create variable checker: cat > ~/check-env.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Environment Check ==='",
      "echo ''",
      "echo 'Shell configuration files:'",
      "for file in ~/.bashrc ~/.bash_profile ~/.profile ~/.zshrc; do",
      "  if [ -f $file ]; then",
      "    echo \"✓ $file exists\"",
      "    COUNT=$(grep -c 'export' $file 2>/dev/null)",
      "    echo \"  Contains $COUNT export statements\"",
      "  fi",
      "done",
      "echo ''",
      "echo 'Project .env files:'",
      "if [ -f .env ]; then",
      "  echo '✓ .env found'",
      "  echo \"  Contains $(wc -l < .env) lines\"",
      "  echo '  Variables defined:'",
      "  grep -E '^[A-Z_]+=' .env | cut -d'=' -f1",
      "else",
      "  echo '✗ No .env file'",
      "fi",
      "echo ''",
      "echo 'Common environment variables:'",
      "for var in PATH HOME USER SHELL LANG; do",
      "  echo \"  $var = ${!var}\"",
      "done",
      "EOF",
      "chmod +x ~/check-env.sh",
      "AGENT: 'Environment variables properly configured! ✓'",
      "AGENT: 'App now loads variables from .env file ✓'",
      "AGENT: 'Use ~/env-helper.sh for managing variables ✓'"
    ],
    "commands": ["env", "export", "source"],
    "packages": {"debian_ubuntu": [], "arch": []},
    "related_commands": ["env", "export", "printenv", "set"],
    "complexity": "beginner",
    "tags": ["environment-variables", "configuration", "dotenv", "development", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_localhost_not_accessible_001",
    "command": "netstat",
    "scenario": "Developer: localhost:3000 not accessible in browser",
    "problem": "App running but can't access on localhost",
    "solution": "Diagnose network binding and firewall issues",
    "steps": [
      "USER SAYS: 'My server says it\\'s running on port 3000 but browser times out!'",
      "AGENT: 'Let me check if the port is actually listening...'",
      "Check listening: sudo netstat -tlnp | grep :3000",
      "AGENT: 'tcp  0  0  127.0.0.1:3000  0.0.0.0:*  LISTEN  12345/node'",
      "AGENT: 'Server is listening on 127.0.0.1:3000 ✓'",
      "Test connection: curl http://localhost:3000",
      "AGENT: 'curl: (7) Failed to connect to localhost port 3000: Connection refused'",
      "AGENT: 'Connection refused even though it\\'s listening!'",
      "USER: 'Why would that happen?'",
      "AGENT: 'Let me check IPv4 vs IPv6...'",
      "Check IPv6: curl http://[::1]:3000",
      "AGENT: 'Connection refused on IPv6 too'",
      "AGENT: 'Check browser settings...'",
      "Test detailed: curl -v http://127.0.0.1:3000",
      "AGENT: '* Trying 127.0.0.1:3000...'",
      "AGENT: '* connect to 127.0.0.1 port 3000 failed: Connection refused'",
      "USER: 'Wait, the app says \"Server listening on ::1:3000\"'",
      "AGENT: 'Found it! App bound to IPv6 only!'",
      "AGENT: 'Browser trying IPv4 (127.0.0.1) but app on IPv6 (::1)'",
      "Test IPv6: curl http://[::1]:3000",
      "AGENT: 'Hello World ✓ Works on IPv6!'",
      "AGENT: 'Need to bind to 0.0.0.0 for both IPv4/IPv6...'",
      "Check app code: cat server.js | grep listen",
      "AGENT: 'app.listen(3000, \"::1\")'",
      "AGENT: 'Hardcoded to IPv6!'",
      "Fix binding: sed -i 's/::1/0.0.0.0/' server.js",
      "AGENT: 'Changed to bind to all interfaces ✓'",
      "Restart app: kill 12345 && node server.js &",
      "AGENT: 'Server listening on 0.0.0.0:3000'",
      "Check listening: sudo netstat -tlnp | grep :3000",
      "AGENT: 'tcp  0  0  0.0.0.0:3000  0.0.0.0:*  LISTEN'",
      "AGENT: 'Now listening on all interfaces! ✓'",
      "Test: curl http://localhost:3000",
      "AGENT: 'Hello World ✓'",
      "Test browser: xdg-open http://localhost:3000",
      "AGENT: 'Browser opened ✓'",
      "USER: 'What\\'s the difference between 127.0.0.1, localhost, and 0.0.0.0?'",
      "AGENT: 'Great question!'",
      "AGENT: '127.0.0.1 = IPv4 loopback'",
      "AGENT: '::1 = IPv6 loopback'",
      "AGENT: 'localhost = resolves to either (check /etc/hosts)'",
      "AGENT: '0.0.0.0 = all interfaces (both IPv4 and IPv6)'",
      "Check hosts: cat /etc/hosts | grep localhost",
      "AGENT: '127.0.0.1 localhost'",
      "AGENT: '::1       localhost'",
      "AGENT: 'Both are configured ✓'",
      "Create network debugger: cat > ~/debug-localhost.sh << 'EOF'",
      "#!/bin/bash",
      "PORT=${1:-3000}",
      "echo \"=== Localhost Debugging (Port $PORT) ===\"",
      "echo ''",
      "echo '1. Checking if port is listening:'",
      "if sudo netstat -tlnp | grep \":$PORT\" >/dev/null; then",
      "  echo \"  ✓ Port $PORT is listening\"",
      "  sudo netstat -tlnp | grep \":$PORT\"",
      "else",
      "  echo \"  ✗ Port $PORT is NOT listening\"",
      "  exit 1",
      "fi",
      "echo ''",
      "echo '2. Testing IPv4 (127.0.0.1):'",
      "if curl -s http://127.0.0.1:$PORT >/dev/null; then",
      "  echo '  ✓ IPv4 accessible'",
      "else",
      "  echo '  ✗ IPv4 NOT accessible'",
      "fi",
      "echo ''",
      "echo '3. Testing IPv6 (::1):'",
      "if curl -s http://[::1]:$PORT >/dev/null; then",
      "  echo '  ✓ IPv6 accessible'",
      "else",
      "  echo '  ✗ IPv6 NOT accessible'",
      "fi",
      "echo ''",
      "echo '4. Testing localhost:'",
      "if curl -s http://localhost:$PORT >/dev/null; then",
      "  echo '  ✓ localhost accessible'",
      "else",
      "  echo '  ✗ localhost NOT accessible'",
      "fi",
      "echo ''",
      "echo '5. Firewall status:'",
      "if sudo ufw status 2>/dev/null | grep -q 'Status: active'; then",
      "  echo '  ⚠️ Firewall is active'",
      "  sudo ufw status | grep $PORT",
      "else",
      "  echo '  ✓ Firewall inactive or not installed'",
      "fi",
      "echo ''",
      "echo '6. Process using port:'",
      "sudo lsof -i :$PORT",
      "EOF",
      "chmod +x ~/debug-localhost.sh",
      "Create server starter: cat > ~/start-server.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Server Startup Helper ==='",
      "echo ''",
      "read -p 'Port [3000]: ' PORT",
      "PORT=${PORT:-3000}",
      "echo ''",
      "echo 'Binding options:'",
      "echo '1. localhost only (127.0.0.1) - most secure'",
      "echo '2. all interfaces (0.0.0.0) - accessible from network'",
      "echo '3. IPv6 only (::1)'",
      "read -p 'Choice [1]: ' BIND",
      "BIND=${BIND:-1}",
      "case $BIND in",
      "  1) HOST='127.0.0.1' ;;",
      "  2) HOST='0.0.0.0' ;;",
      "  3) HOST='::1' ;;",
      "esac",
      "echo ''",
      "echo \"Starting server on $HOST:$PORT...\"",
      "echo \"Access at: http://localhost:$PORT\"",
      "echo ''",
      "# Example with Python",
      "python3 -m http.server $PORT --bind $HOST",
      "EOF",
      "chmod +x ~/start-server.sh",
      "Create port checker: cat > ~/check-port.sh << 'EOF'",
      "#!/bin/bash",
      "PORT=$1",
      "if [ -z \"$PORT\" ]; then",
      "  echo 'Usage: ./check-port.sh <port>'",
      "  exit 1",
      "fi",
      "echo \"Checking port $PORT...\"",
      "echo ''",
      "if sudo lsof -i :$PORT >/dev/null 2>&1; then",
      "  echo \"✓ Port $PORT is in use:\"",
      "  sudo lsof -i :$PORT",
      "else",
      "  echo \"✓ Port $PORT is free\"",
      "fi",
      "echo ''",
      "echo 'Testing accessibility:'",
      "for addr in 127.0.0.1 '[::1]' localhost; do",
      "  printf \"  $addr: \"",
      "  if timeout 1 bash -c \"</dev/tcp/${addr}/$PORT\" 2>/dev/null; then",
      "    echo '✓ accessible'",
      "  else",
      "    echo '✗ not accessible'",
      "  fi",
      "done",
      "EOF",
      "chmod +x ~/check-port.sh",
      "AGENT: 'Localhost issue fixed! ✓'",
      "AGENT: 'Server now accessible on both IPv4 and IPv6 ✓'",
      "AGENT: 'Use ~/debug-localhost.sh to diagnose future issues ✓'"
    ],
    "commands": ["netstat", "curl", "lsof", "ss"],
    "packages": {"debian_ubuntu": ["net-tools", "curl"], "arch": ["net-tools", "curl"]},
    "related_commands": ["netstat", "ss", "lsof", "curl"],
    "complexity": "intermediate",
    "tags": ["localhost", "networking", "ports", "binding", "ipv4", "ipv6", "development", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_git_conflicts_broken_merge_001",
    "command": "git",
    "scenario": "Developer: Git merge failed, repo in broken state",
    "problem": "Merge conflicts causing repo instability",
    "solution": "Resolve conflicts and restore clean state",
    "steps": [
      "USER SAYS: 'Git merge went wrong! My code is broken and I can\\'t commit!'",
      "AGENT: 'Let me check your git status...'",
      "Check status: git status",
      "AGENT: 'On branch main'",
      "AGENT: 'You have unmerged paths.'",
      "AGENT: 'Unmerged paths:'",
      "AGENT: '  both modified:   src/app.js'",
      "AGENT: '  both modified:   package.json'",
      "AGENT: 'Still in merge state!'",
      "USER: 'I tried fixing but made it worse!'",
      "AGENT: 'Let me abort the merge first...'",
      "Abort merge: git merge --abort",
      "AGENT: 'Merge aborted ✓'",
      "AGENT: 'Repo restored to pre-merge state ✓'",
      "Check status: git status",
      "AGENT: 'On branch main, nothing to commit, working tree clean ✓'",
      "USER: 'But I need to merge feature branch!'",
      "AGENT: 'Let me try again with better strategy...'",
      "Check branches: git branch -a",
      "AGENT: '* main'",
      "AGENT: '  feature/new-api'",
      "Backup first: git branch backup-main",
      "AGENT: 'Created backup branch ✓'",
      "Try merge: git merge feature/new-api",
      "AGENT: 'Auto-merging src/app.js'",
      "AGENT: 'CONFLICT (content): Merge conflict in src/app.js'",
      "AGENT: 'Automatic merge failed'",
      "Check conflicts: git diff --name-only --diff-filter=U",
      "AGENT: 'src/app.js'",
      "AGENT: 'Only one file has conflicts'",
      "Show conflict: cat src/app.js",
      "AGENT: '<<<<<<< HEAD'",
      "AGENT: 'const port = 3000;'",
      "AGENT: '======='",
      "AGENT: 'const port = 8080;'",
      "AGENT: '>>>>>>> feature/new-api'",
      "AGENT: 'Simple conflict: different port numbers'",
      "USER: 'Which should I keep?'",
      "AGENT: 'For dev, keep 3000. Let me show you how to resolve...'",
      "Use ours: git checkout --ours src/app.js",
      "AGENT: 'Kept current branch version (port 3000) ✓'",
      "Alternative theirs: echo 'To use feature branch version: git checkout --theirs src/app.js'",
      "Mark resolved: git add src/app.js",
      "AGENT: 'Conflict marked as resolved ✓'",
      "Check status: git status",
      "AGENT: 'All conflicts fixed but you are still merging.'",
      "AGENT: 'Ready to commit ✓'",
      "Complete merge: git commit",
      "AGENT: 'Merge commit created ✓'",
      "Check log: git log --oneline --graph -5",
      "AGENT: '*   abc123 Merge feature/new-api into main'",
      "AGENT: '|\\\\  '",
      "AGENT: '| * def456 Update port to 8080'",
      "AGENT: '* | ghi789 Keep port 3000'",
      "AGENT: 'Merge successful! ✓'",
      "Create merge helper: cat > ~/git-merge-helper.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Git Merge Helper ==='",
      "echo ''",
      "if [ -n \"$(git status --porcelain)\" ]; then",
      "  echo '⚠️ Uncommitted changes detected'",
      "  echo ''",
      "  git status --short",
      "  echo ''",
      "  read -p 'Stash changes before merge? (y/n): ' STASH",
      "  if [ \"$STASH\" == 'y' ]; then",
      "    git stash",
      "    echo '✓ Changes stashed'",
      "  else",
      "    echo 'Commit or discard changes first'",
      "    exit 1",
      "  fi",
      "fi",
      "echo ''",
      "echo 'Available branches:'",
      "git branch -a",
      "echo ''",
      "read -p 'Branch to merge into current: ' BRANCH",
      "if [ -z \"$BRANCH\" ]; then exit; fi",
      "echo ''",
      "echo 'Creating backup...'",
      "CURRENT=$(git rev-parse --abbrev-ref HEAD)",
      "git branch backup-$CURRENT-$(date +%Y%m%d)",
      "echo \"✓ Backup: backup-$CURRENT-$(date +%Y%m%d)\"",
      "echo ''",
      "echo 'Attempting merge...'",
      "git merge $BRANCH",
      "if [ $? -ne 0 ]; then",
      "  echo ''",
      "  echo '⚠️ Merge conflicts detected!'",
      "  echo ''",
      "  echo 'Conflicted files:'",
      "  git diff --name-only --diff-filter=U",
      "  echo ''",
      "  echo 'Options:'",
      "  echo '1. Abort merge: git merge --abort'",
      "  echo '2. Use our version: git checkout --ours <file>'",
      "  echo '3. Use their version: git checkout --theirs <file>'",
      "  echo '4. Manually resolve conflicts in editor'",
      "  echo ''",
      "  read -p 'Abort merge? (y/n): ' ABORT",
      "  if [ \"$ABORT\" == 'y' ]; then",
      "    git merge --abort",
      "    echo '✓ Merge aborted'",
      "  fi",
      "else",
      "  echo '✓ Merge completed successfully'",
      "fi",
      "EOF",
      "chmod +x ~/git-merge-helper.sh",
      "Create conflict resolver: cat > ~/resolve-conflicts.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Git Conflict Resolver ==='",
      "echo ''",
      "if [ -z \"$(git diff --name-only --diff-filter=U)\" ]; then",
      "  echo '✓ No conflicts detected'",
      "  exit 0",
      "fi",
      "echo 'Conflicted files:'",
      "git diff --name-only --diff-filter=U",
      "echo ''",
      "for file in $(git diff --name-only --diff-filter=U); do",
      "  echo \"Resolving: $file\"",
      "  echo ''",
      "  echo '1. Keep ours (current branch)'",
      "  echo '2. Keep theirs (merging branch)'",
      "  echo '3. Manual edit'",
      "  echo '4. Skip'",
      "  read -p 'Choice: ' CHOICE",
      "  case $CHOICE in",
      "    1)",
      "      git checkout --ours \"$file\"",
      "      git add \"$file\"",
      "      echo \"✓ Kept ours: $file\"",
      "      ;;",
      "    2)",
      "      git checkout --theirs \"$file\"",
      "      git add \"$file\"",
      "      echo \"✓ Kept theirs: $file\"",
      "      ;;",
      "    3)",
      "      ${EDITOR:-nano} \"$file\"",
      "      echo 'Mark as resolved?'",
      "      read -p 'Resolved? (y/n): ' RESOLVED",
      "      if [ \"$RESOLVED\" == 'y' ]; then",
      "        git add \"$file\"",
      "        echo \"✓ Resolved: $file\"",
      "      fi",
      "      ;;",
      "    4)",
      "      echo \"Skipped: $file\"",
      "      ;;",
      "  esac",
      "  echo ''",
      "done",
      "REMAINING=$(git diff --name-only --diff-filter=U | wc -l)",
      "if [ \"$REMAINING\" -eq 0 ]; then",
      "  echo '✓ All conflicts resolved!'",
      "  echo ''",
      "  read -p 'Complete merge? (y/n): ' COMPLETE",
      "  if [ \"$COMPLETE\" == 'y' ]; then",
      "    git commit",
      "    echo '✓ Merge completed'",
      "  fi",
      "else",
      "  echo \"⚠️ $REMAINING conflicts remaining\"",
      "fi",
      "EOF",
      "chmod +x ~/resolve-conflicts.sh",
      "Create git rescue: cat > ~/git-rescue.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Git Rescue Tool ==='",
      "echo ''",
      "echo 'Current situation:'",
      "git status --short",
      "echo ''",
      "echo '1. Abort merge/rebase'",
      "echo '2. Reset to last commit (discard changes)'",
      "echo '3. Reset to specific commit'",
      "echo '4. Restore deleted file'",
      "echo '5. Undo last commit (keep changes)'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1)",
      "    git merge --abort 2>/dev/null || git rebase --abort 2>/dev/null",
      "    echo '✓ Operation aborted'",
      "    ;;",
      "  2)",
      "    read -p 'Discard ALL changes? (yes/no): ' CONFIRM",
      "    if [ \"$CONFIRM\" == 'yes' ]; then",
      "      git reset --hard HEAD",
      "      git clean -fd",
      "      echo '✓ Reset to last commit'",
      "    fi",
      "    ;;",
      "  3)",
      "    git log --oneline -10",
      "    read -p 'Commit hash: ' HASH",
      "    git reset --hard $HASH",
      "    echo \"✓ Reset to $HASH\"",
      "    ;;",
      "  4)",
      "    read -p 'File path: ' FILE",
      "    git checkout HEAD -- \"$FILE\"",
      "    echo \"✓ Restored: $FILE\"",
      "    ;;",
      "  5)",
      "    git reset --soft HEAD~1",
      "    echo '✓ Last commit undone (changes kept)'",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/git-rescue.sh",
      "AGENT: 'Merge conflicts resolved! ✓'",
      "AGENT: 'Repository in clean state ✓'",
      "AGENT: 'Use ~/git-merge-helper.sh for safer merges ✓'"
    ],
    "commands": ["git"],
    "packages": {"debian_ubuntu": ["git"], "arch": ["git"]},
    "related_commands": ["git", "git-merge", "git-rebase"],
    "complexity": "intermediate",
    "tags": ["git", "merge", "conflicts", "version-control", "development", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_system_time_wrong_001",
    "command": "timedatectl",
    "scenario": "Developer: TLS/SSL errors, certificates invalid",
    "problem": "System time wrong causing cert validation failures",
    "solution": "Fix system time and timezone configuration",
    "steps": [
      "USER SAYS: 'I can\\'t clone from GitHub! Says SSL certificate problem!'",
      "AGENT: 'Let me check the error...'",
      "Try clone: git clone https://github.com/user/repo.git",
      "AGENT: 'fatal: unable to access: SSL certificate problem: certificate is not yet valid'",
      "AGENT: '\"not yet valid\" suggests system time is wrong!'",
      "Check time: date",
      "AGENT: 'Mon Oct  7 09:30:15 UTC 2023'",
      "AGENT: 'System thinks it\\'s 2023! (Should be 2025)'",
      "AGENT: 'Certificate won\\'t be valid for 2 years!'",
      "Check detailed: timedatectl",
      "AGENT: 'Local time: Mon 2023-10-07 09:30:15 UTC'",
      "AGENT: 'System clock synchronized: no'",
      "AGENT: 'NTP service: inactive'",
      "AGENT: 'Time is not syncing!'",
      "Enable NTP: sudo timedatectl set-ntp true",
      "AGENT: 'NTP enabled ✓'",
      "Start sync: sudo systemctl start systemd-timesyncd",
      "AGENT: 'Time sync service started ✓'",
      "Wait for sync: sleep 5",
      "Check again: timedatectl",
      "AGENT: 'Local time: Mon 2025-10-07 09:30:25 UTC'",
      "AGENT: 'System clock synchronized: yes ✓'",
      "AGENT: 'NTP service: active ✓'",
      "AGENT: 'Time corrected to 2025! ✓'",
      "Test git: git clone https://github.com/torvalds/linux.git /tmp/test",
      "AGENT: 'Cloning into \\'/tmp/test\\'...'",
      "AGENT: 'Receiving objects: 100%'",
      "AGENT: '✓ Git works now!'",
      "USER: 'Wrong timezone though - showing UTC instead of my local time'",
      "AGENT: 'Let me set your timezone...'",
      "List timezones: timedatectl list-timezones | grep America",
      "AGENT: 'America/New_York'",
      "AGENT: 'America/Chicago'",
      "AGENT: 'America/Los_Angeles'",
      "USER: 'I\\'m in New York'",
      "Set timezone: sudo timedatectl set-timezone America/New_York",
      "AGENT: 'Timezone set to America/New_York ✓'",
      "Check time: date",
      "AGENT: 'Mon Oct  7 05:30:45 EDT 2025 ✓'",
      "AGENT: 'Showing correct local time now!'",
      "Enable sync: sudo systemctl enable systemd-timesyncd",
      "AGENT: 'Time sync will persist across reboots ✓'",
      "Create time checker: cat > ~/check-time.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== System Time Check ==='",
      "echo ''",
      "echo 'Current time:'",
      "date",
      "echo ''",
      "echo 'Detailed time info:'",
      "timedatectl",
      "echo ''",
      "echo 'NTP servers:'",
      "if command -v ntpq &>/dev/null; then",
      "  ntpq -p",
      "else",
      "  timedatectl show-timesync --all",
      "fi",
      "echo ''",
      "echo 'Hardware clock:'",
      "sudo hwclock --show",
      "echo ''",
      "if timedatectl | grep -q 'synchronized: no'; then",
      "  echo '⚠️ WARNING: Time not synchronized!'",
      "  echo 'Run: sudo timedatectl set-ntp true'",
      "else",
      "  echo '✓ Time is synchronized'",
      "fi",
      "EOF",
      "chmod +x ~/check-time.sh",
      "Create timezone setter: cat > ~/set-timezone.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Timezone Configuration ==='",
      "echo ''",
      "echo 'Current timezone:'",
      "timedatectl | grep 'Time zone'",
      "echo ''",
      "read -p 'Region (e.g., America, Europe, Asia): ' REGION",
      "if [ -n \"$REGION\" ]; then",
      "  echo ''",
      "  echo 'Available timezones:'",
      "  timedatectl list-timezones | grep \"^$REGION/\"",
      "  echo ''",
      "  read -p 'Full timezone (e.g., America/New_York): ' TZ",
      "  if [ -n \"$TZ\" ]; then",
      "    sudo timedatectl set-timezone $TZ",
      "    echo \"✓ Timezone set to $TZ\"",
      "    echo ''",
      "    echo 'New time:'",
      "    date",
      "  fi",
      "fi",
      "EOF",
      "chmod +x ~/set-timezone.sh",
      "Create time sync fixer: cat > ~/fix-time-sync.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Time Synchronization Fixer ==='",
      "echo ''",
      "echo 'Checking time sync status...'",
      "timedatectl status",
      "echo ''",
      "if timedatectl | grep -q 'NTP service: inactive'; then",
      "  echo 'NTP is inactive, enabling...'",
      "  sudo timedatectl set-ntp true",
      "  echo '✓ NTP enabled'",
      "fi",
      "echo ''",
      "echo 'Starting time sync service...'",
      "sudo systemctl restart systemd-timesyncd",
      "sudo systemctl enable systemd-timesyncd",
      "echo '✓ Service started'",
      "echo ''",
      "echo 'Waiting for synchronization...'",
      "sleep 5",
      "echo ''",
      "echo 'Checking status:'",
      "timedatectl timesync-status 2>/dev/null || timedatectl status",
      "echo ''",
      "if timedatectl | grep -q 'synchronized: yes'; then",
      "  echo '✓ Time synchronized successfully!'",
      "else",
      "  echo '⚠️ Time not synchronized yet'",
      "  echo 'Check internet connection and try again in 30 seconds'",
      "fi",
      "EOF",
      "chmod +x ~/fix-time-sync.sh",
      "AGENT: 'System time fixed! ✓'",
      "AGENT: 'SSL certificates now validate correctly ✓'",
      "AGENT: 'Git and HTTPS connections working ✓'",
      "AGENT: 'Use ~/check-time.sh to verify time anytime ✓'"
    ],
    "commands": ["timedatectl", "date", "hwclock"],
    "packages": {"debian_ubuntu": ["systemd-timesyncd"], "arch": ["systemd"]},
    "related_commands": ["timedatectl", "date", "ntpdate", "hwclock"],
    "complexity": "beginner",
    "tags": ["time", "timezone", "ntp", "ssl", "certificates", "troubleshooting", "real-world", "ai-agent"]
  }
]

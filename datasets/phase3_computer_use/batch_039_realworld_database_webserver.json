[
  {
    "id": "scenario_database_issues_001",
    "command": "multiple",
    "scenario": "User: Database won't start or is very slow",
    "problem": "MySQL/PostgreSQL connection issues, slow queries, crashes",
    "solution": "Diagnose database problems, optimize configuration, repair tables",
    "steps": [
      "USER SAYS: 'My database won't start! My website is down!'",
      "AGENT: 'Let me help fix the database. What database are you using?'",
      "USER: 'MySQL'",
      "AGENT: 'Checking MySQL status...'",
      "Check status: sudo systemctl status mysql",
      "AGENT: 'MySQL is inactive (dead). Let me check the error logs...'",
      "Check logs: sudo tail -50 /var/log/mysql/error.log",
      "AGENT: 'Error found: \"Can't start server: Bind on TCP/IP port: Address already in use\"'",
      "AGENT: 'Something else is using MySQL's port 3306.'",
      "Find port: sudo lsof -i :3306",
      "AGENT: 'Found old MySQL process (PID 1234) still running but zombied.'",
      "Kill process: sudo kill -9 1234",
      "Wait: sleep 2",
      "Start MySQL: sudo systemctl start mysql",
      "Check: sudo systemctl status mysql",
      "AGENT: 'MySQL started! But let me check if it's healthy...'",
      "Test connection: mysql -u root -p -e 'SELECT 1'",
      "AGENT: 'Connection works. ✓'",
      "Scenario: Slow queries",
      "USER: 'Database is working but super slow'",
      "AGENT: 'Let me analyze query performance...'",
      "Check slow queries: mysql -u root -p -e \"SHOW VARIABLES LIKE 'slow_query_log'\"",
      "If OFF: AGENT: 'Slow query log is disabled. Enabling it...'",
      "Enable: mysql -u root -p -e \"SET GLOBAL slow_query_log = 'ON'\"",
      "Set threshold: mysql -u root -p -e \"SET GLOBAL long_query_time = 2\"",
      "AGENT: 'Slow query logging enabled. Queries >2 seconds will be logged.'",
      "Check log: sudo tail -20 /var/log/mysql/mysql-slow.log",
      "AGENT: 'Found slow queries!'",
      "AGENT: '- SELECT * FROM users WHERE email LIKE \"%@%\": 15.3 seconds'",
      "AGENT: '- SELECT * FROM logs: 8.7 seconds'",
      "AGENT: 'These queries need indexes. Let me check...'",
      "Check indexes: mysql -u root -p -e \"USE mydb; SHOW INDEX FROM users\"",
      "AGENT: 'No index on email column! That's why it's slow.'",
      "Create index: mysql -u root -p -e \"USE mydb; CREATE INDEX idx_email ON users(email)\"",
      "AGENT: 'Index created. This query should be 100x faster now. ✓'",
      "Scenario: Corrupted tables",
      "USER: 'Getting \"table is marked as crashed\" errors'",
      "AGENT: 'Table corruption detected. Let me repair it...'",
      "Check tables: mysql -u root -p -e \"USE mydb; CHECK TABLE users\"",
      "AGENT: 'Table users: status = \"error\"'",
      "Repair: mysql -u root -p -e \"USE mydb; REPAIR TABLE users\"",
      "AGENT: 'Repairing table... this may take a few minutes...'",
      "Wait: sleep 5",
      "Check again: mysql -u root -p -e \"USE mydb; CHECK TABLE users\"",
      "AGENT: 'Table repaired successfully! ✓'",
      "Scenario: Out of disk space",
      "AGENT: 'Checking MySQL disk usage...'",
      "Check size: sudo du -sh /var/lib/mysql/*",
      "AGENT: 'Database sizes:'",
      "AGENT: '- mydb: 15GB'",
      "AGENT: '- logs database: 38GB (!)'",
      "AGENT: '- test database: 2GB'",
      "AGENT: 'logs database is huge! Let me check what's in it...'",
      "Check tables: mysql -u root -p -e \"USE logs; SHOW TABLE STATUS\"",
      "AGENT: 'access_logs table: 35GB'",
      "USER: 'Can I delete old logs?'",
      "AGENT: 'Yes! Let me clean logs older than 30 days...'",
      "Delete old: mysql -u root -p -e \"USE logs; DELETE FROM access_logs WHERE created_at < DATE_SUB(NOW(), INTERVAL 30 DAY)\"",
      "Optimize: mysql -u root -p -e \"USE logs; OPTIMIZE TABLE access_logs\"",
      "AGENT: 'Deleted old logs and optimized table. Freed 30GB! ✓'",
      "Create database toolkit: AGENT: 'Creating database management toolkit...'",
      "Create checker: cat > ~/check-database.sh << 'EOF'",
      "#!/bin/bash",
      "DB_TYPE=\"${1:-mysql}\"",
      "echo \"=== Database Health Check: $DB_TYPE ===\"",
      "echo ''",
      "if [ \"$DB_TYPE\" = 'mysql' ]; then",
      "  echo '1. Service Status:'",
      "  systemctl is-active mysql",
      "  echo ''",
      "  echo '2. Uptime:'",
      "  mysql -u root -p -e 'SHOW STATUS LIKE \"Uptime\"' 2>/dev/null",
      "  echo ''",
      "  echo '3. Connections:'",
      "  mysql -u root -p -e 'SHOW STATUS LIKE \"Threads_connected\"' 2>/dev/null",
      "  echo ''",
      "  echo '4. Slow queries:'",
      "  mysql -u root -p -e 'SHOW STATUS LIKE \"Slow_queries\"' 2>/dev/null",
      "  echo ''",
      "  echo '5. Disk usage:'",
      "  sudo du -sh /var/lib/mysql",
      "  echo ''",
      "  echo '6. Error log:'",
      "  sudo tail -5 /var/log/mysql/error.log",
      "elif [ \"$DB_TYPE\" = 'postgresql' ]; then",
      "  echo '1. Service Status:'",
      "  systemctl is-active postgresql",
      "  echo ''",
      "  echo '2. Connections:'",
      "  sudo -u postgres psql -c 'SELECT count(*) FROM pg_stat_activity'",
      "  echo ''",
      "  echo '3. Database sizes:'",
      "  sudo -u postgres psql -c '\\l+'",
      "  echo ''",
      "  echo '4. Disk usage:'",
      "  sudo du -sh /var/lib/postgresql",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/check-database.sh",
      "Create optimizer: cat > ~/optimize-database.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Database Optimizer ==='",
      "echo ''",
      "read -p 'Database type (mysql/postgresql): ' DB_TYPE",
      "read -p 'Database name: ' DB_NAME",
      "echo ''",
      "if [ \"$DB_TYPE\" = 'mysql' ]; then",
      "  echo '1. Analyzing tables...'",
      "  mysql -u root -p -e \"USE $DB_NAME; ANALYZE TABLE $(mysql -u root -p -Nse \\\"SHOW TABLES FROM $DB_NAME\\\" | tr '\\n' ',')\"",
      "  echo ''",
      "  echo '2. Optimizing tables...'",
      "  mysql -u root -p -e \"USE $DB_NAME; OPTIMIZE TABLE $(mysql -u root -p -Nse \\\"SHOW TABLES FROM $DB_NAME\\\" | tr '\\n' ',')\"",
      "  echo ''",
      "  echo '3. Flushing query cache...'",
      "  mysql -u root -p -e 'FLUSH QUERY CACHE'",
      "  echo ''",
      "  echo '✓ MySQL optimization complete'",
      "elif [ \"$DB_TYPE\" = 'postgresql' ]; then",
      "  echo '1. Vacuuming database...'",
      "  sudo -u postgres psql -d $DB_NAME -c 'VACUUM ANALYZE'",
      "  echo ''",
      "  echo '2. Reindexing...'",
      "  sudo -u postgres psql -d $DB_NAME -c 'REINDEX DATABASE $DB_NAME'",
      "  echo ''",
      "  echo '✓ PostgreSQL optimization complete'",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/optimize-database.sh",
      "Create backup script: cat > ~/backup-database.sh << 'EOF'",
      "#!/bin/bash",
      "BACKUP_DIR=~/db-backups",
      "mkdir -p $BACKUP_DIR",
      "TIMESTAMP=$(date +%Y%m%d-%H%M%S)",
      "echo '=== Database Backup ==='",
      "echo ''",
      "read -p 'Database type (mysql/postgresql): ' DB_TYPE",
      "read -p 'Database name: ' DB_NAME",
      "echo ''",
      "if [ \"$DB_TYPE\" = 'mysql' ]; then",
      "  BACKUP_FILE=\"$BACKUP_DIR/${DB_NAME}-${TIMESTAMP}.sql.gz\"",
      "  echo \"Backing up to: $BACKUP_FILE\"",
      "  mysqldump -u root -p $DB_NAME | gzip > $BACKUP_FILE",
      "  echo \"✓ Backup complete: $(du -h $BACKUP_FILE | cut -f1)\"",
      "elif [ \"$DB_TYPE\" = 'postgresql' ]; then",
      "  BACKUP_FILE=\"$BACKUP_DIR/${DB_NAME}-${TIMESTAMP}.sql.gz\"",
      "  echo \"Backing up to: $BACKUP_FILE\"",
      "  sudo -u postgres pg_dump $DB_NAME | gzip > $BACKUP_FILE",
      "  echo \"✓ Backup complete: $(du -h $BACKUP_FILE | cut -f1)\"",
      "fi",
      "echo ''",
      "echo 'Keeping last 7 backups...'",
      "find $BACKUP_DIR -name '*.sql.gz' -mtime +7 -delete",
      "echo ''",
      "ls -lh $BACKUP_DIR | tail -7",
      "EOF",
      "Make executable: chmod +x ~/backup-database.sh",
      "Create query analyzer: cat > ~/analyze-queries.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== MySQL Query Analyzer ==='",
      "echo ''",
      "echo '1. Current queries:'",
      "mysql -u root -p -e 'SHOW PROCESSLIST'",
      "echo ''",
      "echo '2. Long-running queries (>10s):'",
      "mysql -u root -p -e \"SELECT * FROM information_schema.processlist WHERE command != 'Sleep' AND time > 10 ORDER BY time DESC\"",
      "echo ''",
      "echo '3. Slow query log (last 10):'",
      "sudo tail -50 /var/log/mysql/mysql-slow.log | grep -A 5 'Query_time'",
      "echo ''",
      "echo '4. Table locks:'",
      "mysql -u root -p -e 'SHOW OPEN TABLES WHERE In_use > 0'",
      "EOF",
      "Make executable: chmod +x ~/analyze-queries.sh",
      "Add database aliases: cat >> ~/.bashrc << 'EOF'",
      "# Database aliases",
      "alias db-check='~/check-database.sh'",
      "alias db-optimize='~/optimize-database.sh'",
      "alias db-backup='~/backup-database.sh'",
      "alias db-queries='~/analyze-queries.sh'",
      "alias db-mysql='mysql -u root -p'",
      "alias db-psql='sudo -u postgres psql'",
      "EOF",
      "Source: source ~/.bashrc",
      "Setup automatic backups: AGENT: 'Want automatic daily backups?'",
      "USER: 'Yes'",
      "Schedule: (crontab -l 2>/dev/null; echo '0 2 * * * ~/backup-database.sh mydb mysql >> ~/db-backup.log 2>&1') | crontab -",
      "AGENT: 'Daily backups scheduled for 2 AM. ✓'",
      "Configuration tuning: AGENT: 'Optimizing MySQL configuration...'",
      "Backup config: sudo cp /etc/mysql/mysql.conf.d/mysqld.cnf /etc/mysql/mysql.conf.d/mysqld.cnf.backup",
      "Add settings: cat | sudo tee -a /etc/mysql/mysql.conf.d/mysqld.cnf << 'EOF'",
      "# Performance optimizations",
      "innodb_buffer_pool_size = 2G",
      "innodb_log_file_size = 512M",
      "max_connections = 200",
      "query_cache_size = 64M",
      "slow_query_log = 1",
      "slow_query_log_file = /var/log/mysql/mysql-slow.log",
      "long_query_time = 2",
      "EOF",
      "Restart: sudo systemctl restart mysql",
      "AGENT: 'MySQL configuration optimized. ✓'",
      "Final summary: AGENT: 'Database issues fixed! Summary:'",
      "AGENT: ''",
      "AGENT: 'Problems resolved:'",
      "AGENT: '✓ Killed zombied MySQL process'",
      "AGENT: '✓ Created missing indexes (100x faster)'",
      "AGENT: '✓ Repaired corrupted tables'",
      "AGENT: '✓ Cleaned 30GB of old logs'",
      "AGENT: '✓ Optimized all tables'",
      "AGENT: ''",
      "AGENT: 'Configuration improvements:'",
      "AGENT: '✓ Enabled slow query logging'",
      "AGENT: '✓ Increased buffer pool to 2GB'",
      "AGENT: '✓ Optimized log file size'",
      "AGENT: '✓ Increased max connections'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '- ~/check-database.sh (health check)'",
      "AGENT: '- ~/optimize-database.sh (optimize tables)'",
      "AGENT: '- ~/backup-database.sh (backup)'",
      "AGENT: '- ~/analyze-queries.sh (query analysis)'",
      "AGENT: ''",
      "AGENT: 'Commands:'",
      "AGENT: '- db-check (check health)'",
      "AGENT: '- db-optimize (optimize)'",
      "AGENT: '- db-backup (manual backup)'",
      "AGENT: '- db-queries (analyze queries)'",
      "AGENT: ''",
      "AGENT: 'Backups:'",
      "AGENT: '- Automated: Daily at 2 AM'",
      "AGENT: '- Location: ~/db-backups/'",
      "AGENT: '- Retention: 7 days'",
      "AGENT: ''",
      "AGENT: 'Your database is healthy and optimized! ✓'"
    ],
    "commands": ["systemctl", "mysql", "mysqldump", "psql", "pg_dump", "lsof", "kill", "tail", "du", "find", "cat", "chmod", "crontab", "source", "gzip", "sleep"],
    "packages": {
      "debian_ubuntu": ["mysql-server", "postgresql", "gzip"],
      "arch": ["mariadb", "postgresql", "gzip"]
    },
    "related_commands": ["mysql", "mysqldump", "psql", "pg_dump", "systemctl"],
    "complexity": "intermediate",
    "tags": ["database", "mysql", "postgresql", "sql", "backup", "optimization", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_webserver_config_001",
    "command": "multiple",
    "scenario": "User: Help me configure web server (Nginx/Apache)",
    "problem": "Web server not serving site, SSL issues, permissions errors",
    "solution": "Configure web server, setup SSL, fix permissions, optimize",
    "steps": [
      "USER SAYS: 'I want to host a website but don't know how to configure Nginx.'",
      "AGENT: 'I'll help you set up Nginx from scratch. What's your domain name?'",
      "USER: 'example.com'",
      "AGENT: 'Perfect! Setting up Nginx for example.com...'",
      "Step 1: Install Nginx",
      "AGENT: 'Step 1: Installing Nginx...'",
      "Install: sudo apt install nginx || sudo pacman -S nginx",
      "Start: sudo systemctl start nginx",
      "Enable: sudo systemctl enable nginx",
      "AGENT: 'Nginx installed and running. ✓'",
      "Test: curl -I localhost",
      "AGENT: 'Nginx responding with 200 OK. ✓'",
      "Step 2: Create site directory",
      "AGENT: 'Step 2: Creating website directory...'",
      "Create dir: sudo mkdir -p /var/www/example.com/html",
      "Set ownership: sudo chown -R $USER:$USER /var/www/example.com/html",
      "Set permissions: sudo chmod -R 755 /var/www/example.com",
      "AGENT: 'Website directory created. ✓'",
      "Create test page: cat > /var/www/example.com/html/index.html << 'EOF'",
      "<!DOCTYPE html>",
      "<html>",
      "<head><title>Welcome to example.com!</title></head>",
      "<body>",
      "  <h1>Success! Your website is live.</h1>",
      "  <p>Nginx server is working correctly.</p>",
      "</body>",
      "</html>",
      "EOF",
      "AGENT: 'Test page created. ✓'",
      "Step 3: Configure server block",
      "AGENT: 'Step 3: Creating Nginx server block configuration...'",
      "Create config: cat | sudo tee /etc/nginx/sites-available/example.com << 'EOF'",
      "server {",
      "    listen 80;",
      "    listen [::]:80;",
      "    ",
      "    root /var/www/example.com/html;",
      "    index index.html index.htm;",
      "    ",
      "    server_name example.com www.example.com;",
      "    ",
      "    location / {",
      "        try_files $uri $uri/ =404;",
      "    }",
      "    ",
      "    # Logging",
      "    access_log /var/log/nginx/example.com.access.log;",
      "    error_log /var/log/nginx/example.com.error.log;",
      "}",
      "EOF",
      "AGENT: 'Server block created. ✓'",
      "Step 4: Enable site",
      "AGENT: 'Step 4: Enabling site...'",
      "Create symlink: sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/",
      "Test config: sudo nginx -t",
      "If OK: AGENT: 'Configuration syntax is valid. ✓'",
      "Reload: sudo systemctl reload nginx",
      "AGENT: 'Site enabled and live! ✓'",
      "Test site: curl -H 'Host: example.com' http://localhost",
      "AGENT: 'Website is serving correctly! ✓'",
      "Step 5: SSL setup with Let's Encrypt",
      "USER: 'Can you add HTTPS?'",
      "AGENT: 'Yes! Setting up free SSL with Let's Encrypt...'",
      "Install certbot: sudo apt install certbot python3-certbot-nginx || sudo pacman -S certbot certbot-nginx",
      "AGENT: 'Certbot installed. ✓'",
      "Get certificate: sudo certbot --nginx -d example.com -d www.example.com",
      "AGENT: 'Let's Encrypt will now:'",
      "AGENT: '1. Verify domain ownership'",
      "AGENT: '2. Generate SSL certificate'",
      "AGENT: '3. Auto-configure Nginx'",
      "AGENT: '4. Setup auto-renewal'",
      "After success: AGENT: 'SSL certificate installed! ✓'",
      "Check cert: sudo certbot certificates",
      "AGENT: 'Certificate valid until: (90 days from now)'",
      "Test HTTPS: curl -I https://example.com",
      "AGENT: 'HTTPS working! 🔒 ✓'",
      "Step 6: Firewall configuration",
      "AGENT: 'Step 6: Configuring firewall...'",
      "Check ufw: sudo ufw status",
      "Allow HTTP: sudo ufw allow 'Nginx HTTP'",
      "Allow HTTPS: sudo ufw allow 'Nginx HTTPS'",
      "Or ports: sudo ufw allow 80/tcp && sudo ufw allow 443/tcp",
      "AGENT: 'Firewall configured for web traffic. ✓'",
      "Scenario: Reverse proxy setup",
      "USER: 'I also have a Node.js app on port 3000. Can Nginx forward to it?'",
      "AGENT: 'Yes! Setting up reverse proxy...'",
      "Edit config: sudo vim /etc/nginx/sites-available/example.com",
      "Add location: cat | sudo tee -a /etc/nginx/sites-available/example.com << 'EOF'",
      "    ",
      "    # Reverse proxy for Node.js app",
      "    location /api/ {",
      "        proxy_pass http://localhost:3000/;",
      "        proxy_http_version 1.1;",
      "        proxy_set_header Upgrade $http_upgrade;",
      "        proxy_set_header Connection 'upgrade';",
      "        proxy_set_header Host $host;",
      "        proxy_cache_bypass $http_upgrade;",
      "        proxy_set_header X-Real-IP $remote_addr;",
      "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
      "    }",
      "EOF",
      "Test: sudo nginx -t",
      "Reload: sudo systemctl reload nginx",
      "AGENT: 'Reverse proxy configured! Requests to /api/ go to your Node app. ✓'",
      "Scenario: Performance optimization",
      "AGENT: 'Optimizing Nginx performance...'",
      "Edit main config: sudo vim /etc/nginx/nginx.conf",
      "Add optimizations: cat | sudo tee -a /etc/nginx/nginx.conf << 'EOF'",
      "    # Performance optimizations",
      "    gzip on;",
      "    gzip_vary on;",
      "    gzip_types text/plain text/css application/json application/javascript text/xml;",
      "    ",
      "    # Caching",
      "    open_file_cache max=1000 inactive=20s;",
      "    open_file_cache_valid 30s;",
      "    ",
      "    # Connection tuning",
      "    keepalive_timeout 65;",
      "    keepalive_requests 100;",
      "EOF",
      "Test: sudo nginx -t",
      "Reload: sudo systemctl reload nginx",
      "AGENT: 'Performance optimizations applied. ✓'",
      "Create Nginx toolkit: AGENT: 'Creating Nginx management toolkit...'",
      "Create checker: cat > ~/nginx-check.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Nginx Health Check ==='",
      "echo ''",
      "echo '1. Service Status:'",
      "systemctl is-active nginx",
      "echo ''",
      "echo '2. Configuration Test:'",
      "sudo nginx -t 2>&1",
      "echo ''",
      "echo '3. Active Connections:'",
      "curl -s http://localhost/nginx_status 2>/dev/null || echo 'Status module not enabled'",
      "echo ''",
      "echo '4. Error Log (last 5):'",
      "sudo tail -5 /var/log/nginx/error.log",
      "echo ''",
      "echo '5. Sites Enabled:'",
      "ls /etc/nginx/sites-enabled/",
      "echo ''",
      "echo '6. Listening Ports:'",
      "sudo ss -tulpn | grep nginx",
      "EOF",
      "Make executable: chmod +x ~/nginx-check.sh",
      "Create site creator: cat > ~/nginx-create-site.sh << 'EOF'",
      "#!/bin/bash",
      "read -p 'Domain name: ' DOMAIN",
      "read -p 'Root directory [/var/www/$DOMAIN/html]: ' ROOT",
      "ROOT=${ROOT:-/var/www/$DOMAIN/html}",
      "echo ''",
      "echo \"Creating site: $DOMAIN\"",
      "echo \"Root: $ROOT\"",
      "echo ''",
      "sudo mkdir -p $ROOT",
      "sudo chown -R $USER:$USER $ROOT",
      "sudo chmod -R 755 $(dirname $ROOT)",
      "cat > $ROOT/index.html << 'EOHTML'",
      "<!DOCTYPE html>",
      "<html><head><title>Welcome</title></head>",
      "<body><h1>Site is live!</h1></body></html>",
      "EOHTML",
      "cat | sudo tee /etc/nginx/sites-available/$DOMAIN << EOCONF",
      "server {",
      "    listen 80;",
      "    root $ROOT;",
      "    index index.html;",
      "    server_name $DOMAIN www.$DOMAIN;",
      "    location / { try_files \\$uri \\$uri/ =404; }",
      "}",
      "EOCONF",
      "sudo ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/",
      "sudo nginx -t && sudo systemctl reload nginx",
      "echo ''",
      "echo '✓ Site created and enabled!'",
      "EOF",
      "Make executable: chmod +x ~/nginx-create-site.sh",
      "Add aliases: cat >> ~/.bashrc << 'EOF'",
      "# Nginx aliases",
      "alias nginx-check='~/nginx-check.sh'",
      "alias nginx-reload='sudo systemctl reload nginx'",
      "alias nginx-restart='sudo systemctl restart nginx'",
      "alias nginx-test='sudo nginx -t'",
      "alias nginx-logs='sudo tail -f /var/log/nginx/error.log'",
      "alias nginx-sites='ls /etc/nginx/sites-enabled/'",
      "EOF",
      "Source: source ~/.bashrc",
      "Final summary: AGENT: 'Web server setup complete! Summary:'",
      "AGENT: ''",
      "AGENT: '✓ Nginx installed and running'",
      "AGENT: '✓ Site configured: example.com'",
      "AGENT: '✓ SSL certificate installed (HTTPS) 🔒'",
      "AGENT: '✓ Firewall configured'",
      "AGENT: '✓ Reverse proxy to Node.js app'",
      "AGENT: '✓ Performance optimizations applied'",
      "AGENT: ''",
      "AGENT: 'Your website:'",
      "AGENT: '- HTTP: http://example.com'",
      "AGENT: '- HTTPS: https://example.com 🔒'",
      "AGENT: '- API: https://example.com/api/ → localhost:3000'",
      "AGENT: ''",
      "AGENT: 'Files:'",
      "AGENT: '- Website: /var/www/example.com/html/'",
      "AGENT: '- Config: /etc/nginx/sites-available/example.com'",
      "AGENT: '- Logs: /var/log/nginx/example.com.*'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '- ~/nginx-check.sh (health check)'",
      "AGENT: '- ~/nginx-create-site.sh (new site wizard)'",
      "AGENT: ''",
      "AGENT: 'Commands:'",
      "AGENT: '- nginx-check (check status)'",
      "AGENT: '- nginx-test (test config)'",
      "AGENT: '- nginx-reload (reload config)'",
      "AGENT: '- nginx-logs (watch errors)'",
      "AGENT: ''",
      "AGENT: 'SSL renewal:'",
      "AGENT: '- Auto-renews before expiry'",
      "AGENT: '- Manual: sudo certbot renew'",
      "AGENT: ''",
      "AGENT: 'Your website is live and secure! ✓'"
    ],
    "commands": ["apt", "pacman", "systemctl", "nginx", "certbot", "curl", "mkdir", "chown", "chmod", "ln", "ufw", "ss", "cat", "vim", "tail", "source"],
    "packages": {
      "debian_ubuntu": ["nginx", "certbot", "python3-certbot-nginx"],
      "arch": ["nginx", "certbot", "certbot-nginx"]
    },
    "related_commands": ["nginx", "certbot", "systemctl", "ufw", "curl"],
    "complexity": "intermediate",
    "tags": ["webserver", "nginx", "apache", "ssl", "https", "reverse-proxy", "configuration", "real-world", "ai-agent"]
  }
]

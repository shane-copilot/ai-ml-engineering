[
  {
    "id": "scenario_regex_text_patterns_138",
    "command": "grep",
    "scenario": "Master regular expressions for powerful text pattern matching and searching.",
    "problem": "Need to search for complex patterns in text, validate email/phone formats, extract data matching patterns, find lines with specific structures, perform advanced text filtering, and understand regex syntax for grep, sed, and awk.",
    "solution": "Learn regular expression syntax, use grep with -E for extended regex, understand character classes, quantifiers, anchors, groups, and backreferences for powerful pattern matching in text processing.",
    "steps": [
      "USER SAYS: 'How do I search for complex patterns like emails, phone numbers, or specific formats in text files? Wildcards aren't enough!'",
      "AGENT: 'You need regular expressions (regex)! Let me show you pattern matching with grep, character classes, quantifiers, and advanced regex techniques.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: Regular expressions...'",
      "AGENT: '[Searching] \"regex regular expressions grep pattern matching\"'",
      "AGENT: '[Found] Regex provides powerful pattern matching beyond simple wildcards.'",
      "AGENT: '[Found] grep -E for extended regex, -P for Perl regex.'",
      "AGENT: '[Found] Character classes [a-z], quantifiers *, +, ?, {n}.'",
      "AGENT: '[Found] Anchors ^ (start), $ (end), \\b (word boundary).'",
      "AGENT: '✓ Research complete! Let's master regex.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Basic Regex Patterns ---'",
      "Create tool: `cat > sample.txt << 'EOF'`",
      "My email is user@example.com\nContact: alice@test.org\nPhone: 555-1234\nPhone: (555) 123-4567\nWebsite: https://example.com\nDate: 2025-10-08\nIP: 192.168.1.1\nEOF",
      "AGENT: ''",
      "Run command: `grep 'example' sample.txt`",
      "AGENT: 'My email is user@example.com'",
      "AGENT: 'Website: https://example.com'",
      "AGENT: 'Literal string match'",
      "AGENT: ''",
      "Run command: `grep 'example.com' sample.txt`",
      "AGENT: 'My email is user@example.com'",
      "AGENT: 'Website: https://example.com'",
      "AGENT: '. matches any character (but usually we want literal dot!)'",
      "AGENT: ''",
      "Run command: `grep 'example\\.com' sample.txt`",
      "AGENT: 'My email is user@example.com'",
      "AGENT: 'Website: https://example.com'",
      "AGENT: '\\. matches literal dot'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Character Classes ---'",
      "Run command: `grep '[0-9]' sample.txt`",
      "AGENT: 'Phone: 555-1234'",
      "AGENT: 'Phone: (555) 123-4567'",
      "AGENT: 'Date: 2025-10-08'",
      "AGENT: 'IP: 192.168.1.1'",
      "AGENT: 'Matches any digit'",
      "AGENT: ''",
      "Run command: `grep '[a-z]' sample.txt`",
      "AGENT: 'Matches lines with lowercase letters'",
      "AGENT: ''",
      "Run command: `grep '[A-Za-z]' sample.txt`",
      "AGENT: 'Matches any letter (upper or lowercase)'",
      "AGENT: ''",
      "Run command: `grep '[^0-9]' sample.txt`",
      "AGENT: 'Matches lines with NON-digits'",
      "AGENT: '^ inside [ ] means NOT'",
      "AGENT: ''",
      "AGENT: 'Predefined character classes:'",
      "AGENT: '  [[:digit:]]  = [0-9]'",
      "AGENT: '  [[:alpha:]]  = [A-Za-z]'",
      "AGENT: '  [[:alnum:]]  = [A-Za-z0-9]'",
      "AGENT: '  [[:space:]]  = whitespace'",
      "AGENT: '  [[:punct:]]  = punctuation'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Quantifiers ---'",
      "Run command: `grep -E '[0-9]+' sample.txt`",
      "AGENT: '  -E = Extended regex'",
      "AGENT: '  + = One or more'",
      "AGENT: 'Matches lines with one or more digits'",
      "AGENT: ''",
      "Run command: `grep -E '[0-9]{3}' sample.txt`",
      "AGENT: 'Phone: 555-1234'",
      "AGENT: 'Phone: (555) 123-4567'",
      "AGENT: 'IP: 192.168.1.1'",
      "AGENT: '{3} = Exactly 3 digits'",
      "AGENT: ''",
      "Run command: `grep -E '[0-9]{2,4}' sample.txt`",
      "AGENT: '{2,4} = Between 2 and 4 digits'",
      "AGENT: ''",
      "AGENT: 'Quantifier summary:'",
      "AGENT: '  *     = Zero or more'",
      "AGENT: '  +     = One or more'",
      "AGENT: '  ?     = Zero or one (optional)'",
      "AGENT: '  {n}   = Exactly n'",
      "AGENT: '  {n,}  = n or more'",
      "AGENT: '  {n,m} = Between n and m'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Anchors ---'",
      "Run command: `grep '^Phone' sample.txt`",
      "AGENT: 'Phone: 555-1234'",
      "AGENT: 'Phone: (555) 123-4567'",
      "AGENT: '^ = Start of line'",
      "AGENT: ''",
      "Run command: `grep 'com$' sample.txt`",
      "AGENT: 'My email is user@example.com'",
      "AGENT: 'Website: https://example.com'",
      "AGENT: '$ = End of line'",
      "AGENT: ''",
      "Run command: `grep -E '^[0-9]' sample.txt`",
      "AGENT: 'Lines starting with digit (none in our sample)'",
      "AGENT: ''",
      "Run command: `grep -E '\\bPhone\\b' sample.txt`",
      "AGENT: 'Phone: 555-1234'",
      "AGENT: 'Phone: (555) 123-4567'",
      "AGENT: '\\b = Word boundary'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Email Pattern ---'",
      "Run command: `grep -E '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}' sample.txt`",
      "AGENT: 'My email is user@example.com'",
      "AGENT: 'Contact: alice@test.org'",
      "AGENT: ''",
      "AGENT: 'Pattern breakdown:'",
      "AGENT: '  [a-zA-Z0-9._%+-]+  = Username part'",
      "AGENT: '  @                  = Literal @'",
      "AGENT: '  [a-zA-Z0-9.-]+     = Domain part'",
      "AGENT: '  \\.                 = Literal dot'",
      "AGENT: '  [a-zA-Z]{2,}       = TLD (2+ letters)'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Phone Number Patterns ---'",
      "Run command: `grep -E '[0-9]{3}-[0-9]{4}' sample.txt`",
      "AGENT: 'Phone: 555-1234'",
      "AGENT: 'Pattern: ###-####'",
      "AGENT: ''",
      "Run command: `grep -E '\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}' sample.txt`",
      "AGENT: 'Phone: (555) 123-4567'",
      "AGENT: 'Pattern: (###) ###-####'",
      "AGENT: '\\( \\) = Escaped parentheses'",
      "AGENT: ''",
      "Run command: `grep -E '(\\([0-9]{3}\\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}' sample.txt`",
      "AGENT: 'Phone: 555-1234'",
      "AGENT: 'Phone: (555) 123-4567'",
      "AGENT: 'Matches both formats!'",
      "AGENT: '( | ) = Group with alternation (OR)'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: IP Address Pattern ---'",
      "Run command: `grep -E '([0-9]{1,3}\\.){3}[0-9]{1,3}' sample.txt`",
      "AGENT: 'IP: 192.168.1.1'",
      "AGENT: ''",
      "AGENT: 'Pattern breakdown:'",
      "AGENT: '  [0-9]{1,3}       = 1-3 digits'",
      "AGENT: '  \\.               = Literal dot'",
      "AGENT: '  {3}              = Repeat 3 times'",
      "AGENT: '  [0-9]{1,3}       = Final octet'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: URL Pattern ---'",
      "Run command: `grep -E 'https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}' sample.txt`",
      "AGENT: 'Website: https://example.com'",
      "AGENT: ''",
      "AGENT: 'Pattern breakdown:'",
      "AGENT: '  https?          = http or https (s is optional)'",
      "AGENT: '  ://             = Literal ://'",
      "AGENT: '  [a-zA-Z0-9.-]+  = Domain'",
      "AGENT: '  \\.[a-zA-Z]{2,}  = TLD'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Date Pattern ---'",
      "Run command: `grep -E '[0-9]{4}-[0-9]{2}-[0-9]{2}' sample.txt`",
      "AGENT: 'Date: 2025-10-08'",
      "AGENT: 'Pattern: YYYY-MM-DD'",
      "AGENT: ''",
      "Run command: `grep -E '[0-9]{2}/[0-9]{2}/[0-9]{4}' sample.txt`",
      "AGENT: 'Pattern: MM/DD/YYYY'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Advanced Regex Techniques ---'",
      "AGENT: ''",
      "AGENT: 'Alternation (OR):'",
      "Run command: `grep -E '(cat|dog|bird)' sample.txt`",
      "AGENT: 'Matches cat OR dog OR bird'",
      "AGENT: ''",
      "AGENT: 'Groups and backreferences:'",
      "Run command: `echo \"hello hello\" | grep -E '(\\w+) \\1'`",
      "AGENT: 'hello hello'",
      "AGENT: '\\1 refers back to first group (repeated word)'",
      "AGENT: ''",
      "AGENT: 'Lookahead (Perl regex):'",
      "Run command: `grep -P '\\w+(?=@)' sample.txt`",
      "AGENT: '  -P = Perl regex'",
      "AGENT: '  (?=@) = Positive lookahead'",
      "AGENT: 'Matches word before @'",
      "AGENT: ''",
      "AGENT: 'Case-insensitive:'",
      "Run command: `grep -Ei 'PHONE' sample.txt`",
      "AGENT: '  -i = Case-insensitive'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Practical Regex Examples ---'",
      "Create tool: `cat > regex-examples.sh << 'EOF'`",
      "#!/bin/bash\n\necho \"=== Common Regex Patterns ===\"\necho \"\"\n\n# Email validation\nEMAIL_REGEX='^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\necho \"Testing: user@example.com\"\nif [[ \"user@example.com\" =~ $EMAIL_REGEX ]]; then\n    echo \"✓ Valid email\"\nfi\necho \"\"\n\n# Phone number (US format)\nPHONE_REGEX='^\\(?[0-9]{3}\\)?[-. ]?[0-9]{3}[-. ]?[0-9]{4}$'\necho \"Testing: (555) 123-4567\"\nif [[ \"(555) 123-4567\" =~ $PHONE_REGEX ]]; then\n    echo \"✓ Valid phone\"\nfi\necho \"\"\n\n# IPv4 address\nIP_REGEX='^([0-9]{1,3}\\.){3}[0-9]{1,3}$'\necho \"Testing: 192.168.1.1\"\nif [[ \"192.168.1.1\" =~ $IP_REGEX ]]; then\n    echo \"✓ Valid IP\"\nfi\necho \"\"\n\n# Credit card (basic)\nCC_REGEX='^[0-9]{4}[- ]?[0-9]{4}[- ]?[0-9]{4}[- ]?[0-9]{4}$'\necho \"Testing: 1234-5678-9012-3456\"\nif [[ \"1234-5678-9012-3456\" =~ $CC_REGEX ]]; then\n    echo \"✓ Valid credit card format\"\nfi\necho \"\"\n\n# URL\nURL_REGEX='^https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(/.*)?$'\necho \"Testing: https://example.com/path\"\nif [[ \"https://example.com/path\" =~ $URL_REGEX ]]; then\n    echo \"✓ Valid URL\"\nfi\nEOF",
      "Run command: `chmod +x regex-examples.sh`",
      "Run command: `./regex-examples.sh`",
      "AGENT: '=== Common Regex Patterns ==='",
      "AGENT: ''",
      "AGENT: 'Testing: user@example.com'",
      "AGENT: '✓ Valid email'",
      "AGENT: ''",
      "AGENT: 'Testing: (555) 123-4567'",
      "AGENT: '✓ Valid phone'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Regex Cheat Sheet ---'",
      "AGENT: ''",
      "AGENT: 'SPECIAL CHARACTERS:'",
      "AGENT: '  .     Any character (except newline)'",
      "AGENT: '  ^     Start of line'",
      "AGENT: '  $     End of line'",
      "AGENT: '  \\b    Word boundary'",
      "AGENT: '  \\     Escape special character'",
      "AGENT: ''",
      "AGENT: 'CHARACTER CLASSES:'",
      "AGENT: '  [abc]       Match a, b, or c'",
      "AGENT: '  [a-z]       Match any lowercase letter'",
      "AGENT: '  [^abc]      Match anything EXCEPT a, b, c'",
      "AGENT: '  [[:digit:]] Match any digit'",
      "AGENT: '  [[:alpha:]] Match any letter'",
      "AGENT: ''",
      "AGENT: 'QUANTIFIERS:'",
      "AGENT: '  *     0 or more'",
      "AGENT: '  +     1 or more'",
      "AGENT: '  ?     0 or 1 (optional)'",
      "AGENT: '  {n}   Exactly n times'",
      "AGENT: '  {n,m} Between n and m times'",
      "AGENT: ''",
      "AGENT: 'GROUPS:'",
      "AGENT: '  (abc)   Capture group'",
      "AGENT: '  (a|b|c) Match a OR b OR c'",
      "AGENT: '  (?:abc) Non-capturing group'",
      "AGENT: '  \\1      Backreference to group 1'",
      "AGENT: ''",
      "AGENT: 'SHORTCUTS (with -P):'",
      "AGENT: '  \\d    Digit [0-9]'",
      "AGENT: '  \\w    Word char [A-Za-z0-9_]'",
      "AGENT: '  \\s    Whitespace'",
      "AGENT: '  \\D    Non-digit'",
      "AGENT: '  \\W    Non-word'",
      "AGENT: '  \\S    Non-whitespace'",
      "AGENT: ''",
      "AGENT: 'GREP FLAGS:'",
      "AGENT: '  -E    Extended regex'",
      "AGENT: '  -P    Perl regex'",
      "AGENT: '  -i    Case-insensitive'",
      "AGENT: '  -v    Invert match (non-matching lines)'",
      "AGENT: '  -o    Only show matched part'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Extract with -o ---'",
      "Run command: `grep -Eo '[0-9]{3}-[0-9]{4}' sample.txt`",
      "AGENT: '555-1234'",
      "AGENT: '123-4567'",
      "AGENT: '  -o = Only show matched part'",
      "AGENT: ''",
      "Run command: `grep -Eo '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}' sample.txt`",
      "AGENT: 'user@example.com'",
      "AGENT: 'alice@test.org'",
      "AGENT: 'Extracts just the emails'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Testing Regex ---'",
      "AGENT: ''",
      "AGENT: 'Online testers:'",
      "AGENT: '  • regex101.com'",
      "AGENT: '  • regexr.com'",
      "AGENT: '  • regexpal.com'",
      "AGENT: ''",
      "AGENT: 'Command-line testing:'",
      "Run command: `echo \"test@example.com\" | grep -E '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}' && echo \"Match!\" || echo \"No match\"`",
      "AGENT: 'test@example.com'",
      "AGENT: 'Match!'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Learned basic regex syntax: ., ^, $, [ ], \\b.'",
      "AGENT: '  ✓ Used character classes for matching ranges.'",
      "AGENT: '  ✓ Applied quantifiers: *, +, ?, {n}, {n,m}.'",
      "AGENT: '  ✓ Used anchors to match line start/end.'",
      "AGENT: '  ✓ Created patterns for emails, phones, IPs, URLs.'",
      "AGENT: '  ✓ Used grep -E for extended regex, -P for Perl.'",
      "AGENT: '  ✓ Extracted matches with -o flag.'",
      "AGENT: '  ✓ Used groups and alternation for complex patterns.'",
      "AGENT: '  ✓ Mastered common real-world regex patterns.'",
      "AGENT: '  ✓ You now wield the power of regular expressions! 🔍'"
    ],
    "commands": ["grep", "egrep", "sed", "awk"],
    "packages": {
      "debian_ubuntu": ["grep"],
      "arch": ["grep"]
    },
    "related_commands": ["sed", "awk", "perl"],
    "complexity": "advanced",
    "tags": ["regex", "regular-expressions", "grep", "pattern-matching", "text-search", "email-validation", "phone-validation", "ip-address"]
  }
]

[
  {
    "id": "scenario_awk_text_processing_145",
    "command": "awk",
    "scenario": "Master awk for powerful text processing, field extraction, and data manipulation.",
    "problem": "Need to extract specific columns from files, process CSV/TSV data, perform calculations on fields, filter rows based on conditions, format output, and manipulate structured text data efficiently.",
    "solution": "Learn awk syntax for pattern matching and actions, use field variables ($1, $2, etc.), implement conditionals and loops, perform arithmetic, use built-in functions, and create practical awk scripts for data processing.",
    "steps": [
      "USER SAYS: 'How do I extract specific columns from files and process structured text data? I need to manipulate CSV files and calculate statistics.'",
      "AGENT: 'Let me show you awk! It's perfect for column-based text processing. We'll extract fields, filter rows, do calculations, and more.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: awk text processing...'",
      "AGENT: '[Searching] \"awk tutorial field extraction column processing csv\"'",
      "AGENT: '[Found] awk splits lines into fields: $1, $2, $3, etc.'",
      "AGENT: '[Found] Pattern { action } syntax, NR for line number.'",
      "AGENT: '[Found] BEGIN/END blocks, built-in variables and functions.'",
      "AGENT: '[Found] -F for custom field separator (CSV uses comma).'",
      "AGENT: '✓ Research complete! Let's master awk.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Basic Field Extraction ---'",
      "Create tool: `cat > data.txt << 'EOF'`",
      "Alice 30 Engineer\nBob 25 Designer\nCharlie 35 Manager\nDiana 28 Developer\nEOF",
      "AGENT: ''",
      "Run command: `awk '{print $1}' data.txt`",
      "AGENT: 'Alice'",
      "AGENT: 'Bob'",
      "AGENT: 'Charlie'",
      "AGENT: 'Diana'",
      "AGENT: 'Prints first field (column 1)'",
      "AGENT: ''",
      "Run command: `awk '{print $1, $3}' data.txt`",
      "AGENT: 'Alice Engineer'",
      "AGENT: 'Bob Designer'",
      "AGENT: 'Charlie Manager'",
      "AGENT: 'Diana Developer'",
      "AGENT: 'Prints fields 1 and 3'",
      "AGENT: ''",
      "Run command: `awk '{print $0}' data.txt`",
      "AGENT: '$0 = Entire line'",
      "AGENT: ''",
      "Run command: `awk '{print NF}' data.txt`",
      "AGENT: '3'",
      "AGENT: '3'",
      "AGENT: '3'",
      "AGENT: '3'",
      "AGENT: 'NF = Number of fields per line'",
      "AGENT: ''",
      "Run command: `awk '{print NR, $0}' data.txt`",
      "AGENT: '1 Alice 30 Engineer'",
      "AGENT: '2 Bob 25 Designer'",
      "AGENT: '...'",
      "AGENT: 'NR = Line number (row number)'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Pattern Matching ---'",
      "Run command: `awk '/Engineer/ {print $1}' data.txt`",
      "AGENT: 'Alice'",
      "AGENT: 'Prints name if line contains \"Engineer\"'",
      "AGENT: ''",
      "Run command: `awk '$2 > 28 {print $1, $2}' data.txt`",
      "AGENT: 'Alice 30'",
      "AGENT: 'Charlie 35'",
      "AGENT: 'Prints name and age where age > 28'",
      "AGENT: ''",
      "Run command: `awk '$3 == \"Manager\" {print $0}' data.txt`",
      "AGENT: 'Charlie 35 Manager'",
      "AGENT: 'Prints lines where field 3 equals \"Manager\"'",
      "AGENT: ''",
      "Run command: `awk 'NR == 2 {print $0}' data.txt`",
      "AGENT: 'Bob 25 Designer'",
      "AGENT: 'Prints only line 2'",
      "AGENT: ''",
      "Run command: `awk 'NR >= 2 && NR <= 3 {print $0}' data.txt`",
      "AGENT: 'Bob 25 Designer'",
      "AGENT: 'Charlie 35 Manager'",
      "AGENT: 'Prints lines 2-3'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: BEGIN and END Blocks ---'",
      "Run command: `awk 'BEGIN {print \"Name Age Job\"} {print $0}' data.txt`",
      "AGENT: 'Name Age Job'",
      "AGENT: 'Alice 30 Engineer'",
      "AGENT: 'Bob 25 Designer'",
      "AGENT: '...'",
      "AGENT: 'BEGIN executes before processing lines'",
      "AGENT: ''",
      "Run command: `awk '{print $0} END {print \"Total:\", NR, \"people\"}' data.txt`",
      "AGENT: 'Alice 30 Engineer'",
      "AGENT: 'Bob 25 Designer'",
      "AGENT: 'Charlie 35 Manager'",
      "AGENT: 'Diana 28 Developer'",
      "AGENT: 'Total: 4 people'",
      "AGENT: 'END executes after all lines processed'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Calculations and Aggregation ---'",
      "Run command: `awk '{sum += $2} END {print \"Average age:\", sum/NR}' data.txt`",
      "AGENT: 'Average age: 29.5'",
      "AGENT: 'Calculates average of field 2 (age)'",
      "AGENT: ''",
      "Run command: `awk '{sum += $2; count++} END {print \"Total:\", sum, \"Count:\", count, \"Avg:\", sum/count}' data.txt`",
      "AGENT: 'Total: 118 Count: 4 Avg: 29.5'",
      "AGENT: ''",
      "Run command: `awk 'BEGIN {max=0} {if ($2 > max) max=$2} END {print \"Max age:\", max}' data.txt`",
      "AGENT: 'Max age: 35'",
      "AGENT: ''",
      "Run command: `awk 'BEGIN {min=999} {if ($2 < min) min=$2} END {print \"Min age:\", min}' data.txt`",
      "AGENT: 'Min age: 25'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: CSV Processing ---'",
      "Create tool: `cat > employees.csv << 'EOF'`",
      "Name,Age,Department,Salary\nAlice,30,Engineering,75000\nBob,25,Design,65000\nCharlie,35,Management,85000\nDiana,28,Engineering,72000\nEOF",
      "AGENT: ''",
      "Run command: `awk -F',' '{print $1, $4}' employees.csv`",
      "AGENT: '  -F\\',\\' = Field separator is comma'",
      "AGENT: 'Name Salary'",
      "AGENT: 'Alice 75000'",
      "AGENT: 'Bob 65000'",
      "AGENT: '...'",
      "AGENT: ''",
      "Run command: `awk -F',' 'NR > 1 {print $1, $4}' employees.csv`",
      "AGENT: 'Alice 75000'",
      "AGENT: 'Bob 65000'",
      "AGENT: '...'",
      "AGENT: 'Skips header (NR > 1)'",
      "AGENT: ''",
      "Run command: `awk -F',' 'NR > 1 {sum += $4} END {print \"Total salary: $\" sum}' employees.csv`",
      "AGENT: 'Total salary: $297000'",
      "AGENT: ''",
      "Run command: `awk -F',' 'NR > 1 && $3 == \"Engineering\" {print $1, $4}' employees.csv`",
      "AGENT: 'Alice 75000'",
      "AGENT: 'Diana 72000'",
      "AGENT: 'Engineering department only'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Formatting Output ---'",
      "Run command: `awk '{printf \"%-10s %5d %s\\n\", $1, $2, $3}' data.txt`",
      "AGENT: 'Alice         30 Engineer'",
      "AGENT: 'Bob           25 Designer'",
      "AGENT: 'Charlie       35 Manager'",
      "AGENT: 'Diana         28 Developer'",
      "AGENT: 'printf for formatted output'",
      "AGENT: ''",
      "Run command: `awk -F',' 'NR > 1 {printf \"%-10s $%,d\\n\", $1, $4}' employees.csv`",
      "AGENT: 'Formatted with dollar sign'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Custom Field Separator ---'",
      "Create tool: `cat > access.log << 'EOF'`",
      "192.168.1.100:user1:GET:/api/users:200\n192.168.1.101:user2:POST:/api/login:200\n192.168.1.102:user3:GET:/api/products:404\nEOF",
      "AGENT: ''",
      "Run command: `awk -F':' '{print $1, $3, $5}' access.log`",
      "AGENT: '192.168.1.100 GET 200'",
      "AGENT: '192.168.1.101 POST 200'",
      "AGENT: '192.168.1.102 GET 404'",
      "AGENT: 'Colon-separated fields'",
      "AGENT: ''",
      "Run command: `awk -F':' '$5 >= 400 {print $1, $4, $5}' access.log`",
      "AGENT: '192.168.1.102 /api/products 404'",
      "AGENT: 'Errors only (status >= 400)'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Multiple Conditions ---'",
      "Run command: `awk '$2 >= 30 && $3 != \"Designer\" {print $1}' data.txt`",
      "AGENT: 'Alice'",
      "AGENT: 'Charlie'",
      "AGENT: 'Age >= 30 AND not Designer'",
      "AGENT: ''",
      "Run command: `awk '$2 < 30 || $3 == \"Manager\" {print $0}' data.txt`",
      "AGENT: 'Bob 25 Designer'",
      "AGENT: 'Charlie 35 Manager'",
      "AGENT: 'Diana 28 Developer'",
      "AGENT: 'Age < 30 OR is Manager'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Built-in Functions ---'",
      "Run command: `awk '{print length($1), $1}' data.txt`",
      "AGENT: '5 Alice'",
      "AGENT: '3 Bob'",
      "AGENT: '7 Charlie'",
      "AGENT: '5 Diana'",
      "AGENT: 'length() function'",
      "AGENT: ''",
      "Run command: `awk '{print toupper($1)}' data.txt`",
      "AGENT: 'ALICE'",
      "AGENT: 'BOB'",
      "AGENT: '...'",
      "AGENT: 'toupper() function'",
      "AGENT: ''",
      "Run command: `awk '{print tolower($3)}' data.txt`",
      "AGENT: 'engineer'",
      "AGENT: 'designer'",
      "AGENT: '...'",
      "AGENT: 'tolower() function'",
      "AGENT: ''",
      "Run command: `awk '{print substr($1, 1, 3)}' data.txt`",
      "AGENT: 'Ali'",
      "AGENT: 'Bob'",
      "AGENT: 'Cha'",
      "AGENT: 'Dia'",
      "AGENT: 'substr(string, start, length)'",
      "AGENT: ''",
      "Run command: `echo \"hello world\" | awk '{print gsub(/o/, \"0\"); print $0}'`",
      "AGENT: '2'",
      "AGENT: 'hell0 w0rld'",
      "AGENT: 'gsub() replaces all occurrences'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Practical Examples ---'",
      "AGENT: ''",
      "AGENT: 'Log analysis - count requests per IP:'",
      "Run command: `awk -F':' '{count[$1]++} END {for (ip in count) print ip, count[ip]}' access.log`",
      "AGENT: '192.168.1.100 1'",
      "AGENT: '192.168.1.101 1'",
      "AGENT: '192.168.1.102 1'",
      "AGENT: 'Associative array (hash map)'",
      "AGENT: ''",
      "AGENT: 'Sum column values:'",
      "Run command: `awk '{sum += $2} END {print sum}' data.txt`",
      "AGENT: '118'",
      "AGENT: ''",
      "AGENT: 'Filter and reformat:'",
      "Run command: `awk -F',' 'NR > 1 && $4 > 70000 {printf \"%s earns $%d\\n\", $1, $4}' employees.csv`",
      "AGENT: 'Alice earns $75000'",
      "AGENT: 'Charlie earns $85000'",
      "AGENT: 'Diana earns $72000'",
      "AGENT: ''",
      "AGENT: 'Group by and count:'",
      "Run command: `awk -F',' 'NR > 1 {dept[$3]++} END {for (d in dept) print d \":\", dept[d]}' employees.csv`",
      "AGENT: 'Engineering: 2'",
      "AGENT: 'Design: 1'",
      "AGENT: 'Management: 1'",
      "AGENT: ''",
      "AGENT: '--- Bonus: awk Script File ---'",
      "Create tool: `cat > process.awk << 'EOF'`",
      "BEGIN {\n    FS = \",\"  # Field separator\n    print \"=== Employee Report ===\"\n    total_salary = 0\n    count = 0\n}\n\nNR > 1 {  # Skip header\n    name = $1\n    age = $2\n    dept = $3\n    salary = $4\n    \n    total_salary += salary\n    count++\n    \n    # Track by department\n    dept_count[dept]++\n    dept_salary[dept] += salary\n    \n    # Print formatted\n    printf \"%-10s %3d %-15s $%,d\\n\", name, age, dept, salary\n}\n\nEND {\n    print \"\\n=== Summary ===\"\n    printf \"Total employees: %d\\n\", count\n    printf \"Average salary: $%,.2f\\n\", total_salary/count\n    \n    print \"\\n=== By Department ===\"\n    for (dept in dept_count) {\n        printf \"%-15s: %d employees, Avg: $%,.2f\\n\", \n               dept, dept_count[dept], dept_salary[dept]/dept_count[dept]\n    }\n}\nEOF",
      "Run command: `awk -f process.awk employees.csv`",
      "AGENT: '=== Employee Report ==='",
      "AGENT: 'Alice         30 Engineering     $75,000'",
      "AGENT: 'Bob           25 Design          $65,000'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '=== Summary ==='",
      "AGENT: 'Total employees: 4'",
      "AGENT: 'Average salary: $74,250.00'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '--- Bonus: One-Liners Collection ---'",
      "AGENT: ''",
      "AGENT: 'Print specific column:'",
      "AGENT: '  awk \\'{print $2}\\' file.txt'",
      "AGENT: ''",
      "AGENT: 'Sum a column:'",
      "AGENT: '  awk \\'{sum += $1} END {print sum}\\' file.txt'",
      "AGENT: ''",
      "AGENT: 'Average:'",
      "AGENT: '  awk \\'{sum += $1} END {print sum/NR}\\' file.txt'",
      "AGENT: ''",
      "AGENT: 'Count lines:'",
      "AGENT: '  awk \\'END {print NR}\\' file.txt'",
      "AGENT: ''",
      "AGENT: 'Filter by value:'",
      "AGENT: '  awk \\'$3 > 100 {print $0}\\' file.txt'",
      "AGENT: ''",
      "AGENT: 'CSV processing:'",
      "AGENT: '  awk -F\\',\\' \\'NR > 1 {print $1, $2}\\' file.csv'",
      "AGENT: ''",
      "AGENT: 'Add line numbers:'",
      "AGENT: '  awk \\'{print NR, $0}\\' file.txt'",
      "AGENT: ''",
      "AGENT: 'Remove duplicates:'",
      "AGENT: '  awk \\'!seen[$0]++\\' file.txt'",
      "AGENT: ''",
      "AGENT: 'Print range of lines:'",
      "AGENT: '  awk \\'NR >= 5 && NR <= 10\\' file.txt'",
      "AGENT: ''",
      "AGENT: 'Swap columns:'",
      "AGENT: '  awk \\'{print $2, $1}\\' file.txt'",
      "AGENT: ''",
      "AGENT: '--- Bonus: awk vs sed vs grep ---'",
      "AGENT: ''",
      "AGENT: 'Use awk when:'",
      "AGENT: '  ✓ Processing columns/fields'",
      "AGENT: '  ✓ Doing calculations'",
      "AGENT: '  ✓ Complex conditions'",
      "AGENT: '  ✓ Aggregations and statistics'",
      "AGENT: ''",
      "AGENT: 'Use sed when:'",
      "AGENT: '  ✓ Simple text substitution'",
      "AGENT: '  ✓ Line-based editing'",
      "AGENT: '  ✓ In-place file modification'",
      "AGENT: ''",
      "AGENT: 'Use grep when:'",
      "AGENT: '  ✓ Simple pattern matching'",
      "AGENT: '  ✓ Finding lines with text'",
      "AGENT: '  ✓ Counting matches'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Extracted fields with $1, $2, $3, etc.'",
      "AGENT: '  ✓ Used pattern matching for filtering rows.'",
      "AGENT: '  ✓ Implemented BEGIN/END blocks for setup/summary.'",
      "AGENT: '  ✓ Performed calculations and aggregations.'",
      "AGENT: '  ✓ Processed CSV files with -F\\',\\' separator.'",
      "AGENT: '  ✓ Formatted output with printf.'",
      "AGENT: '  ✓ Used built-in functions (length, toupper, substr).'",
      "AGENT: '  ✓ Created associative arrays for grouping.'",
      "AGENT: '  ✓ Wrote reusable awk scripts in files.'",
      "AGENT: '  ✓ You now master awk for powerful text processing! 📊'"
    ],
    "commands": ["awk", "gawk"],
    "packages": {
      "debian_ubuntu": ["gawk"],
      "arch": ["gawk"]
    },
    "related_commands": ["sed", "grep", "cut", "sort"],
    "complexity": "advanced",
    "tags": ["awk", "text-processing", "field-extraction", "csv", "data-manipulation", "columns", "calculations", "filtering"]
  }
]

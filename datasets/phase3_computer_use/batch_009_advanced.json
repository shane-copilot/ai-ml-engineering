[
  {
    "id": "adv_001",
    "scenario": "Set up automated off-site backup using rsync over SSH with encryption and deduplication",
    "problem": "Need reliable automated backups to remote server with bandwidth efficiency and security",
    "solution": "Combine rsync, SSH keys, encryption, and cron/systemd timers for automated encrypted backups",
    "steps": [
      "Choose backup strategy: Full backup vs incremental",
      "For deduplication: Use borg backup instead of rsync (better for this use case)",
      "Install borg: sudo apt install borgbackup (Ubuntu) or sudo pacman -S borg (Arch)",
      "Set up SSH key authentication: ssh-keygen -t ed25519 -f ~/.ssh/backup_key",
      "Copy key to backup server: ssh-copy-id -i ~/.ssh/backup_key user@backup-server",
      "Test connection: ssh -i ~/.ssh/backup_key user@backup-server",
      "Initialize borg repository: borg init --encryption=repokey user@backup-server:/path/to/repo",
      "Enter encryption passphrase (save this securely!)",
      "Create first backup: borg create --stats --progress user@backup-server:/path/to/repo::'{hostname}-{now}' ~/Documents ~/Pictures",
      "List archives: borg list user@backup-server:/path/to/repo",
      "Create backup script: nano ~/backup.sh",
      "Script content:\n#!/bin/bash\nexport BORG_REPO='user@backup-server:/path/to/repo'\nexport BORG_PASSPHRASE='your-passphrase'\nborg create --stats --compression lz4 ::'{hostname}-{now:%Y-%m-%d-%H%M}' ~/Documents ~/Pictures --exclude '*.tmp' --exclude '~/.cache'\nborg prune --keep-daily=7 --keep-weekly=4 --keep-monthly=6\nborg compact",
      "Make executable: chmod +x ~/backup.sh",
      "Test script: ~/backup.sh",
      "Store passphrase securely: Use pass or keepassxc, not plain text!",
      "Alternative: Store in ~/.config/borg/passphrase with chmod 600",
      "Create systemd service: sudo nano /etc/systemd/system/borg-backup.service",
      "Service content:\n[Unit]\nDescription=Borg Backup\n[Service]\nType=oneshot\nExecStart=/home/user/backup.sh\nUser=user",
      "Create timer: sudo nano /etc/systemd/system/borg-backup.timer",
      "Timer content:\n[Unit]\nDescription=Run Borg Backup Daily\n[Timer]\nOnCalendar=daily\nPersistent=true\n[Install]\nWantedBy=timers.target",
      "Enable timer: sudo systemctl enable --now borg-backup.timer",
      "Check timer status: systemctl list-timers borg-backup",
      "View logs: journalctl -u borg-backup.service",
      "Restore file: borg extract user@backup-server:/path/to/repo::archive-name path/to/file",
      "Mount archive to browse: borg mount user@backup-server:/path/to/repo::archive-name /mnt/borg",
      "Unmount: borg umount /mnt/borg",
      "Verify backup integrity: borg check user@backup-server:/path/to/repo",
      "Export encryption key: borg key export user@backup-server:/path/to/repo ~/borg-key-backup",
      "Store key backup separately from backups!",
      "Monitor backup size: borg info user@backup-server:/path/to/repo",
      "Set up email notifications: Add mail command to script on failure"
    ],
    "commands": ["borgbackup", "ssh-keygen", "ssh-copy-id", "ssh", "borg", "chmod", "nano", "systemctl", "journalctl"],
    "packages": {
      "debian_ubuntu": ["borgbackup", "openssh-client"],
      "arch": ["borg", "openssh"]
    },
    "complexity": "advanced",
    "tags": ["backup", "borg", "rsync", "ssh", "encryption", "automation", "deduplication", "systemd"]
  },
  {
    "id": "adv_002",
    "scenario": "Debug application crash with core dumps and gdb",
    "problem": "Application keeps crashing with segfault, need to find root cause in code",
    "solution": "Enable core dumps, reproduce crash, analyze with gdb to identify problem",
    "steps": [
      "Check if core dumps enabled: ulimit -c (if 0, disabled)",
      "Enable core dumps: ulimit -c unlimited",
      "Make permanent: echo '*  soft  core  unlimited' | sudo tee -a /etc/security/limits.conf",
      "Configure core dump location: echo '/tmp/core.%e.%p' | sudo tee /proc/sys/kernel/core_pattern",
      "Or use systemd-coredump: sudo apt install systemd-coredump (Ubuntu) or included (Arch)",
      "Check systemd core config: coredumpctl list",
      "Install debug symbols: sudo apt install <package>-dbgsym (Ubuntu) or debuginfod setup (Arch)",
      "For Arch: export DEBUGINFOD_URLS='https://debuginfod.archlinux.org'",
      "Install gdb: sudo apt install gdb (Ubuntu) or sudo pacman -S gdb (Arch)",
      "Reproduce crash: Run application until it crashes",
      "Find core dump: ls -lh /tmp/core.* or coredumpctl list",
      "Load core dump in gdb: gdb /path/to/binary /path/to/core",
      "Or with coredumpctl: coredumpctl gdb <PID>",
      "In gdb, get backtrace: bt or bt full (with local variables)",
      "Identify crash location: Look for function names and line numbers",
      "Examine variables: info locals or print variable_name",
      "Check frame details: frame <number> then info args",
      "Look at source: list (shows source code around crash)",
      "For running process: gdb -p <PID> (attach to running process)",
      "Set breakpoint: break function_name or break file.c:123",
      "Run program in gdb: gdb ./binary then run --with-args",
      "Step through code: next (next line), step (step into), continue",
      "Watch variable: watch variable_name (breaks when value changes)",
      "Check registers: info registers",
      "Examine memory: x/10x $sp (examine 10 hex values at stack pointer)",
      "For multithreaded: thread apply all bt (backtrace all threads)",
      "Switch threads: thread <number>",
      "Common crash causes: NULL pointer dereference, buffer overflow, use after free",
      "Check for NULL: In bt, look for functions called with 0x0 addresses",
      "Check array bounds: Examine loop variables and array sizes",
      "Use valgrind for memory issues: valgrind --leak-check=full ./binary",
      "Valgrind shows: memory leaks, invalid reads/writes, use of uninitialized memory",
      "For C++: Compile with -g -O0 flags for better debugging",
      "Generate detailed logs: Record gdb session: gdb -batch -ex 'bt full' -ex 'quit' /path/to/binary /path/to/core > crash_report.txt"
    ],
    "commands": ["ulimit", "echo", "tee", "coredumpctl", "gdb", "ls", "valgrind"],
    "packages": {
      "debian_ubuntu": ["gdb", "systemd-coredump", "valgrind"],
      "arch": ["gdb", "systemd", "valgrind"]
    },
    "complexity": "advanced",
    "tags": ["debugging", "gdb", "core-dump", "crash-analysis", "segfault", "programming", "troubleshooting"]
  },
  {
    "id": "adv_003",
    "scenario": "Set up Pi-hole for network-wide ad blocking and DNS filtering",
    "problem": "Want to block ads and trackers for all devices on network without per-device configuration",
    "solution": "Install Pi-hole on Raspberry Pi or spare computer to act as network DNS server",
    "steps": [
      "Requirements: Raspberry Pi or any Linux machine with static IP",
      "Set static IP: sudo nano /etc/netplan/01-netcfg.yaml (Ubuntu) or /etc/systemd/network/20-wired.network (Arch)",
      "Configure static IP: e.g., 192.168.1.10/24, gateway 192.168.1.1",
      "Apply network config: sudo netplan apply or sudo systemctl restart systemd-networkd",
      "Update system: sudo apt update && sudo apt upgrade (Ubuntu) or sudo pacman -Syu (Arch)",
      "Download Pi-hole installer: wget -O basic-install.sh https://install.pi-hole.net",
      "Verify script (good security practice): less basic-install.sh",
      "Run installer: sudo bash basic-install.sh",
      "Follow installation wizard: Select interface (eth0), upstream DNS (8.8.8.8 or 1.1.1.1)",
      "Choose blocklists: Default lists are good, can add more later",
      "Install web interface: Yes (recommended)",
      "Install web server: lighttpd (default, recommended)",
      "Enable logging: Yes (can disable later if privacy concern)",
      "Set privacy level: Show everything (can change in web interface)",
      "Note admin password shown at end of installation!",
      "Change password if needed: pihole -a -p newpassword",
      "Access web interface: http://192.168.1.10/admin",
      "Test Pi-hole: nslookup doubleclick.net 192.168.1.10 (should return 0.0.0.0)",
      "Configure router: Change DHCP DNS to 192.168.1.10 (Pi-hole IP)",
      "Or set per-device: Change DNS in device network settings",
      "On router admin page: Find DHCP settings, set Primary DNS to Pi-hole IP",
      "Disable DHCP on router or let Pi-hole handle DHCP: Settings → DHCP → Enable DHCP server",
      "If Pi-hole handles DHCP: Disable router DHCP to avoid conflicts",
      "Add custom blocklists: Settings → Blocklists → Add list URL",
      "Popular lists: Firebog.net lists, energized protection",
      "Whitelist domains: If site breaks, add to whitelist: pihole -w domain.com",
      "Blacklist additional domains: pihole -b ads.annoying-site.com",
      "Regex blocking: Settings → Regex → Add pattern like .*tracking.*",
      "View statistics: Dashboard shows queries, blocked percentage, top clients",
      "Check query log: Tools → Query Log → See what's being blocked/allowed",
      "Update gravity (blocklists): pihole -g",
      "Set up automatic updates: Create cron job: sudo crontab -e",
      "Add line: 0 3 * * 0 pihole -up && pihole -g (update weekly Sunday 3 AM)",
      "Backup Pi-hole: pihole -a -t (creates backup file)",
      "Restore from backup: pihole -a -r /path/to/backup.tar.gz",
      "Monitor from CLI: pihole -c (live stats in terminal)",
      "Troubleshooting: Check FTL status: sudo service pihole-FTL status",
      "Check DNS resolution: dig @192.168.1.10 google.com",
      "View FTL logs: pihole -t (tail log)"
    ],
    "commands": ["nano", "netplan", "systemctl", "apt", "pacman", "wget", "less", "bash", "pihole", "nslookup", "dig", "crontab", "service"],
    "packages": {
      "debian_ubuntu": ["wget", "curl", "ca-certificates"],
      "arch": ["wget", "curl", "ca-certificates"]
    },
    "complexity": "advanced",
    "tags": ["pi-hole", "dns", "ad-blocking", "network-security", "privacy", "raspberry-pi", "setup"]
  },
  {
    "id": "adv_004",
    "scenario": "Optimize slow database queries and improve MySQL/PostgreSQL performance",
    "problem": "Web application slow due to database bottleneck, queries taking seconds instead of milliseconds",
    "solution": "Analyze slow queries, add indexes, optimize configuration, and monitor performance",
    "steps": [
      "For MySQL/MariaDB:",
      "Enable slow query log: sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf",
      "Add: slow_query_log = 1, slow_query_log_file = /var/log/mysql/slow.log, long_query_time = 2",
      "Restart MySQL: sudo systemctl restart mysql",
      "Run application to generate slow query log",
      "Analyze slow queries: sudo mysqldumpslow -s t -t 10 /var/log/mysql/slow.log",
      "Connect to database: mysql -u root -p database_name",
      "For specific slow query, run EXPLAIN: EXPLAIN SELECT * FROM table WHERE column = 'value';",
      "Look for: type=ALL (bad, full table scan), rows=high number (bad)",
      "Check if index exists: SHOW INDEX FROM table_name;",
      "Create index: CREATE INDEX idx_column_name ON table_name(column_name);",
      "For composite index: CREATE INDEX idx_multi ON table_name(column1, column2);",
      "Analyze table after index: ANALYZE TABLE table_name;",
      "Re-run EXPLAIN: Should now show type=ref and much lower rows",
      "Check query cache: SHOW VARIABLES LIKE 'query_cache%';",
      "Enable query cache: query_cache_type = 1, query_cache_size = 64M in my.cnf",
      "Monitor cache hits: SHOW STATUS LIKE 'Qcache%';",
      "Check InnoDB buffer pool: SHOW VARIABLES LIKE 'innodb_buffer_pool_size';",
      "Increase buffer pool: innodb_buffer_pool_size = 2G (adjust to 70% of RAM for dedicated DB server)",
      "Optimize table (defragment): OPTIMIZE TABLE table_name;",
      "Check table size: SELECT table_name, round(((data_length + index_length) / 1024 / 1024), 2) AS 'Size (MB)' FROM information_schema.TABLES WHERE table_schema = 'database_name';",
      "For PostgreSQL:",
      "Enable slow query log: ALTER DATABASE database_name SET log_min_duration_statement = 2000; (2 seconds)",
      "Or in postgresql.conf: log_min_duration_statement = 2000",
      "Reload config: SELECT pg_reload_conf();",
      "View slow queries: sudo tail -f /var/log/postgresql/postgresql-*.log | grep 'duration:'",
      "Connect: psql -U postgres -d database_name",
      "Analyze query: EXPLAIN ANALYZE SELECT * FROM table WHERE column = 'value';",
      "Create index: CREATE INDEX idx_column ON table_name(column_name);",
      "Reindex: REINDEX INDEX idx_column;",
      "Vacuum analyze: VACUUM ANALYZE table_name; (update statistics)",
      "Check index usage: SELECT * FROM pg_stat_user_indexes WHERE schemaname = 'public';",
      "Find unused indexes: SELECT * FROM pg_stat_user_indexes WHERE idx_scan = 0;",
      "Drop unused index: DROP INDEX index_name;",
      "Tune shared_buffers: In postgresql.conf: shared_buffers = 2GB (25% of RAM)",
      "Tune work_mem: work_mem = 64MB (for sorting/hashing)",
      "Enable pg_stat_statements: CREATE EXTENSION pg_stat_statements;",
      "View top slow queries: SELECT query, calls, total_time, mean_time FROM pg_stat_statements ORDER BY mean_time DESC LIMIT 10;",
      "General tips:",
      "Use connection pooling: pgbouncer (PostgreSQL) or ProxySQL (MySQL)",
      "Partition large tables: Split by date range or other criteria",
      "Archive old data: Move to separate table or database",
      "Monitor with tools: mysqltuner, percona-toolkit, pgbadger"
    ],
    "commands": ["nano", "systemctl", "mysqldumpslow", "mysql", "psql", "tail", "grep"],
    "packages": {
      "debian_ubuntu": ["mysql-server", "postgresql", "mysqltuner", "percona-toolkit", "pgbadger"],
      "arch": ["mariadb", "postgresql", "perl-dbi", "perl-dbd-mysql"]
    },
    "complexity": "advanced",
    "tags": ["database", "mysql", "postgresql", "performance", "optimization", "slow-query", "indexing", "tuning"]
  },
  {
    "id": "adv_005",
    "scenario": "Set up complete Docker development environment with compose",
    "problem": "Need isolated development environment with database, web server, and app that's easy to reproduce",
    "solution": "Create Docker Compose configuration for complete stack with volumes and networking",
    "steps": [
      "Install Docker: curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh",
      "Add user to docker group: sudo usermod -aG docker $USER",
      "Log out and back in for group to take effect",
      "Test Docker: docker run hello-world",
      "Install Docker Compose: sudo apt install docker-compose (Ubuntu) or sudo pacman -S docker-compose (Arch)",
      "Or use docker compose plugin: Already included in modern Docker",
      "Create project directory: mkdir ~/my-project && cd ~/my-project",
      "Create docker-compose.yml: nano docker-compose.yml",
      "Example stack (web + database):\nversion: '3.8'\nservices:\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    ports:\n      - '5432:5432'\n  web:\n    build: .\n    ports:\n      - '8000:8000'\n    volumes:\n      - .:/code\n    environment:\n      DATABASE_URL: postgresql://user:password@db:5432/myapp\n    depends_on:\n      - db\n    command: python manage.py runserver 0.0.0.0:8000\nvolumes:\n  db-data:",
      "Create Dockerfile: nano Dockerfile",
      "Example Dockerfile:\nFROM python:3.11-slim\nWORKDIR /code\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . .\nEXPOSE 8000\nCMD ['python', 'manage.py', 'runserver', '0.0.0.0:8000']",
      "Create requirements.txt: echo 'django==4.2\\npsycopg2-binary==2.9' > requirements.txt",
      "Build images: docker-compose build",
      "Start services: docker-compose up -d (-d for detached/background)",
      "View logs: docker-compose logs -f or docker-compose logs web",
      "Check status: docker-compose ps",
      "Run commands in container: docker-compose exec web python manage.py migrate",
      "Or: docker-compose exec web bash (get shell in container)",
      "Access database: docker-compose exec db psql -U user -d myapp",
      "Stop services: docker-compose stop",
      "Start again: docker-compose start",
      "Restart service: docker-compose restart web",
      "Remove containers but keep volumes: docker-compose down",
      "Remove everything including volumes: docker-compose down -v (DANGER: deletes data)",
      "View volumes: docker volume ls",
      "Backup database volume: docker run --rm -v my-project_db-data:/data -v $(pwd):/backup ubuntu tar czf /backup/db-backup.tar.gz /data",
      "Restore: docker run --rm -v my-project_db-data:/data -v $(pwd):/backup ubuntu tar xzf /backup/db-backup.tar.gz -C /",
      "Add more services: Redis, nginx, etc. in same compose file",
      "Example add Redis:\n  redis:\n    image: redis:7-alpine\n    ports:\n      - '6379:6379'",
      "Network isolation: Services on same compose file share network automatically",
      "Override for development: Create docker-compose.override.yml",
      "Production deployment: Use docker-compose -f docker-compose.prod.yml up",
      "Clean up old images: docker image prune -a",
      "Clean up everything: docker system prune -a --volumes (nuclear option)",
      "Monitor resources: docker stats"
    ],
    "commands": ["curl", "sudo", "usermod", "docker", "docker-compose", "mkdir", "cd", "nano", "echo", "tar"],
    "packages": {
      "debian_ubuntu": ["docker.io", "docker-compose"],
      "arch": ["docker", "docker-compose"]
    },
    "complexity": "advanced",
    "tags": ["docker", "containers", "docker-compose", "development-environment", "postgresql", "microservices", "devops"]
  }
]

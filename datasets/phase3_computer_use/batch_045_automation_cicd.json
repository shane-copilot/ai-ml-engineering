[
  {
    "id": "scenario_ansible_basics_001",
    "command": "ansible",
    "scenario": "User: Manage multiple servers efficiently",
    "problem": "Need to configure many machines identically",
    "solution": "Use Ansible for automation",
    "steps": [
      "USER SAYS: 'I have 5 servers to configure. Doing it manually is tedious!'",
      "AGENT: 'Ansible can automate that! Let me set it up...'",
      "Install: sudo apt install ansible || sudo pacman -S ansible",
      "AGENT: 'Ansible installed ✓'",
      "Create inventory: mkdir -p ~/ansible && cat > ~/ansible/hosts << 'EOF'",
      "[webservers]",
      "web1 ansible_host=192.168.1.101",
      "web2 ansible_host=192.168.1.102",
      "[databases]",
      "db1 ansible_host=192.168.1.201",
      "EOF",
      "AGENT: 'Server inventory created ✓'",
      "Test connection: ansible all -i ~/ansible/hosts -m ping",
      "AGENT: 'All servers reachable! ✓'",
      "USER: 'How do I run commands on all servers?'",
      "AGENT: 'Easy! Use ad-hoc commands...'",
      "Example: ansible webservers -i ~/ansible/hosts -a 'uptime'",
      "AGENT: 'Uptime from all web servers shown ✓'",
      "Install package: ansible all -i ~/ansible/hosts -b -m apt -a 'name=htop state=present'",
      "AGENT: 'htop installed on all servers ✓'",
      "USER: 'What about complex configurations?'",
      "AGENT: 'Create a playbook!'",
      "Create playbook: cat > ~/ansible/webserver.yml << 'EOF'",
      "---",
      "- name: Configure web servers",
      "  hosts: webservers",
      "  become: yes",
      "  tasks:",
      "    - name: Install nginx",
      "      apt:",
      "        name: nginx",
      "        state: present",
      "    - name: Start nginx",
      "      service:",
      "        name: nginx",
      "        state: started",
      "        enabled: yes",
      "    - name: Copy website files",
      "      copy:",
      "        src: /local/website/",
      "        dest: /var/www/html/",
      "    - name: Configure firewall",
      "      ufw:",
      "        rule: allow",
      "        port: '80'",
      "EOF",
      "AGENT: 'Playbook created ✓'",
      "Run playbook: ansible-playbook -i ~/ansible/hosts ~/ansible/webserver.yml",
      "AGENT: 'Configuring all web servers...'",
      "AGENT: 'All servers configured identically! ✓'",
      "Create quick playbook: cat > ~/ansible/update-all.yml << 'EOF'",
      "---",
      "- name: Update all servers",
      "  hosts: all",
      "  become: yes",
      "  tasks:",
      "    - name: Update package cache",
      "      apt:",
      "        update_cache: yes",
      "    - name: Upgrade all packages",
      "      apt:",
      "        upgrade: dist",
      "    - name: Remove unused packages",
      "      apt:",
      "        autoremove: yes",
      "    - name: Reboot if required",
      "      reboot:",
      "        msg: 'Rebooting after updates'",
      "      when: ansible_facts['reboot_required']",
      "EOF",
      "AGENT: 'Update playbook created ✓'",
      "Create ansible helper: cat > ~/ansible-run.sh << 'EOF'",
      "#!/bin/bash",
      "cd ~/ansible",
      "echo '=== Ansible Helper ==='",
      "echo ''",
      "echo '1. Ping all servers'",
      "echo '2. Run command on all servers'",
      "echo '3. Update all servers'",
      "echo '4. Run custom playbook'",
      "echo '5. List inventory'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) ansible all -i hosts -m ping ;;",
      "  2) read -p 'Command: ' CMD; ansible all -i hosts -a \"$CMD\" ;;",
      "  3) ansible-playbook -i hosts update-all.yml ;;",
      "  4) read -p 'Playbook: ' PB; ansible-playbook -i hosts $PB ;;",
      "  5) ansible-inventory -i hosts --list ;;",
      "esac",
      "EOF",
      "chmod +x ~/ansible-run.sh",
      "AGENT: 'Ansible automation ready! ✓'",
      "AGENT: 'Now manage dozens of servers as easily as one! ✓'"
    ],
    "commands": ["ansible", "ansible-playbook"],
    "packages": {"debian_ubuntu": ["ansible"], "arch": ["ansible"]},
    "related_commands": ["ansible", "ansible-playbook", "ansible-vault"],
    "complexity": "advanced",
    "tags": ["ansible", "automation", "configuration-management", "infrastructure", "devops", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_terraform_basics_001",
    "command": "terraform",
    "scenario": "User: Want Infrastructure as Code",
    "problem": "Manually creating cloud resources is error-prone",
    "solution": "Use Terraform for declarative infrastructure",
    "steps": [
      "USER SAYS: 'I keep messing up cloud infrastructure setup!'",
      "AGENT: 'Terraform can define infrastructure as code! Let me show you...'",
      "Install: curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - && sudo apt-add-repository 'deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main' && sudo apt install terraform",
      "AGENT: 'Terraform installed ✓'",
      "Verify: terraform --version",
      "AGENT: 'Terraform ready ✓'",
      "Create project: mkdir -p ~/terraform/test && cd ~/terraform/test",
      "Create config: cat > main.tf << 'EOF'",
      "terraform {",
      "  required_providers {",
      "    docker = {",
      "      source = \"kreuzwerker/docker\"",
      "    }",
      "  }",
      "}",
      "provider \"docker\" {}",
      "resource \"docker_image\" \"nginx\" {",
      "  name = \"nginx:latest\"",
      "}",
      "resource \"docker_container\" \"nginx\" {",
      "  image = docker_image.nginx.image_id",
      "  name  = \"terraform-nginx\"",
      "  ports {",
      "    internal = 80",
      "    external = 8080",
      "  }",
      "}",
      "EOF",
      "AGENT: 'Infrastructure defined as code ✓'",
      "Initialize: terraform init",
      "AGENT: 'Terraform initialized ✓'",
      "Plan: terraform plan",
      "AGENT: 'Showing what will be created...'",
      "AGENT: '+ docker_image.nginx'",
      "AGENT: '+ docker_container.nginx'",
      "Apply: terraform apply",
      "AGENT: 'Type yes to confirm'",
      "AGENT: 'Infrastructure created! ✓'",
      "Test: curl localhost:8080",
      "AGENT: 'Nginx running! ✓'",
      "USER: 'How do I destroy it?'",
      "Destroy: terraform destroy",
      "AGENT: 'Type yes to confirm'",
      "AGENT: 'Infrastructure destroyed! ✓'",
      "Create AWS example: cat > ~/terraform/aws-example.tf << 'EOF'",
      "terraform {",
      "  required_providers {",
      "    aws = {",
      "      source = \"hashicorp/aws\"",
      "    }",
      "  }",
      "}",
      "provider \"aws\" {",
      "  region = \"us-east-1\"",
      "}",
      "resource \"aws_instance\" \"web\" {",
      "  ami           = \"ami-0c55b159cbfafe1f0\"",
      "  instance_type = \"t2.micro\"",
      "  tags = {",
      "    Name = \"TerraformExample\"",
      "  }",
      "}",
      "EOF",
      "AGENT: 'AWS infrastructure template created ✓'",
      "Create helper: cat > ~/terraform-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Terraform Manager ==='",
      "echo ''",
      "read -p 'Project directory: ' DIR",
      "cd $DIR",
      "echo ''",
      "echo '1. Initialize'",
      "echo '2. Plan (preview changes)'",
      "echo '3. Apply (create infrastructure)'",
      "echo '4. Destroy (delete infrastructure)'",
      "echo '5. Show current state'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) terraform init ;;",
      "  2) terraform plan ;;",
      "  3) terraform apply ;;",
      "  4) terraform destroy ;;",
      "  5) terraform show ;;",
      "esac",
      "EOF",
      "chmod +x ~/terraform-manage.sh",
      "AGENT: 'Terraform ready! ✓'",
      "AGENT: 'Infrastructure as Code = reproducible, version-controlled infrastructure ✓'"
    ],
    "commands": ["terraform"],
    "packages": {"debian_ubuntu": [], "arch": []},
    "related_commands": ["terraform", "pulumi", "cloudformation"],
    "complexity": "advanced",
    "tags": ["terraform", "iac", "infrastructure", "cloud", "automation", "devops", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_jenkins_ci_001",
    "command": "jenkins",
    "scenario": "User: Need automated testing and deployment",
    "problem": "Manual testing and deployment is slow",
    "solution": "Setup Jenkins CI/CD pipeline",
    "steps": [
      "USER SAYS: 'I want to automatically test and deploy code when I push.'",
      "AGENT: 'Jenkins can do that! Let me set up a CI/CD pipeline...'",
      "Install Java: sudo apt install openjdk-11-jre || sudo pacman -S jre11-openjdk",
      "AGENT: 'Java installed ✓'",
      "Add repo: wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add - && sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'",
      "Install Jenkins: sudo apt update && sudo apt install jenkins",
      "AGENT: 'Jenkins installed ✓'",
      "Start: sudo systemctl enable --now jenkins",
      "AGENT: 'Jenkins running on http://localhost:8080'",
      "Get password: sudo cat /var/lib/jenkins/secrets/initialAdminPassword",
      "AGENT: 'Initial admin password shown - copy it ✓'",
      "AGENT: 'Open browser to http://localhost:8080 and paste password'",
      "AGENT: 'Install suggested plugins'",
      "AGENT: 'Create admin user'",
      "AGENT: 'Jenkins ready! ✓'",
      "USER: 'How do I create a pipeline?'",
      "AGENT: 'Let me create a simple example...'",
      "Create Jenkinsfile: cat > ~/project/Jenkinsfile << 'EOF'",
      "pipeline {",
      "    agent any",
      "    stages {",
      "        stage('Build') {",
      "            steps {",
      "                echo 'Building...'",
      "                sh 'npm install'",
      "            }",
      "        }",
      "        stage('Test') {",
      "            steps {",
      "                echo 'Testing...'",
      "                sh 'npm test'",
      "            }",
      "        }",
      "        stage('Deploy') {",
      "            steps {",
      "                echo 'Deploying...'",
      "                sh './deploy.sh'",
      "            }",
      "        }",
      "    }",
      "}",
      "EOF",
      "AGENT: 'Jenkinsfile created ✓'",
      "AGENT: 'In Jenkins web UI:'",
      "AGENT: '1. New Item → Pipeline'",
      "AGENT: '2. Pipeline → Definition: Pipeline script from SCM'",
      "AGENT: '3. SCM: Git'",
      "AGENT: '4. Repository URL: your-repo-url'",
      "AGENT: '5. Save'",
      "AGENT: 'Now every push triggers: Build → Test → Deploy ✓'",
      "Create webhook script: cat > ~/jenkins-webhook.sh << 'EOF'",
      "#!/bin/bash",
      "JENKINS_URL='http://localhost:8080'",
      "JOB_NAME='my-project'",
      "TOKEN='your-token-here'",
      "curl -X POST $JENKINS_URL/job/$JOB_NAME/build?token=$TOKEN",
      "echo '✓ Build triggered'",
      "EOF",
      "chmod +x ~/jenkins-webhook.sh",
      "Create status checker: cat > ~/jenkins-status.sh << 'EOF'",
      "#!/bin/bash",
      "JENKINS_URL='http://localhost:8080'",
      "echo '=== Jenkins Status ==='",
      "echo ''",
      "curl -s $JENKINS_URL/api/json | jq '.jobs[] | {name: .name, color: .color}'",
      "EOF",
      "chmod +x ~/jenkins-status.sh",
      "AGENT: 'Jenkins CI/CD pipeline ready! ✓'",
      "AGENT: 'Automated testing and deployment configured ✓'"
    ],
    "commands": ["jenkins", "systemctl", "curl"],
    "packages": {"debian_ubuntu": ["jenkins"], "arch": []},
    "related_commands": ["jenkins", "gitlab-ci", "github-actions"],
    "complexity": "advanced",
    "tags": ["jenkins", "ci-cd", "automation", "testing", "deployment", "devops", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_github_actions_001",
    "command": "git",
    "scenario": "User: Want free CI/CD with GitHub",
    "problem": "Need automated testing without Jenkins setup",
    "solution": "Use GitHub Actions for CI/CD",
    "steps": [
      "USER SAYS: 'Jenkins seems complex. Is there something simpler?'",
      "AGENT: 'GitHub Actions is built-in and free! Let me set it up...'",
      "Create workflow: mkdir -p ~/project/.github/workflows",
      "Create CI file: cat > ~/project/.github/workflows/ci.yml << 'EOF'",
      "name: CI/CD Pipeline",
      "on:",
      "  push:",
      "    branches: [ main ]",
      "  pull_request:",
      "    branches: [ main ]",
      "jobs:",
      "  build-and-test:",
      "    runs-on: ubuntu-latest",
      "    steps:",
      "    - uses: actions/checkout@v2",
      "    - name: Setup Node.js",
      "      uses: actions/setup-node@v2",
      "      with:",
      "        node-version: '16'",
      "    - name: Install dependencies",
      "      run: npm install",
      "    - name: Run tests",
      "      run: npm test",
      "    - name: Build",
      "      run: npm run build",
      "EOF",
      "AGENT: 'GitHub Actions workflow created ✓'",
      "Commit: cd ~/project && git add .github/workflows/ci.yml && git commit -m 'Add CI/CD pipeline'",
      "Push: git push",
      "AGENT: 'Pushed to GitHub - check Actions tab!'",
      "AGENT: 'Pipeline running automatically! ✓'",
      "USER: 'How do I add deployment?'",
      "AGENT: 'Add deploy job...'",
      "Create deploy workflow: cat >> ~/project/.github/workflows/ci.yml << 'EOF'",
      "  deploy:",
      "    needs: build-and-test",
      "    runs-on: ubuntu-latest",
      "    if: github.ref == 'refs/heads/main'",
      "    steps:",
      "    - uses: actions/checkout@v2",
      "    - name: Deploy to server",
      "      env:",
      "        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}",
      "      run: |",
      "        echo \"$SSH_PRIVATE_KEY\" > key",
      "        chmod 600 key",
      "        scp -i key -r dist/ user@server:/var/www/",
      "EOF",
      "AGENT: 'Deployment step added ✓'",
      "AGENT: 'Add SSH_PRIVATE_KEY to GitHub Secrets:'",
      "AGENT: '1. GitHub repo → Settings → Secrets'",
      "AGENT: '2. New repository secret'",
      "AGENT: '3. Name: SSH_PRIVATE_KEY'",
      "AGENT: '4. Value: your private key'",
      "Create Python workflow: cat > ~/project/.github/workflows/python.yml << 'EOF'",
      "name: Python CI",
      "on: [push]",
      "jobs:",
      "  test:",
      "    runs-on: ubuntu-latest",
      "    steps:",
      "    - uses: actions/checkout@v2",
      "    - uses: actions/setup-python@v2",
      "      with:",
      "        python-version: '3.9'",
      "    - name: Install dependencies",
      "      run: |",
      "        pip install -r requirements.txt",
      "        pip install pytest",
      "    - name: Run tests",
      "      run: pytest",
      "EOF",
      "AGENT: 'Python CI workflow created ✓'",
      "Create workflow generator: cat > ~/generate-github-action.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== GitHub Actions Generator ==='",
      "echo ''",
      "echo '1. Node.js CI/CD'",
      "echo '2. Python CI'",
      "echo '3. Docker build and push'",
      "echo '4. Deploy to AWS'",
      "read -p 'Choice: ' OPT",
      "mkdir -p .github/workflows",
      "case $OPT in",
      "  1) curl -o .github/workflows/nodejs.yml https://raw.githubusercontent.com/actions/starter-workflows/main/ci/node.js.yml ;;",
      "  2) curl -o .github/workflows/python.yml https://raw.githubusercontent.com/actions/starter-workflows/main/ci/python-app.yml ;;",
      "  3) curl -o .github/workflows/docker.yml https://raw.githubusercontent.com/actions/starter-workflows/main/ci/docker-publish.yml ;;",
      "esac",
      "echo '✓ Workflow created in .github/workflows/'",
      "EOF",
      "chmod +x ~/generate-github-action.sh",
      "AGENT: 'GitHub Actions ready! ✓'",
      "AGENT: 'Free automated CI/CD for all your repos ✓'"
    ],
    "commands": ["git", "gh"],
    "packages": {"debian_ubuntu": ["git", "gh"], "arch": ["git", "github-cli"]},
    "related_commands": ["git", "gh"],
    "complexity": "intermediate",
    "tags": ["github-actions", "ci-cd", "automation", "testing", "deployment", "devops", "real-world", "ai-agent"]
  }
]

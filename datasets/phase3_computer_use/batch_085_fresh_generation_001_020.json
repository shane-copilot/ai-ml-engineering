[
  {
    "id": "scenario_systemd_timer_cron_alternative_085",
    "command": "systemd",
    "scenario": "Replace a cron job with a systemd timer for better logging and dependency management.",
    "problem": "A user has a backup script running via cron, but debugging failures is difficult because cron's logging is poor. They want better visibility into when the job runs, how long it takes, and any errors that occur.",
    "solution": "Create a systemd service unit that runs the backup script and a corresponding timer unit that schedules it. This provides full integration with journalctl for logging, proper dependency management, and the ability to see service status.",
    "steps": [
      "USER SAYS: 'My backup script runs from cron every night, but when it fails, I have no idea why. The logs are scattered and hard to find. Is there a better way?'",
      "AGENT: 'Yes! Modern Linux systems use systemd, which has a built-in scheduling mechanism called timers. They're like cron jobs but with much better logging, dependency management, and integration with the rest of the system.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: systemd timers vs cron...'",
      "AGENT: '[Searching] \"systemd timer replace cron job\"'",
      "AGENT: '[Found] systemd timers require two files: a `.service` file that defines what to run, and a `.timer` file that defines when to run it.'",
      "AGENT: '[Found] All output from the service goes directly to journalctl, making debugging much easier.'",
      "AGENT: '[Found] You can check timer status with `systemctl list-timers` and see the next scheduled run time.'",
      "AGENT: '‚úì Research complete! Let's convert your cron job to a systemd timer.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Create the Service Unit ---'",
      "AGENT: 'First, we create a service file that defines what to run. Let's assume your backup script is `/usr/local/bin/backup.sh`.'",
      "Run command: `sudo nano /etc/systemd/system/backup.service`",
      "AGENT: 'Add this content:'",
      "AGENT: '```ini'",
      "AGENT: '[Unit]'",
      "AGENT: 'Description=Nightly Database Backup'",
      "AGENT: 'After=network.target'",
      "AGENT: ''",
      "AGENT: '[Service]'",
      "AGENT: 'Type=oneshot'",
      "AGENT: 'ExecStart=/usr/local/bin/backup.sh'",
      "AGENT: 'User=backup'",
      "AGENT: 'StandardOutput=journal'",
      "AGENT: 'StandardError=journal'",
      "AGENT: '```'",
      "AGENT: 'Save and close. The `Type=oneshot` is perfect for scripts that run and exit.'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Create the Timer Unit ---'",
      "AGENT: 'Now we create the timer that schedules when this service runs.'",
      "Run command: `sudo nano /etc/systemd/system/backup.timer`",
      "AGENT: 'Add this content:'",
      "AGENT: '```ini'",
      "AGENT: '[Unit]'",
      "AGENT: 'Description=Nightly Backup Timer'",
      "AGENT: 'Requires=backup.service'",
      "AGENT: ''",
      "AGENT: '[Timer]'",
      "AGENT: 'OnCalendar=daily'",
      "AGENT: 'Persistent=true'",
      "AGENT: 'RandomizedDelaySec=300'",
      "AGENT: ''",
      "AGENT: '[Install]'",
      "AGENT: 'WantedBy=timers.target'",
      "AGENT: '```'",
      "AGENT: '  - `OnCalendar=daily` means it runs once per day at midnight.'",
      "AGENT: '  - `Persistent=true` means if the system was off during a scheduled run, it will run once at next boot.'",
      "AGENT: '  - `RandomizedDelaySec=300` adds up to 5 minutes of random delay to prevent all systems hitting a backup server simultaneously.'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Enable and Start the Timer ---'",
      "Run command: `sudo systemctl daemon-reload`",
      "AGENT: 'This reloads systemd to recognize the new units.'",
      "Run command: `sudo systemctl enable backup.timer`",
      "AGENT: 'Created symlink /etc/systemd/system/timers.target.wants/backup.timer ‚Üí /etc/systemd/system/backup.timer.'",
      "Run command: `sudo systemctl start backup.timer`",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Verify the Timer is Active ---'",
      "Run command: `systemctl list-timers backup.timer`",
      "AGENT: 'NEXT                        LEFT          LAST                        PASSED  UNIT          ACTIVATES'",
      "AGENT: 'Wed 2025-10-08 00:00:00 PDT 2h 45min left n/a                         n/a     backup.timer  backup.service'",
      "AGENT: '‚úì Perfect! The timer is active and will run tonight at midnight.'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Test the Service Manually ---'",
      "AGENT: 'You can trigger the backup right now to test it:'",
      "Run command: `sudo systemctl start backup.service`",
      "AGENT: 'Check the status:'",
      "Run command: `systemctl status backup.service`",
      "AGENT: '‚óè backup.service - Nightly Database Backup'",
      "AGENT: '   Loaded: loaded (/etc/systemd/system/backup.service; static)'",
      "AGENT: '   Active: inactive (dead)'",
      "AGENT: ''",
      "AGENT: 'Oct 07 21:15:23 server systemd[1]: Starting Nightly Database Backup...'",
      "AGENT: 'Oct 07 21:15:25 server backup.sh[12345]: Backing up database...'",
      "AGENT: 'Oct 07 21:15:30 server backup.sh[12345]: Backup completed successfully'",
      "AGENT: 'Oct 07 21:15:30 server systemd[1]: backup.service: Succeeded.'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: View Full Logs ---'",
      "AGENT: 'All output from your script is now in journalctl:'",
      "Run command: `journalctl -u backup.service -n 50`",
      "AGENT: 'This shows the last 50 lines of logs for your backup service. You can add `--since \"yesterday\"` or other time filters.'",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Created a systemd service unit that wraps the backup script.'",
      "AGENT: '  ‚úì Created a systemd timer unit that schedules it to run daily.'",
      "AGENT: '  ‚úì Enabled and started the timer, verified it shows up in the schedule.'",
      "AGENT: '  ‚úì Demonstrated how to manually trigger the service for testing.'",
      "AGENT: '  ‚úì Showed how all logs are centralized in journalctl with timestamps and service identification.'",
      "AGENT: '  ‚úì You now have enterprise-grade job scheduling with excellent observability! ‚è∞'"
    ],
    "commands": ["systemctl", "nano", "journalctl"],
    "packages": {
      "debian_ubuntu": ["systemd"],
      "arch": ["systemd"]
    },
    "related_commands": ["cron", "at", "anacron"],
    "complexity": "intermediate",
    "tags": ["systemd", "timer", "cron-alternative", "scheduling", "automation", "logging", "best-practices"]
  }
]

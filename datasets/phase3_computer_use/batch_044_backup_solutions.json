[
  {
    "id": "scenario_rsync_backup_001",
    "command": "rsync",
    "scenario": "User: Need automated backup solution",
    "problem": "Want to backup files to external drive",
    "solution": "Create rsync-based backup system",
    "steps": [
      "USER SAYS: 'I want to backup my files to an external drive.'",
      "AGENT: 'I'll create an automated backup system with rsync!'",
      "Check drive: lsblk",
      "AGENT: 'External drive is /dev/sdb1'",
      "Mount: sudo mkdir -p /mnt/backup && sudo mount /dev/sdb1 /mnt/backup",
      "AGENT: 'Drive mounted ✓'",
      "Test rsync: rsync -av --dry-run ~/Documents /mnt/backup/",
      "AGENT: 'Testing backup... looks good! ✓'",
      "Create backup script: cat > ~/backup.sh << 'EOF'",
      "#!/bin/bash",
      "BACKUP_DRIVE='/mnt/backup'",
      "BACKUP_DATE=$(date +%Y-%m-%d_%H-%M-%S)",
      "LOG_FILE=~/backup-logs/backup-$BACKUP_DATE.log",
      "mkdir -p ~/backup-logs",
      "echo \"=== Backup Started: $(date) ===\" | tee -a $LOG_FILE",
      "# Check if backup drive is mounted",
      "if ! mountpoint -q $BACKUP_DRIVE; then",
      "  echo 'ERROR: Backup drive not mounted!' | tee -a $LOG_FILE",
      "  exit 1",
      "fi",
      "# Backup directories",
      "DIRS=(~/Documents ~/Pictures ~/Videos ~/Projects ~/Desktop)",
      "for DIR in \"${DIRS[@]}\"; do",
      "  if [ -d \"$DIR\" ]; then",
      "    echo \"Backing up $DIR...\" | tee -a $LOG_FILE",
      "    rsync -av --delete --progress \\",
      "      --exclude='.cache' \\",
      "      --exclude='node_modules' \\",
      "      --exclude='.git' \\",
      "      \"$DIR\" \"$BACKUP_DRIVE/$(basename $DIR)/\" 2>&1 | tee -a $LOG_FILE",
      "  fi",
      "done",
      "echo \"=== Backup Completed: $(date) ===\" | tee -a $LOG_FILE",
      "echo \"✓ Backup complete! Log: $LOG_FILE\"",
      "EOF",
      "chmod +x ~/backup.sh",
      "AGENT: 'Backup script created ✓'",
      "Test: ~/backup.sh",
      "AGENT: 'Backup running... this may take a while...'",
      "USER: 'Can it run automatically?'",
      "AGENT: 'Yes! Let me schedule it...'",
      "Create cron job: (crontab -l 2>/dev/null; echo '0 2 * * * ~/backup.sh') | crontab -",
      "AGENT: 'Scheduled daily backups at 2 AM ✓'",
      "Create restore script: cat > ~/restore.sh << 'EOF'",
      "#!/bin/bash",
      "BACKUP_DRIVE='/mnt/backup'",
      "echo '=== Restore from Backup ==='",
      "echo ''",
      "if ! mountpoint -q $BACKUP_DRIVE; then",
      "  echo 'ERROR: Backup drive not mounted!'",
      "  exit 1",
      "fi",
      "echo 'Available backups:'",
      "ls -1 $BACKUP_DRIVE",
      "echo ''",
      "read -p 'Directory to restore: ' DIR",
      "read -p 'Restore to (leave blank for original location): ' DEST",
      "if [ -z \"$DEST\" ]; then",
      "  DEST=~/$DIR",
      "fi",
      "echo ''",
      "echo \"Restoring $DIR to $DEST...\"",
      "rsync -av --progress $BACKUP_DRIVE/$DIR/ $DEST/",
      "echo '✓ Restore complete!'",
      "EOF",
      "chmod +x ~/restore.sh",
      "Create backup manager: cat > ~/backup-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Backup Manager ==='",
      "echo ''",
      "echo '1. Run backup now'",
      "echo '2. View backup logs'",
      "echo '3. Check backup size'",
      "echo '4. Restore from backup'",
      "echo '5. Verify backup integrity'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) ~/backup.sh ;;",
      "  2) ls -lt ~/backup-logs/*.log | head -5; read -p 'View which log: ' LOG; less ~/backup-logs/$LOG ;;",
      "  3) du -sh /mnt/backup/* ;;",
      "  4) ~/restore.sh ;;",
      "  5) echo 'Checking backup...'; diff -r ~/Documents /mnt/backup/Documents ;;",
      "esac",
      "EOF",
      "chmod +x ~/backup-manage.sh",
      "AGENT: 'Backup system complete! ✓'",
      "AGENT: 'Your files are now protected ✓'"
    ],
    "commands": ["rsync", "mount", "crontab", "diff"],
    "packages": {"debian_ubuntu": ["rsync"], "arch": ["rsync"]},
    "related_commands": ["rsync", "rclone", "duplicity"],
    "complexity": "intermediate",
    "tags": ["backup", "rsync", "data-protection", "automation", "recovery", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_timeshift_system_snapshots_001",
    "command": "timeshift",
    "scenario": "User: Want system restore points like Windows",
    "problem": "System breaks after updates, need rollback",
    "solution": "Setup Timeshift for system snapshots",
    "steps": [
      "USER SAYS: 'An update broke my system. I wish I could go back!'",
      "AGENT: 'Timeshift can do that! Let me set it up for future protection...'",
      "Install: sudo apt install timeshift || sudo pacman -S timeshift",
      "AGENT: 'Timeshift installed ✓'",
      "Start GUI: sudo timeshift-gtk &",
      "AGENT: 'Configuration wizard:'",
      "AGENT: '1. Select snapshot type: RSYNC (works on all filesystems)'",
      "AGENT: '2. Select location: your root partition'",
      "AGENT: '3. Schedule: Daily (keep 5), Weekly (keep 3), Monthly (keep 2)'",
      "AGENT: '4. Include @home: NO (saves space, only protects system)'",
      "Create snapshot: sudo timeshift --create --comments 'Initial snapshot' --tags D",
      "AGENT: 'First snapshot created! ✓'",
      "List: sudo timeshift --list",
      "AGENT: 'Available snapshots listed ✓'",
      "USER: 'How do I restore?'",
      "AGENT: 'Easy! From GUI or CLI:'",
      "Restore: sudo timeshift --restore --snapshot '2025-10-07_12-30-45'",
      "AGENT: 'Or use the GUI: Timeshift → Select snapshot → Restore'",
      "USER: 'What if the system won't boot?'",
      "AGENT: 'Boot from live USB and restore:'",
      "Live USB restore: AGENT: '1. Boot live USB'",
      "AGENT: '2. Install timeshift: sudo apt install timeshift'",
      "AGENT: '3. Run: sudo timeshift --restore'",
      "AGENT: '4. Reboot - system restored! ✓'",
      "Create snapshot script: cat > ~/snapshot-create.sh << 'EOF'",
      "#!/bin/bash",
      "read -p 'Snapshot comment: ' COMMENT",
      "sudo timeshift --create --comments \"$COMMENT\" --tags O",
      "echo '✓ Snapshot created'",
      "sudo timeshift --list | tail -5",
      "EOF",
      "chmod +x ~/snapshot-create.sh",
      "Create restore script: cat > ~/snapshot-restore.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Available Snapshots ==='",
      "sudo timeshift --list",
      "echo ''",
      "read -p 'Snapshot to restore (date-time): ' SNAP",
      "if [ -n \"$SNAP\" ]; then",
      "  echo 'WARNING: This will restore your system!'",
      "  read -p 'Continue? (yes/no): ' CONFIRM",
      "  if [ \"$CONFIRM\" == 'yes' ]; then",
      "    sudo timeshift --restore --snapshot \"$SNAP\"",
      "  fi",
      "fi",
      "EOF",
      "chmod +x ~/snapshot-restore.sh",
      "Create pre-update snapshot: cat > ~/pre-update.sh << 'EOF'",
      "#!/bin/bash",
      "echo 'Creating pre-update snapshot...'",
      "sudo timeshift --create --comments 'Before system update' --tags O",
      "echo '✓ Snapshot created'",
      "echo ''",
      "echo 'Now running system update...'",
      "if command -v apt &>/dev/null; then",
      "  sudo apt update && sudo apt upgrade",
      "elif command -v pacman &>/dev/null; then",
      "  sudo pacman -Syu",
      "fi",
      "echo ''",
      "echo '✓ Update complete with safety snapshot!'",
      "EOF",
      "chmod +x ~/pre-update.sh",
      "AGENT: 'Timeshift configured! ✓'",
      "AGENT: 'Use ~/pre-update.sh before updates for safety ✓'"
    ],
    "commands": ["timeshift"],
    "packages": {"debian_ubuntu": ["timeshift"], "arch": ["timeshift"]},
    "related_commands": ["timeshift", "rsync"],
    "complexity": "intermediate",
    "tags": ["backup", "timeshift", "snapshots", "recovery", "system-restore", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_borg_backup_001",
    "command": "borg",
    "scenario": "User: Need encrypted, deduplicated backups",
    "problem": "Want efficient, secure remote backups",
    "solution": "Setup BorgBackup for professional backups",
    "steps": [
      "USER SAYS: 'I want to backup to a remote server with encryption.'",
      "AGENT: 'BorgBackup is perfect! It's encrypted and deduplicates data. Let me set it up...'",
      "Install: sudo apt install borgbackup || sudo pacman -S borg",
      "AGENT: 'BorgBackup installed ✓'",
      "Initialize repo: borg init --encryption=repokey /mnt/backup/borg-repo",
      "AGENT: 'Enter encryption passphrase (save it somewhere safe!)'",
      "AGENT: 'Repository created and encrypted ✓'",
      "First backup: borg create /mnt/backup/borg-repo::first-backup ~/Documents ~/Pictures",
      "AGENT: 'First backup running...'",
      "AGENT: 'Backup complete! ✓'",
      "List archives: borg list /mnt/backup/borg-repo",
      "AGENT: 'Available backups listed ✓'",
      "USER: 'How much space did it use?'",
      "Check space: borg info /mnt/backup/borg-repo::first-backup",
      "AGENT: 'Original size: 15GB'",
      "AGENT: 'Compressed size: 12GB'",
      "AGENT: 'Deduplicated size: 12GB (first backup, no dedup yet)'",
      "Second backup: borg create /mnt/backup/borg-repo::second-backup ~/Documents ~/Pictures",
      "Check again: borg info /mnt/backup/borg-repo::second-backup",
      "AGENT: 'Second backup:'",
      "AGENT: 'Original size: 15GB'",
      "AGENT: 'New data: 500MB'",
      "AGENT: 'Saved: 14.5GB (deduplication working!) ✓'",
      "USER: 'How do I restore?'",
      "AGENT: 'Extract specific files or full backup:'",
      "Extract: borg extract /mnt/backup/borg-repo::first-backup",
      "List contents: borg list /mnt/backup/borg-repo::first-backup",
      "Create automated backup: cat > ~/borg-backup.sh << 'EOF'",
      "#!/bin/bash",
      "REPO='/mnt/backup/borg-repo'",
      "BACKUP_NAME=$(hostname)-$(date +%Y-%m-%d_%H-%M)",
      "export BORG_PASSPHRASE='your-passphrase-here'",
      "echo \"=== Borg Backup Started: $(date) ===\"",
      "borg create \\",
      "  --verbose \\",
      "  --stats \\",
      "  --progress \\",
      "  --compression lz4 \\",
      "  --exclude='*.cache' \\",
      "  --exclude='node_modules' \\",
      "  $REPO::$BACKUP_NAME \\",
      "  ~/Documents \\",
      "  ~/Pictures \\",
      "  ~/Videos \\",
      "  ~/Projects",
      "echo ''",
      "echo 'Pruning old backups...'",
      "borg prune \\",
      "  --keep-daily=7 \\",
      "  --keep-weekly=4 \\",
      "  --keep-monthly=6 \\",
      "  $REPO",
      "echo \"=== Backup Complete: $(date) ===\"",
      "unset BORG_PASSPHRASE",
      "EOF",
      "chmod +x ~/borg-backup.sh",
      "AGENT: 'WARNING: Edit script and add your passphrase!'",
      "Create restore script: cat > ~/borg-restore.sh << 'EOF'",
      "#!/bin/bash",
      "REPO='/mnt/backup/borg-repo'",
      "export BORG_PASSPHRASE='your-passphrase-here'",
      "echo '=== Available Backups ==='",
      "borg list $REPO",
      "echo ''",
      "read -p 'Backup to restore: ' BACKUP",
      "read -p 'Restore to (current dir if blank): ' DEST",
      "DEST=${DEST:-.}",
      "borg extract $REPO::$BACKUP --target $DEST",
      "echo '✓ Restore complete!'",
      "unset BORG_PASSPHRASE",
      "EOF",
      "chmod +x ~/borg-restore.sh",
      "Schedule: (crontab -l 2>/dev/null; echo '0 3 * * * ~/borg-backup.sh') | crontab -",
      "AGENT: 'Scheduled daily encrypted backups at 3 AM ✓'",
      "AGENT: 'Your data is now professionally protected! ✓'"
    ],
    "commands": ["borg"],
    "packages": {"debian_ubuntu": ["borgbackup"], "arch": ["borg"]},
    "related_commands": ["borg", "restic"],
    "complexity": "advanced",
    "tags": ["backup", "borg", "encryption", "deduplication", "remote-backup", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_rclone_cloud_backup_001",
    "command": "rclone",
    "scenario": "User: Want to backup to Google Drive/Cloud",
    "problem": "Need automated cloud backups",
    "solution": "Setup rclone for cloud synchronization",
    "steps": [
      "USER SAYS: 'I want to backup my files to Google Drive automatically.'",
      "AGENT: 'rclone is perfect for cloud backups! Let me configure it...'",
      "Install: sudo apt install rclone || sudo pacman -S rclone",
      "AGENT: 'rclone installed ✓'",
      "Configure: rclone config",
      "AGENT: 'Configuration wizard:'",
      "AGENT: '1. n (new remote)'",
      "AGENT: '2. Name: gdrive'",
      "AGENT: '3. Storage: drive (Google Drive)'",
      "AGENT: '4. client_id: (leave blank)'",
      "AGENT: '5. scope: 1 (full access)'",
      "AGENT: '6. Auto config: y'",
      "AGENT: '7. Browser opens - authorize rclone'",
      "AGENT: '8. Team Drive: n'",
      "AGENT: '9. Confirm: y'",
      "AGENT: 'Google Drive connected! ✓'",
      "List: rclone lsd gdrive:",
      "AGENT: 'Your Google Drive folders listed ✓'",
      "Test copy: rclone copy ~/Documents gdrive:Backup/Documents -P",
      "AGENT: 'Uploading files...'",
      "AGENT: 'Upload complete! ✓'",
      "USER: 'Can it sync automatically?'",
      "AGENT: 'Yes! Let me create sync scripts...'",
      "Create sync script: cat > ~/cloud-sync.sh << 'EOF'",
      "#!/bin/bash",
      "LOG_FILE=~/rclone-logs/sync-$(date +%Y-%m-%d).log",
      "mkdir -p ~/rclone-logs",
      "echo \"=== Cloud Sync Started: $(date) ===\" | tee -a $LOG_FILE",
      "# Sync directories to cloud",
      "DIRS=('Documents' 'Pictures' 'Projects')",
      "for DIR in \"${DIRS[@]}\"; do",
      "  echo \"Syncing $DIR...\" | tee -a $LOG_FILE",
      "  rclone sync ~/$DIR gdrive:Backup/$DIR \\",
      "    --progress \\",
      "    --exclude '.cache/**' \\",
      "    --exclude 'node_modules/**' \\",
      "    --log-file=$LOG_FILE",
      "done",
      "echo \"=== Sync Complete: $(date) ===\" | tee -a $LOG_FILE",
      "EOF",
      "chmod +x ~/cloud-sync.sh",
      "AGENT: 'Sync script created ✓'",
      "Schedule: (crontab -l 2>/dev/null; echo '0 4 * * * ~/cloud-sync.sh') | crontab -",
      "AGENT: 'Scheduled daily cloud sync at 4 AM ✓'",
      "Create restore script: cat > ~/cloud-restore.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Cloud Restore ==='",
      "echo ''",
      "echo 'Available backups:'",
      "rclone lsd gdrive:Backup",
      "echo ''",
      "read -p 'Directory to restore: ' DIR",
      "read -p 'Restore to (~/$DIR): ' DEST",
      "DEST=${DEST:-~/$DIR}",
      "echo \"Restoring $DIR to $DEST...\"",
      "rclone sync gdrive:Backup/$DIR $DEST --progress",
      "echo '✓ Restore complete!'",
      "EOF",
      "chmod +x ~/cloud-restore.sh",
      "Create cloud manager: cat > ~/cloud-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Cloud Storage Manager ==='",
      "echo ''",
      "echo '1. Sync to cloud now'",
      "echo '2. Restore from cloud'",
      "echo '3. View cloud contents'",
      "echo '4. Check sync status'",
      "echo '5. Mount cloud as drive'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) ~/cloud-sync.sh ;;",
      "  2) ~/cloud-restore.sh ;;",
      "  3) rclone ls gdrive:Backup ;;",
      "  4) tail -20 ~/rclone-logs/sync-$(date +%Y-%m-%d).log ;;",
      "  5) mkdir -p ~/gdrive && rclone mount gdrive: ~/gdrive --daemon && echo 'Mounted at ~/gdrive' ;;",
      "esac",
      "EOF",
      "chmod +x ~/cloud-manage.sh",
      "AGENT: 'Cloud backup system complete! ✓'",
      "AGENT: 'Your files sync to Google Drive automatically ✓'"
    ],
    "commands": ["rclone"],
    "packages": {"debian_ubuntu": ["rclone"], "arch": ["rclone"]},
    "related_commands": ["rclone", "google-drive-ocamlfuse"],
    "complexity": "intermediate",
    "tags": ["backup", "rclone", "cloud", "google-drive", "sync", "automation", "real-world", "ai-agent"]
  }
]

[
  {
    "id": "scenario_backup_strategies_141",
    "command": "rsync",
    "scenario": "Implement comprehensive backup strategies with rsync, tar, and automation.",
    "problem": "Need reliable backup solution for critical data, implement incremental backups, automate backup schedule, verify backup integrity, store backups securely offsite, and test restore procedures.",
    "solution": "Use rsync for incremental backups, tar for full archives, create automated backup scripts with cron, implement 3-2-1 backup rule, encrypt sensitive backups, and maintain backup rotation.",
    "steps": [
      "USER SAYS: 'I need a robust backup strategy for my servers. How do I set up automated, reliable backups?'",
      "AGENT: 'Let me show you comprehensive backup implementation!'",
      "AGENT: ''",
      "AGENT: '3-2-1 Backup Rule:'",
      "AGENT: '  • 3 copies of data'",
      "AGENT: '  • 2 different media types'",
      "AGENT: '  • 1 copy offsite'",
      "AGENT: ''",
      "Create tool: `cat > /usr/local/bin/backup-full.sh << 'EOF'`",
      "#!/bin/bash\n\n# Full backup script\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/backups\"\nSOURCE=\"/var/www /etc /home\"\nLOG=\"/var/log/backup.log\"\nRETENTION_DAYS=30\n\necho \"[$(date)] Starting full backup...\" >> $LOG\n\n# Create backup\ntar -czpf $BACKUP_DIR/full-backup-$DATE.tar.gz $SOURCE 2>> $LOG\n\nif [ $? -eq 0 ]; then\n  echo \"[$(date)] Full backup successful: full-backup-$DATE.tar.gz\" >> $LOG\n  \n  # Verify backup\n  tar -tzf $BACKUP_DIR/full-backup-$DATE.tar.gz > /dev/null 2>&1\n  if [ $? -eq 0 ]; then\n    echo \"[$(date)] Backup verification successful\" >> $LOG\n  else\n    echo \"[$(date)] ERROR: Backup verification failed!\" >> $LOG\n    exit 1\n  fi\n  \n  # Generate checksum\n  sha256sum $BACKUP_DIR/full-backup-$DATE.tar.gz > $BACKUP_DIR/full-backup-$DATE.tar.gz.sha256\n  \n  # Remove old backups\n  find $BACKUP_DIR -name \"full-backup-*.tar.gz\" -mtime +$RETENTION_DAYS -delete\n  echo \"[$(date)] Removed backups older than $RETENTION_DAYS days\" >> $LOG\n  \nelse\n  echo \"[$(date)] ERROR: Backup failed!\" >> $LOG\n  exit 1\nfi\n\necho \"[$(date)] Backup complete\" >> $LOG\nEOF",
      "Run command: `sudo chmod +x /usr/local/bin/backup-full.sh`",
      "AGENT: ''",
      "Create tool: `cat > /usr/local/bin/backup-incremental.sh << 'EOF'`",
      "#!/bin/bash\n\n# Incremental backup with rsync\nDATE=$(date +%Y%m%d_%H%M%S)\nSOURCE=\"/var/www\"\nBACKUP_BASE=\"/backups/incremental\"\nCURRENT=\"$BACKUP_BASE/current\"\nLAST_BACKUP=$(ls -td $BACKUP_BASE/backup-* 2>/dev/null | head -1)\nNEW_BACKUP=\"$BACKUP_BASE/backup-$DATE\"\nLOG=\"/var/log/backup.log\"\n\necho \"[$(date)] Starting incremental backup...\" >> $LOG\n\nmkdir -p $BACKUP_BASE\n\nif [ -z \"$LAST_BACKUP\" ]; then\n  # First backup\n  echo \"[$(date)] Creating initial backup\" >> $LOG\n  rsync -av --delete $SOURCE $NEW_BACKUP >> $LOG 2>&1\nelse\n  # Incremental backup using hard links\n  echo \"[$(date)] Creating incremental backup from $LAST_BACKUP\" >> $LOG\n  rsync -av --delete --link-dest=$LAST_BACKUP $SOURCE $NEW_BACKUP >> $LOG 2>&1\nfi\n\nif [ $? -eq 0 ]; then\n  # Update current symlink\n  rm -f $CURRENT\n  ln -s $NEW_BACKUP $CURRENT\n  echo \"[$(date)] Incremental backup successful\" >> $LOG\n  \n  # Keep only last 7 incremental backups\n  ls -td $BACKUP_BASE/backup-* | tail -n +8 | xargs rm -rf\n  echo \"[$(date)] Cleaned old incremental backups\" >> $LOG\nelse\n  echo \"[$(date)] ERROR: Incremental backup failed!\" >> $LOG\n  exit 1\nfi\nEOF",
      "Run command: `sudo chmod +x /usr/local/bin/backup-incremental.sh`",
      "AGENT: ''",
      "Create tool: `cat > /usr/local/bin/backup-offsite.sh << 'EOF'`",
      "#!/bin/bash\n\n# Offsite backup via rsync over SSH\nSOURCE=\"/backups\"\nREMOTE_USER=\"backup\"\nREMOTE_HOST=\"backup-server.example.com\"\nREMOTE_PATH=\"/remote-backups/$(hostname)\"\nLOG=\"/var/log/backup.log\"\n\necho \"[$(date)] Starting offsite sync...\" >> $LOG\n\nrsync -avz --delete \\\n  -e \"ssh -i /root/.ssh/backup_key -o StrictHostKeyChecking=no\" \\\n  $SOURCE/ $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH >> $LOG 2>&1\n\nif [ $? -eq 0 ]; then\n  echo \"[$(date)] Offsite backup successful\" >> $LOG\nelse\n  echo \"[$(date)] ERROR: Offsite backup failed!\" >> $LOG\n  # Send alert\n  echo \"Offsite backup failed on $(hostname)\" | mail -s \"Backup Alert\" admin@example.com\n  exit 1\nfi\nEOF",
      "Run command: `sudo chmod +x /usr/local/bin/backup-offsite.sh`",
      "AGENT: ''",
      "Create tool: `cat > /usr/local/bin/backup-database.sh << 'EOF'`",
      "#!/bin/bash\n\n# Database backup script\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/backups/databases\"\nLOG=\"/var/log/backup.log\"\nDB_USER=\"backup_user\"\nDB_PASS=\"backup_password\"\n\nmkdir -p $BACKUP_DIR\n\necho \"[$(date)] Starting database backup...\" >> $LOG\n\n# Backup all MySQL databases\nmysqldump -u $DB_USER -p$DB_PASS --all-databases --single-transaction \\\n  | gzip > $BACKUP_DIR/mysql-all-$DATE.sql.gz\n\nif [ $? -eq 0 ]; then\n  echo \"[$(date)] MySQL backup successful\" >> $LOG\nelse\n  echo \"[$(date)] ERROR: MySQL backup failed!\" >> $LOG\n  exit 1\nfi\n\n# Backup PostgreSQL databases\nsudo -u postgres pg_dumpall | gzip > $BACKUP_DIR/postgres-all-$DATE.sql.gz\n\nif [ $? -eq 0 ]; then\n  echo \"[$(date)] PostgreSQL backup successful\" >> $LOG\nelse\n  echo \"[$(date)] ERROR: PostgreSQL backup failed!\" >> $LOG\n  exit 1\nfi\n\n# Remove old database backups (keep 14 days)\nfind $BACKUP_DIR -name \"*-all-*.sql.gz\" -mtime +14 -delete\n\necho \"[$(date)] Database backup complete\" >> $LOG\nEOF",
      "Run command: `sudo chmod +x /usr/local/bin/backup-database.sh`",
      "AGENT: ''",
      "Run command: `sudo crontab -e`",
      "AGENT: 'Add backup schedule:'",
      "AGENT: ''",
      "AGENT: '# Full backup - Weekly on Sunday at 2 AM'",
      "AGENT: '0 2 * * 0 /usr/local/bin/backup-full.sh'",
      "AGENT: ''",
      "AGENT: '# Incremental backup - Daily at 3 AM'",
      "AGENT: '0 3 * * * /usr/local/bin/backup-incremental.sh'",
      "AGENT: ''",
      "AGENT: '# Database backup - Twice daily'",
      "AGENT: '0 2,14 * * * /usr/local/bin/backup-database.sh'",
      "AGENT: ''",
      "AGENT: '# Offsite sync - Daily at 4 AM'",
      "AGENT: '0 4 * * * /usr/local/bin/backup-offsite.sh'",
      "AGENT: ''",
      "AGENT: '# Backup log rotation - Weekly'",
      "AGENT: '0 5 * * 0 /usr/sbin/logrotate /etc/logrotate.d/backup'",
      "AGENT: ''",
      "Run command: `sudo /usr/local/bin/backup-full.sh`",
      "AGENT: 'Test full backup manually'",
      "AGENT: ''",
      "Run command: `tail -f /var/log/backup.log`",
      "AGENT: '[2025-10-08 18:30:00] Starting full backup...'",
      "AGENT: '[2025-10-08 18:35:23] Full backup successful: full-backup-20251008_183000.tar.gz'",
      "AGENT: '[2025-10-08 18:35:25] Backup verification successful'",
      "AGENT: '[2025-10-08 18:35:26] Backup complete'",
      "AGENT: ''",
      "Run command: `ls -lh /backups/*.tar.gz`",
      "AGENT: '-rw-r--r-- 1 root root 1.2G Oct  8 18:35 full-backup-20251008_183000.tar.gz'",
      "AGENT: ''",
      "Run command: `sha256sum -c /backups/full-backup-20251008_183000.tar.gz.sha256`",
      "AGENT: 'full-backup-20251008_183000.tar.gz: OK'",
      "AGENT: '✓ Backup integrity verified'",
      "AGENT: ''",
      "AGENT: 'Test restore procedure:'",
      "Run command: `mkdir -p /tmp/restore-test`",
      "Run command: `tar -xzf /backups/full-backup-20251008_183000.tar.gz -C /tmp/restore-test`",
      "Run command: `ls /tmp/restore-test`",
      "AGENT: 'var/  etc/  home/'",
      "AGENT: '✓ Restore test successful!'",
      "AGENT: ''",
      "Create tool: `cat > /usr/local/bin/backup-monitor.sh << 'EOF'`",
      "#!/bin/bash\n\n# Monitor backup success\nLAST_BACKUP=$(find /backups -name \"full-backup-*.tar.gz\" -mtime -2 | wc -l)\n\nif [ $LAST_BACKUP -eq 0 ]; then\n  echo \"WARNING: No backup found in last 48 hours!\" | mail -s \"Backup Alert\" admin@example.com\nfi\n\n# Check backup size\nBACKUP_SIZE=$(du -sh /backups | awk '{print $1}')\necho \"Backup storage usage: $BACKUP_SIZE\" >> /var/log/backup-monitor.log\nEOF",
      "Run command: `sudo chmod +x /usr/local/bin/backup-monitor.sh`",
      "AGENT: ''",
      "Run command: `(crontab -l; echo \"0 6 * * * /usr/local/bin/backup-monitor.sh\") | crontab -`",
      "AGENT: 'Monitor backups daily at 6 AM'",
      "AGENT: ''",
      "AGENT: 'Backup strategy implemented:'",
      "AGENT: '  ✓ Full weekly backups with tar'",
      "AGENT: '  ✓ Daily incremental with rsync'",
      "AGENT: '  ✓ Database backups twice daily'",
      "AGENT: '  ✓ Offsite replication'",
      "AGENT: '  ✓ Automated with cron'",
      "AGENT: '  ✓ Integrity verification'",
      "AGENT: '  ✓ Retention policies'",
      "AGENT: '  ✓ Monitoring and alerts'",
      "AGENT: '  ✓ Tested restore procedure'"
    ],
    "commands": ["rsync", "tar", "crontab", "mysqldump", "pg_dumpall", "sha256sum", "find"],
    "packages": {
      "debian_ubuntu": ["rsync", "tar", "cron", "mysql-client", "postgresql-client", "mailutils"],
      "arch": ["rsync", "tar", "cronie", "mariadb-clients", "postgresql", "mailutils"]
    },
    "related_commands": ["borgbackup", "restic", "duplicity", "rclone"],
    "complexity": "advanced",
    "tags": ["backup", "rsync", "tar", "automation", "disaster-recovery", "cron", "databases"]
  }
]
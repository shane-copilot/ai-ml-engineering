[
  {
    "id": "scenario_tcpdump_capture_http_traffic_087",
    "command": "tcpdump",
    "scenario": "Capture and analyze HTTP traffic to debug API communication issues.",
    "problem": "A developer's application is making API calls to a backend server, but they're getting inconsistent responses. They need to see exactly what HTTP requests and responses are being sent over the network to diagnose whether the problem is with the client code or the server.",
    "solution": "Use tcpdump to capture network packets on the interface, filter for HTTP traffic on port 80 or 443, save to a pcap file, and then use tcpdump or Wireshark to analyze the captured data. Show how to read HTTP headers and payloads from the packet capture.",
    "steps": [
      "USER SAYS: 'My app is calling an API at http://api.example.com and sometimes it works, sometimes I get weird responses. How can I see exactly what's being sent over the network?'",
      "AGENT: 'Perfect use case for tcpdump! It's a powerful packet analyzer that lets you capture raw network traffic and inspect it in detail. Let me show you how to capture and analyze HTTP traffic.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: Capturing HTTP traffic with tcpdump...'",
      "AGENT: '[Searching] \"tcpdump capture http traffic example\"'",
      "AGENT: '[Found] tcpdump captures packets at the network layer. For HTTP (port 80), we can filter by port and host.'",
      "AGENT: '[Found] The `-A` flag prints packets in ASCII, making HTTP headers readable.'",
      "AGENT: '[Found] The `-w` flag saves to a pcap file for later analysis with Wireshark.'",
      "AGENT: '[Found] You need root privileges to capture packets.'",
      "AGENT: '‚úì Research complete! Let's capture some traffic.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Live Capture with ASCII Output ---'",
      "AGENT: 'First, let's identify your network interface:'",
      "Run command: `ip addr show | grep 'state UP'`",
      "AGENT: '2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500'",
      "AGENT: 'Your active interface is `eth0`. Now let's capture HTTP traffic in real-time:'",
      "Run command: `sudo tcpdump -i eth0 -A 'tcp port 80 and host api.example.com'`",
      "AGENT: 'tcpdump: verbose output suppressed, use -v[v]... for full protocol decode'",
      "AGENT: 'listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes'",
      "AGENT: ''",
      "AGENT: 'Now, trigger your API call from another terminal. You'll see output like:'",
      "AGENT: ''",
      "AGENT: '21:30:15.123456 IP laptop.45678 > api.example.com.80: Flags [P.], seq 1:234, ack 1, win 502, length 233'",
      "AGENT: 'E.....)@.@...'",
      "AGENT: '........P....5.P....GET /api/users/123 HTTP/1.1'",
      "AGENT: 'Host: api.example.com'",
      "AGENT: 'User-Agent: MyApp/1.0'",
      "AGENT: 'Accept: application/json'",
      "AGENT: ''",
      "AGENT: '21:30:15.234567 IP api.example.com.80 > laptop.45678: Flags [P.], seq 1:456, ack 234, win 502, length 455'",
      "AGENT: 'HTTP/1.1 200 OK'",
      "AGENT: 'Content-Type: application/json'",
      "AGENT: 'Content-Length: 125'",
      "AGENT: ''",
      "AGENT: '{\"id\":123,\"name\":\"John Doe\",\"email\":\"john@example.com\"}'",
      "AGENT: ''",
      "AGENT: 'üí° Great! You can see the exact HTTP request (GET /api/users/123) and the response (200 OK with JSON body).'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Capture to File for Detailed Analysis ---'",
      "AGENT: 'For better analysis, especially if traffic is fast, capture to a file:'",
      "Run command: `sudo tcpdump -i eth0 -w api_capture.pcap 'tcp port 80 and host api.example.com'`",
      "AGENT: 'tcpdump: listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes'",
      "AGENT: ''",
      "AGENT: 'Let it run while you trigger several API calls. Press Ctrl+C to stop:'",
      "AGENT: ''",
      "AGENT: '^C123 packets captured'",
      "AGENT: '125 packets received by filter'",
      "AGENT: '0 packets dropped by kernel'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Analyze the Capture File ---'",
      "AGENT: 'Now read the captured packets with readable output:'",
      "Run command: `tcpdump -A -r api_capture.pcap | less`",
      "AGENT: 'This opens the capture in a pager where you can scroll through all the HTTP traffic.'",
      "AGENT: ''",
      "AGENT: 'Or filter for specific things, like only HTTP responses:'",
      "Run command: `tcpdump -A -r api_capture.pcap | grep -A 10 'HTTP/1.1'`",
      "AGENT: 'HTTP/1.1 200 OK'",
      "AGENT: 'HTTP/1.1 404 Not Found'",
      "AGENT: 'HTTP/1.1 500 Internal Server Error'",
      "AGENT: ''",
      "AGENT: 'üí° AHA! You found it! Some responses are returning 500 errors. Now you know the server is having issues, not your client code.'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Advanced Filtering ---'",
      "AGENT: 'You can get even more specific. For example, only capture POST requests:'",
      "Run command: `sudo tcpdump -A -i eth0 'tcp port 80 and (tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504f5354)'`",
      "AGENT: 'This captures packets containing \"POST\" in ASCII (0x50=P, 0x4f=O, 0x53=S, 0x54=T).'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Use Wireshark for GUI Analysis (Optional) ---'",
      "AGENT: 'If you prefer a graphical tool, open the pcap file in Wireshark:'",
      "Run command: `wireshark api_capture.pcap &`",
      "AGENT: 'Wireshark provides a nice interface to filter, search, and follow HTTP streams.'",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Used tcpdump to capture live HTTP traffic with ASCII output for immediate inspection.'",
      "AGENT: '  ‚úì Saved captures to a pcap file for detailed offline analysis.'",
      "AGENT: '  ‚úì Filtered and searched the captured data to identify 500 errors from the server.'",
      "AGENT: '  ‚úì Showed advanced filtering techniques for specific HTTP methods.'",
      "AGENT: '  ‚úì You now have definitive proof of what's happening on the wire, perfect for debugging API issues or proving whether problems are client-side or server-side! üì°'"
    ],
    "commands": ["tcpdump", "ip", "grep", "less", "wireshark"],
    "packages": {
      "debian_ubuntu": ["tcpdump", "iproute2", "wireshark"],
      "arch": ["tcpdump", "iproute2", "wireshark-qt"]
    },
    "related_commands": ["tshark", "ngrep", "nethogs", "iftop"],
    "complexity": "intermediate",
    "tags": ["networking", "tcpdump", "packet-capture", "http", "debugging", "api", "wireshark", "troubleshooting"]
  },
  {
    "id": "scenario_lvm_extend_volume_088",
    "command": "lvm",
    "scenario": "Extend a logical volume and filesystem to use newly added disk space.",
    "problem": "A production server's `/var` partition is running out of space. A new physical disk has been added to the system, and the user needs to add this space to the existing logical volume without downtime or data loss.",
    "solution": "Use LVM (Logical Volume Manager) to add the new disk as a physical volume, extend the volume group, extend the logical volume, and finally resize the filesystem to use the new space. All operations can be done on a live, mounted filesystem.",
    "steps": [
      "USER SAYS: 'Our `/var` partition is at 95% full and we just added a new 500GB disk to the server. How do I add this space to `/var` without taking the system offline?'",
      "AGENT: 'Great question! This is exactly what LVM (Logical Volume Manager) was designed for. If your `/var` is on LVM, you can extend it online without any downtime. Let me research the exact steps.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: LVM online volume extension...'",
      "AGENT: '[Searching] \"lvm extend logical volume add new disk\"'",
      "AGENT: '[Found] The workflow: 1) Create physical volume from new disk, 2) Extend volume group, 3) Extend logical volume, 4) Resize filesystem.'",
      "AGENT: '[Found] For ext4 filesystems, `resize2fs` can extend while mounted. For xfs, use `xfs_growfs`.'",
      "AGENT: '[Found] Always check current state with `pvs`, `vgs`, and `lvs` before making changes.'",
      "AGENT: '‚úì Research complete! Let's extend that volume.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Verify Current State ---'",
      "AGENT: 'First, let's see the current LVM configuration:'",
      "Run command: `sudo pvs`",
      "AGENT: '  PV         VG        Fmt  Attr PSize   PFree'",
      "AGENT: '  /dev/sda3  vg-main   lvm2 a--  100.00g    0'",
      "AGENT: ''",
      "Run command: `sudo vgs`",
      "AGENT: '  VG      #PV #LV #SN Attr   VSize   VFree'",
      "AGENT: '  vg-main   1   3   0 wz--n- 100.00g    0'",
      "AGENT: ''",
      "Run command: `sudo lvs`",
      "AGENT: '  LV     VG      Attr       LSize  Pool Origin Data%  Meta%'",
      "AGENT: '  lv-var vg-main -wi-ao---- 50.00g'",
      "AGENT: '  lv-root vg-main -wi-ao---- 40.00g'",
      "AGENT: '  lv-swap vg-main -wi-ao---- 10.00g'",
      "AGENT: ''",
      "AGENT: 'Good! You have a volume group `vg-main` with no free space. Let's check the new disk:'",
      "Run command: `lsblk`",
      "AGENT: 'NAME            MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT'",
      "AGENT: 'sda               8:0    0   100G  0 disk'",
      "AGENT: '‚îî‚îÄsda3            8:3    0   100G  0 part'",
      "AGENT: '  ‚îú‚îÄvg-main-lv-root 254:0    0    40G  0 lvm  /'",
      "AGENT: '  ‚îú‚îÄvg-main-lv-var  254:1    0    50G  0 lvm  /var'",
      "AGENT: '  ‚îî‚îÄvg-main-lv-swap 254:2    0    10G  0 lvm  [SWAP]'",
      "AGENT: 'sdb               8:16   0   500G  0 disk'",
      "AGENT: ''",
      "AGENT: 'Perfect! The new disk is `/dev/sdb` and it's empty.'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Create Physical Volume ---'",
      "AGENT: 'Initialize the new disk as an LVM physical volume:'",
      "Run command: `sudo pvcreate /dev/sdb`",
      "AGENT: '  Physical volume \"/dev/sdb\" successfully created.'",
      "AGENT: ''",
      "Run command: `sudo pvs`",
      "AGENT: '  PV         VG        Fmt  Attr PSize   PFree'",
      "AGENT: '  /dev/sda3  vg-main   lvm2 a--  100.00g     0'",
      "AGENT: '  /dev/sdb             lvm2 ---  500.00g 500.00g'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Extend Volume Group ---'",
      "AGENT: 'Add the new physical volume to the existing volume group:'",
      "Run command: `sudo vgextend vg-main /dev/sdb`",
      "AGENT: '  Volume group \"vg-main\" successfully extended'",
      "AGENT: ''",
      "Run command: `sudo vgs`",
      "AGENT: '  VG      #PV #LV #SN Attr   VSize   VFree'",
      "AGENT: '  vg-main   2   3   0 wz--n- 600.00g 500.00g'",
      "AGENT: ''",
      "AGENT: 'Excellent! The volume group now has 500GB of free space.'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Extend Logical Volume ---'",
      "AGENT: 'Now extend the `/var` logical volume. Let's add all 500GB:'",
      "Run command: `sudo lvextend -L +500G /dev/vg-main/lv-var`",
      "AGENT: '  Size of logical volume vg-main/lv-var changed from 50.00 GiB to 550.00 GiB.'",
      "AGENT: '  Logical volume vg-main/lv-var successfully resized.'",
      "AGENT: ''",
      "AGENT: 'Alternatively, you can use percentages: `sudo lvextend -l +100%FREE /dev/vg-main/lv-var` to use all available space.'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Resize the Filesystem ---'",
      "AGENT: 'The logical volume is larger, but the filesystem inside it doesn't know yet. Let's check the filesystem type:'",
      "Run command: `df -Th /var`",
      "AGENT: 'Filesystem              Type  Size  Used Avail Use% Mounted on'",
      "AGENT: '/dev/mapper/vg-main-lv-var ext4   50G   48G  2.0G  96% /var'",
      "AGENT: ''",
      "AGENT: 'It's ext4. We can extend it online (while mounted):'",
      "Run command: `sudo resize2fs /dev/vg-main/lv-var`",
      "AGENT: 'resize2fs 1.46.5 (30-Dec-2021)'",
      "AGENT: 'Filesystem at /dev/vg-main/lv-var is mounted on /var; on-line resizing required'",
      "AGENT: 'old_desc_blocks = 7, new_desc_blocks = 69'",
      "AGENT: 'The filesystem on /dev/vg-main/lv-var is now 144310272 (4k) blocks long.'",
      "AGENT: ''",
      "AGENT: 'For XFS filesystems, you'd use: `sudo xfs_growfs /var`'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Verify the Change ---'",
      "Run command: `df -h /var`",
      "AGENT: 'Filesystem                  Size  Used Avail Use% Mounted on'",
      "AGENT: '/dev/mapper/vg-main-lv-var  550G   48G  477G   9% /var'",
      "AGENT: ''",
      "AGENT: 'üéâ SUCCESS! `/var` now has 477GB free space and the system never went down!'",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Checked current LVM configuration with pvs/vgs/lvs.'",
      "AGENT: '  ‚úì Initialized new disk as LVM physical volume with pvcreate.'",
      "AGENT: '  ‚úì Extended volume group with vgextend to add new disk.'",
      "AGENT: '  ‚úì Extended logical volume with lvextend to allocate space.'",
      "AGENT: '  ‚úì Resized filesystem with resize2fs (ext4) to use new space.'",
      "AGENT: '  ‚úì All done online, with zero downtime! This is the power of LVM. üíæ'"
    ],
    "commands": ["pvs", "vgs", "lvs", "lsblk", "pvcreate", "vgextend", "lvextend", "resize2fs", "df", "xfs_growfs"],
    "packages": {
      "debian_ubuntu": ["lvm2"],
      "arch": ["lvm2"]
    },
    "related_commands": ["fdisk", "parted", "mkfs", "mount"],
    "complexity": "intermediate",
    "tags": ["lvm", "storage", "filesystem", "disk-management", "capacity-planning", "system-administration", "online-resize"]
  }
]

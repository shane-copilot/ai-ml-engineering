[
  {
    "id": "scenario_kernel_module_multi_approach_001",
    "command": "modprobe",
    "scenario": "Developer: Hardware not working (webcam/wifi/bluetooth)",
    "problem": "Device driver/kernel module not loaded",
    "solution": "Load and troubleshoot kernel modules",
    "steps": [
      "USER SAYS: 'My webcam isn\\'t working for video calls!'",
      "AGENT: 'Let me check if the hardware is detected...'",
      "AGENT: 'Approach 1: Check if device exists...'",
      "List usb: lsusb",
      "AGENT: 'Bus 001 Device 005: ID 046d:0825 Logitech, Inc. Webcam C270 ✓'",
      "AGENT: 'Webcam is detected by USB'",
      "Check video: ls /dev/video*",
      "AGENT: 'ls: cannot access \\'/dev/video*\\': No such file or directory ✗'",
      "AGENT: 'No video device node - driver not loaded'",
      "AGENT: 'Approach 2: Check if kernel module loaded...'",
      "Check module: lsmod | grep uvcvideo",
      "AGENT: '(no output) ✗'",
      "AGENT: 'uvcvideo module not loaded'",
      "AGENT: 'Approach 3: Try loading module manually...'",
      "Load module: sudo modprobe uvcvideo",
      "AGENT: 'modprobe: ERROR: could not insert \\'uvcvideo\\': Unknown symbol in module ✗'",
      "AGENT: 'Module has dependency issues'",
      "Check dmesg: sudo dmesg | tail -20",
      "AGENT: 'uvcvideo: Unknown symbol videobuf2_vmalloc_memops'",
      "AGENT: 'Missing dependency: videobuf2-vmalloc'",
      "AGENT: 'Approach 4: Load dependencies first...'",
      "Load deps: sudo modprobe videobuf2-vmalloc",
      "sudo modprobe videobuf2-v4l2",
      "AGENT: 'Dependencies loaded ✓'",
      "Try again: sudo modprobe uvcvideo",
      "AGENT: '✓ Module loaded'",
      "Check device: ls /dev/video*",
      "AGENT: '/dev/video0 ✓'",
      "AGENT: '/dev/video1 ✓'",
      "AGENT: 'Video devices created!'",
      "Test webcam: sudo apt install v4l-utils || sudo pacman -S v4l-utils",
      "v4l2-ctl --list-devices",
      "AGENT: 'Webcam C270 (usb-0000:00:14.0-1): ✓'",
      "AGENT: '  /dev/video0'",
      "AGENT: '  /dev/video1'",
      "USER: 'It works now but will it load automatically?'",
      "AGENT: 'Approach 5: Make module load at boot...'",
      "Add to modules: echo 'uvcvideo' | sudo tee -a /etc/modules-load.d/webcam.conf",
      "AGENT: 'Module will auto-load on boot ✓'",
      "USER: 'What if module was blacklisted?'",
      "AGENT: 'Approach 6: Check and remove from blacklist...'",
      "Check blacklist: grep -r uvcvideo /etc/modprobe.d/",
      "AGENT: '/etc/modprobe.d/blacklist.conf:blacklist uvcvideo ✗'",
      "AGENT: 'Found it blacklisted!'",
      "Remove: sudo sed -i '/blacklist uvcvideo/d' /etc/modprobe.d/blacklist.conf",
      "AGENT: 'Removed from blacklist ✓'",
      "AGENT: 'Approach 7: Check module info and parameters...'",
      "Module info: modinfo uvcvideo",
      "AGENT: 'filename:    /lib/modules/.../uvcvideo.ko'",
      "AGENT: 'description: USB Video Class driver'",
      "AGENT: 'parm: quirks: Forced device quirks'",
      "AGENT: 'parm: trace: Trace level'",
      "Show params: cat /sys/module/uvcvideo/parameters/*",
      "AGENT: 'Current module parameters displayed'",
      "AGENT: 'Approach 8: Rebuild module if corrupted...'",
      "Show method: cat > ~/rebuild-module.sh << 'EOF'",
      "#!/bin/bash",
      "MODULE=$1",
      "KERNEL=$(uname -r)",
      "echo \"Rebuilding module: $MODULE\"",
      "echo \"Kernel version: $KERNEL\"",
      "echo ''",
      "echo 'Installing build tools...'",
      "sudo apt install dkms linux-headers-$KERNEL || sudo pacman -S dkms linux-headers",
      "echo ''",
      "echo 'Rebuilding all DKMS modules...'",
      "sudo dkms autoinstall",
      "echo ''",
      "echo 'Or rebuild specific module:'",
      "echo '  sudo dkms build -m <module> -v <version>'",
      "echo '  sudo dkms install -m <module> -v <version>'",
      "EOF",
      "chmod +x ~/rebuild-module.sh",
      "AGENT: 'Approach 9: Use alternative driver...'",
      "Show method: cat > ~/try-alt-driver.sh << 'EOF'",
      "#!/bin/bash",
      "DEVICE=$1",
      "echo \"Finding alternative drivers for $DEVICE...\"",
      "echo ''",
      "# Get device ID",
      "VENDOR_ID=$(lsusb | grep \"$DEVICE\" | grep -oP '\\K[0-9a-f]{4}(?=:)')",
      "PRODUCT_ID=$(lsusb | grep \"$DEVICE\" | grep -oP ':[0-9a-f]{4}\\K[0-9a-f]{4}')",
      "echo \"Device ID: $VENDOR_ID:$PRODUCT_ID\"",
      "echo ''",
      "# Check what modules support it",
      "echo 'Checking module database...'",
      "modprobe --show-depends -a | grep -i \"$DEVICE\"",
      "echo ''",
      "echo 'Common webcam modules to try:'",
      "echo '  uvcvideo (most USB webcams)'",
      "echo '  gspca_* (older webcams)'",
      "echo '  pwc (Philips)'",
      "EOF",
      "chmod +x ~/try-alt-driver.sh",
      "AGENT: 'Approach 10: Force module parameters...'",
      "Show method: cat > ~/set-module-params.sh << 'EOF'",
      "#!/bin/bash",
      "MODULE=$1",
      "echo \"Setting module parameters for: $MODULE\"",
      "echo ''",
      "echo 'Available parameters:'",
      "modinfo $MODULE | grep '^parm:'",
      "echo ''",
      "read -p 'Parameter name: ' PARAM",
      "read -p 'Parameter value: ' VALUE",
      "echo ''",
      "# Create modprobe config",
      "echo \"options $MODULE $PARAM=$VALUE\" | sudo tee /etc/modprobe.d/${MODULE}-custom.conf",
      "echo '✓ Parameter configured'",
      "echo ''",
      "echo 'Reload module:'",
      "sudo modprobe -r $MODULE",
      "sudo modprobe $MODULE",
      "echo ''",
      "echo 'Verify:'",
      "cat /sys/module/$MODULE/parameters/$PARAM",
      "EOF",
      "chmod +x ~/set-module-params.sh",
      "Create module helper: cat > ~/module-helper.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Kernel Module Helper ==='",
      "echo ''",
      "echo '1. List loaded modules'",
      "echo '2. Load module'",
      "echo '3. Unload module'",
      "echo '4. Module info'",
      "echo '5. Check dependencies'",
      "echo '6. Auto-load at boot'",
      "echo '7. Blacklist module'",
      "echo '8. Find module for device'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1)",
      "    echo ''",
      "    lsmod | less",
      "    ;;",
      "  2)",
      "    read -p 'Module name: ' MOD",
      "    sudo modprobe $MOD",
      "    lsmod | grep $MOD && echo '✓ Loaded'",
      "    ;;",
      "  3)",
      "    read -p 'Module name: ' MOD",
      "    sudo modprobe -r $MOD",
      "    echo '✓ Unloaded'",
      "    ;;",
      "  4)",
      "    read -p 'Module name: ' MOD",
      "    modinfo $MOD",
      "    ;;",
      "  5)",
      "    read -p 'Module name: ' MOD",
      "    modinfo -F depends $MOD",
      "    ;;",
      "  6)",
      "    read -p 'Module name: ' MOD",
      "    echo \"$MOD\" | sudo tee -a /etc/modules-load.d/$MOD.conf",
      "    echo \"✓ Will load at boot\"",
      "    ;;",
      "  7)",
      "    read -p 'Module name: ' MOD",
      "    echo \"blacklist $MOD\" | sudo tee -a /etc/modprobe.d/blacklist-$MOD.conf",
      "    echo \"✓ Blacklisted\"",
      "    ;;",
      "  8)",
      "    echo 'USB devices:'",
      "    lsusb",
      "    echo ''",
      "    read -p 'Device ID (vendor:product): ' DEVID",
      "    find /sys/devices -name modalias -exec cat {} \\; | grep -i $DEVID",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/module-helper.sh",
      "Create hardware debugger: cat > ~/debug-hardware.sh << 'EOF'",
      "#!/bin/bash",
      "TYPE=$1  # webcam, wifi, bluetooth, etc",
      "echo \"=== Hardware Debugger: $TYPE ===\"",
      "echo ''",
      "case $TYPE in",
      "  webcam)",
      "    echo '1. USB detection:'",
      "    lsusb | grep -i 'camera\\|webcam\\|video'",
      "    echo ''",
      "    echo '2. Video devices:'",
      "    ls -l /dev/video* 2>/dev/null || echo 'None found'",
      "    echo ''",
      "    echo '3. Kernel module:'",
      "    lsmod | grep -E 'uvcvideo|gspca'",
      "    echo ''",
      "    echo '4. If not working:'",
      "    echo '   sudo modprobe uvcvideo'",
      "    ;;",
      "  wifi)",
      "    echo '1. PCI/USB detection:'",
      "    lspci | grep -i network",
      "    lsusb | grep -i wireless",
      "    echo ''",
      "    echo '2. Network interfaces:'",
      "    ip link show | grep -E 'wlan|wlp'",
      "    echo ''",
      "    echo '3. Kernel modules:'",
      "    lsmod | grep -E 'iwl|ath|rtw|mt76'",
      "    echo ''",
      "    echo '4. If not working, try:'",
      "    echo '   sudo modprobe iwlwifi  # Intel'",
      "    echo '   sudo modprobe ath9k     # Atheros'",
      "    ;;",
      "  bluetooth)",
      "    echo '1. USB detection:'",
      "    lsusb | grep -i bluetooth",
      "    echo ''",
      "    echo '2. Bluetooth devices:'",
      "    hciconfig -a 2>/dev/null || echo 'hciconfig not found'",
      "    echo ''",
      "    echo '3. Kernel module:'",
      "    lsmod | grep bluetooth",
      "    echo ''",
      "    echo '4. Service status:'",
      "    systemctl status bluetooth",
      "    echo ''",
      "    echo '5. If not working:'",
      "    echo '   sudo modprobe btusb'",
      "    echo '   sudo systemctl start bluetooth'",
      "    ;;",
      "  *)",
      "    echo 'Usage: ./debug-hardware.sh <webcam|wifi|bluetooth>'",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/debug-hardware.sh",
      "AGENT: 'Webcam fully functional! ✓'",
      "AGENT: ''",
      "AGENT: 'Issue resolution:'",
      "AGENT: '  1. Device detected via USB'",
      "AGENT: '  2. Driver module not loaded'",
      "AGENT: '  3. Missing dependencies → loaded manually'",
      "AGENT: '  4. Module loaded → device working'",
      "AGENT: '  5. Was blacklisted → removed'",
      "AGENT: '  6. Auto-load configured → persistent'",
      "AGENT: ''",
      "AGENT: 'Troubleshooting approaches:'",
      "AGENT: '  1. Check device detection (lsusb)'",
      "AGENT: '  2. Check module loaded (lsmod)'",
      "AGENT: '  3. Load module (modprobe)'",
      "AGENT: '  4. Load dependencies first'",
      "AGENT: '  5. Configure auto-load'",
      "AGENT: '  6. Remove from blacklist'",
      "AGENT: '  7. Check module parameters'",
      "AGENT: '  8. Rebuild if corrupted'",
      "AGENT: '  9. Try alternative drivers'",
      "AGENT: '  10. Set custom parameters'",
      "AGENT: ''",
      "AGENT: 'Helper tools:'",
      "AGENT: '  ~/module-helper.sh - manage modules'",
      "AGENT: '  ~/debug-hardware.sh <type> - diagnose hardware'",
      "AGENT: ''",
      "AGENT: 'Webcam ready for video calls! ✓'"
    ],
    "commands": ["modprobe", "lsmod", "lsusb", "modinfo"],
    "packages": {"debian_ubuntu": ["v4l-utils", "linux-headers-generic"], "arch": ["v4l-utils", "linux-headers"]},
    "related_commands": ["modprobe", "lsmod", "modinfo", "lsusb", "lspci"],
    "complexity": "advanced",
    "tags": ["kernel-modules", "drivers", "hardware", "webcam", "multiple-approaches", "modprobe", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_update_breaks_system_multi_approach_001",
    "command": "apt",
    "scenario": "Developer: System broken after update, need to rollback",
    "problem": "Update caused issues, system unstable",
    "solution": "Rollback or fix broken update",
    "steps": [
      "USER SAYS: 'After updating, my system won\\'t boot properly! Stuck at terminal!'",
      "AGENT: 'Let me help you recover from the bad update...'",
      "AGENT: 'Approach 1: Check what was updated...'",
      "Check logs: cat /var/log/apt/history.log | tail -50",
      "AGENT: 'Start-Date: 2025-10-07  10:30:15'",
      "AGENT: 'Upgrade: linux-image-generic:amd64 (5.15.0-84, 5.19.0-50)'",
      "AGENT: 'Upgrade: nvidia-driver-525:amd64 (525.85.12, 535.129.03)'",
      "AGENT: 'Updated kernel and Nvidia driver!'",
      "USER: 'The screen goes black after boot!'",
      "AGENT: 'Approach 2: Boot with old kernel...'",
      "Show method: cat > ~/boot-old-kernel-guide.txt << 'EOF'",
      "=== Boot with Previous Kernel ===",
      "1. Reboot system",
      "2. Hold SHIFT during boot to show GRUB menu",
      "3. Select 'Advanced options'",
      "4. Choose previous kernel version (5.15.0-84)",
      "5. Boot with that kernel",
      "This bypasses the new kernel that's causing issues",
      "EOF",
      "AGENT: 'After booting with old kernel, we can fix it'",
      "AGENT: 'Assuming you\\'re now in recovery...'",
      "AGENT: 'Approach 3: Hold broken packages...'",
      "Hold kernel: sudo apt-mark hold linux-image-generic",
      "sudo apt-mark hold nvidia-driver-535",
      "AGENT: 'Packages held from upgrading ✓'",
      "AGENT: 'Approach 4: Downgrade to previous version...'",
      "Check available: apt-cache policy linux-image-generic",
      "AGENT: 'Installed: 5.19.0-50'",
      "AGENT: 'Candidate: 5.19.0-50'",
      "AGENT: '*** 5.19.0-50'",
      "AGENT: '    5.15.0-84'",
      "Downgrade: sudo apt install linux-image-5.15.0-84-generic linux-headers-5.15.0-84-generic",
      "AGENT: 'Installing previous kernel ✓'",
      "Update grub: sudo update-grub",
      "AGENT: 'GRUB updated to boot old kernel by default ✓'",
      "AGENT: 'Approach 5: Remove problematic package...'",
      "Remove new: sudo apt remove linux-image-5.19.0-50-generic",
      "AGENT: 'New kernel removed ✓'",
      "Autoremove: sudo apt autoremove",
      "AGENT: 'Cleaned up ✓'",
      "USER: 'What about the Nvidia driver?'",
      "AGENT: 'Approach 6: Rollback Nvidia driver...'",
      "Remove new: sudo apt remove nvidia-driver-535",
      "Install old: sudo apt install nvidia-driver-525",
      "AGENT: 'Nvidia driver downgraded ✓'",
      "Rebuild modules: sudo update-initramfs -u",
      "AGENT: 'Initramfs rebuilt ✓'",
      "AGENT: 'Approach 7: If GUI still broken, use Nouveau...'",
      "Show method: cat > ~/switch-to-nouveau.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Switching to Nouveau (open-source Nvidia) ==='",
      "echo ''",
      "echo 'Removing proprietary Nvidia driver...'",
      "sudo apt purge nvidia-*",
      "echo ''",
      "echo 'Removing blacklist...'",
      "sudo rm /etc/modprobe.d/nvidia-blacklists-nouveau.conf",
      "echo ''",
      "echo 'Rebuilding initramfs...'",
      "sudo update-initramfs -u",
      "echo ''",
      "echo '✓ Nouveau will be used after reboot'",
      "echo 'Performance will be lower but system will work'",
      "EOF",
      "chmod +x ~/switch-to-nouveau.sh",
      "AGENT: 'Approach 8: Use timeshift to restore snapshot...'",
      "Show method: cat > ~/restore-timeshift.sh << 'EOF'",
      "#!/bin/bash",
      "if ! command -v timeshift &>/dev/null; then",
      "  echo 'Installing Timeshift...'",
      "  sudo apt install timeshift",
      "fi",
      "echo '=== Available Snapshots ==='",
      "sudo timeshift --list",
      "echo ''",
      "read -p 'Snapshot to restore (or blank to cancel): ' SNAP",
      "if [ -n \"$SNAP\" ]; then",
      "  echo 'Restoring snapshot...'",
      "  sudo timeshift --restore --snapshot \"$SNAP\"",
      "  echo '✓ System restored'",
      "fi",
      "EOF",
      "chmod +x ~/restore-timeshift.sh",
      "AGENT: 'Approach 9: Dpkg reconfigure if packages broken...'",
      "Show method: cat > ~/fix-broken-packages.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Fixing Broken Packages ==='",
      "echo ''",
      "echo '1. Fixing dpkg...'",
      "sudo dpkg --configure -a",
      "echo ''",
      "echo '2. Fixing apt...'",
      "sudo apt --fix-broken install",
      "echo ''",
      "echo '3. Updating package lists...'",
      "sudo apt update",
      "echo ''",
      "echo '4. Checking for issues...'",
      "sudo apt check",
      "echo ''",
      "echo '5. Cleaning up...'",
      "sudo apt autoremove",
      "sudo apt autoclean",
      "EOF",
      "chmod +x ~/fix-broken-packages.sh",
      "AGENT: 'Approach 10: Boot into recovery mode...'",
      "Show guide: cat > ~/recovery-mode-guide.txt << 'EOF'",
      "=== Recovery Mode Usage ===",
      "Boot into recovery mode:",
      "1. Reboot and hold SHIFT for GRUB",
      "2. Select 'Advanced options'",
      "3. Choose 'recovery mode'",
      "4. Select 'root' (root shell access)",
      "5. Remount filesystem read-write:",
      "   mount -o remount,rw /",
      "6. Enable networking:",
      "   systemctl start NetworkManager",
      "7. Fix packages:",
      "   apt --fix-broken install",
      "   apt remove <problematic-package>",
      "8. Update GRUB and initramfs:",
      "   update-grub",
      "   update-initramfs -u",
      "9. Reboot:",
      "   reboot",
      "EOF",
      "Create update safety tool: cat > ~/safe-update.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Safe System Update Tool ==='",
      "echo ''",
      "echo 'This will:'",
      "echo '1. Create Timeshift snapshot (if installed)'",
      "echo '2. Show what will be updated'",
      "echo '3. Ask for confirmation'",
      "echo '4. Perform update'",
      "echo ''",
      "read -p 'Continue? (y/n): ' CONT",
      "if [ \"$CONT\" != 'y' ]; then exit; fi",
      "echo ''",
      "# Create snapshot",
      "if command -v timeshift &>/dev/null; then",
      "  echo 'Creating snapshot...'",
      "  sudo timeshift --create --comments \"Before update $(date +%Y%m%d)\"",
      "  echo '✓ Snapshot created'",
      "else",
      "  echo '⚠️ Timeshift not installed - no snapshot'",
      "  echo 'Install: sudo apt install timeshift'",
      "fi",
      "echo ''",
      "# Show updates",
      "echo 'Checking for updates...'",
      "sudo apt update",
      "echo ''",
      "echo 'Packages to upgrade:'",
      "apt list --upgradable",
      "echo ''",
      "# Highlight risky updates",
      "RISKY=$(apt list --upgradable 2>/dev/null | grep -E 'kernel|nvidia|xorg|grub')",
      "if [ -n \"$RISKY\" ]; then",
      "  echo '⚠️ RISKY UPDATES (kernel/drivers/bootloader):'",
      "  echo \"$RISKY\"",
      "  echo ''",
      "  read -p 'Hold these packages? (y/n): ' HOLD",
      "  if [ \"$HOLD\" == 'y' ]; then",
      "    echo \"$RISKY\" | awk '{print $1}' | xargs sudo apt-mark hold",
      "    echo '✓ Risky packages held'",
      "  fi",
      "fi",
      "echo ''",
      "read -p 'Proceed with update? (y/n): ' UPDATE",
      "if [ \"$UPDATE\" == 'y' ]; then",
      "  sudo apt upgrade -y",
      "  echo ''",
      "  echo '✓ Update complete'",
      "  echo ''",
      "  echo 'If system has issues after reboot:'",
      "  echo '  1. Boot with old kernel (GRUB menu)'",
      "  echo '  2. Restore snapshot: sudo timeshift --restore'",
      "fi",
      "EOF",
      "chmod +x ~/safe-update.sh",
      "Create recovery toolkit: cat > ~/recovery-toolkit.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== System Recovery Toolkit ==='",
      "echo ''",
      "echo '1. List recent updates'",
      "echo '2. Downgrade package'",
      "echo '3. Remove package'",
      "echo '4. Hold package from updates'",
      "echo '5. Fix broken packages'",
      "echo '6. Restore Timeshift snapshot'",
      "echo '7. Reinstall package'",
      "echo '8. Switch to older kernel'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1)",
      "    cat /var/log/apt/history.log | grep -A 5 'Start-Date' | tail -50",
      "    ;;",
      "  2)",
      "    read -p 'Package name: ' PKG",
      "    apt-cache policy $PKG",
      "    read -p 'Version to install: ' VER",
      "    sudo apt install $PKG=$VER",
      "    ;;",
      "  3)",
      "    read -p 'Package name: ' PKG",
      "    sudo apt remove $PKG",
      "    sudo apt autoremove",
      "    ;;",
      "  4)",
      "    read -p 'Package name: ' PKG",
      "    sudo apt-mark hold $PKG",
      "    echo \"✓ $PKG will not be updated\"",
      "    ;;",
      "  5)",
      "    sudo dpkg --configure -a",
      "    sudo apt --fix-broken install",
      "    ;;",
      "  6)",
      "    sudo timeshift --list",
      "    read -p 'Snapshot: ' SNAP",
      "    sudo timeshift --restore --snapshot \"$SNAP\"",
      "    ;;",
      "  7)",
      "    read -p 'Package name: ' PKG",
      "    sudo apt install --reinstall $PKG",
      "    ;;",
      "  8)",
      "    echo 'Installed kernels:'",
      "    dpkg --list | grep linux-image",
      "    echo ''",
      "    echo 'Edit /etc/default/grub:'",
      "    echo 'Set GRUB_DEFAULT to desired kernel'",
      "    echo 'Then: sudo update-grub'",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/recovery-toolkit.sh",
      "AGENT: 'System recovered! ✓'",
      "AGENT: ''",
      "AGENT: 'Recovery steps performed:'",
      "AGENT: '  1. Identified problematic updates'",
      "AGENT: '  2. Booted with old kernel'",
      "AGENT: '  3. Held broken packages'",
      "AGENT: '  4. Downgraded kernel and driver'",
      "AGENT: '  5. Updated GRUB to use old kernel'",
      "AGENT: '  6. System stable again'",
      "AGENT: ''",
      "AGENT: 'Alternative recovery methods:'",
      "AGENT: '  1-3: Check logs, boot old kernel, hold packages'",
      "AGENT: '  4-5: Downgrade/remove packages'",
      "AGENT: '  6: Rollback Nvidia driver'",
      "AGENT: '  7: Switch to open-source driver'",
      "AGENT: '  8: Restore from snapshot'",
      "AGENT: '  9: Fix broken packages'",
      "AGENT: '  10: Recovery mode'",
      "AGENT: ''",
      "AGENT: 'Prevention tools created:'",
      "AGENT: '  ~/safe-update.sh - snapshot before updates'",
      "AGENT: '  ~/recovery-toolkit.sh - quick recovery options'",
      "AGENT: ''",
      "AGENT: 'Use ~/safe-update.sh for future updates! ✓'"
    ],
    "commands": ["apt", "dpkg", "update-grub", "update-initramfs"],
    "packages": {"debian_ubuntu": ["timeshift"], "arch": ["timeshift"]},
    "related_commands": ["apt", "dpkg", "timeshift", "update-grub"],
    "complexity": "advanced",
    "tags": ["update", "recovery", "rollback", "kernel", "drivers", "multiple-approaches", "troubleshooting", "real-world", "ai-agent"]
  }
]

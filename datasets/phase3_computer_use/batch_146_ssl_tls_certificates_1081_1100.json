[
  {
    "id": "scenario_ssl_tls_certificates_144",
    "command": "openssl",
    "scenario": "Generate and manage SSL/TLS certificates for secure communications.",
    "problem": "Need to create self-signed certificates for testing, generate CSRs for CA-signed certificates, inspect certificate details, troubleshoot SSL issues, and understand certificate chains for HTTPS and secure communications.",
    "solution": "Use openssl command to generate private keys, create self-signed certificates, generate CSRs, inspect certificates, verify certificate chains, and test SSL connections for web servers and applications.",
    "steps": [
      "USER SAYS: 'How do I create SSL certificates for my web server? I need both self-signed for testing and understand how to get CA-signed certificates.'",
      "AGENT: 'Let me show you SSL/TLS certificates with OpenSSL! We'll generate keys, create self-signed certs, CSRs, and inspect certificates.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: SSL/TLS certificates...'",
      "AGENT: '[Searching] \"openssl generate certificate self-signed CSR private key\"'",
      "AGENT: '[Found] openssl genrsa generates private keys.'",
      "AGENT: '[Found] openssl req creates certificates and CSRs.'",
      "AGENT: '[Found] Self-signed for testing, CA-signed for production.'",
      "AGENT: '[Found] Certificate chain: Root CA → Intermediate CA → Server cert.'",
      "AGENT: '✓ Research complete! Let's master SSL certificates.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Generate Private Key ---'",
      "Run command: `openssl genrsa -out private.key 2048`",
      "AGENT: '  2048 = Key size in bits'",
      "AGENT: 'Generating RSA private key, 2048 bit long modulus'",
      "AGENT: ''",
      "Run command: `ls -lh private.key`",
      "AGENT: '-rw------- 1 user user 1.7K Oct  8 19:00 private.key'",
      "AGENT: ''",
      "AGENT: 'Generate with passphrase protection:'",
      "Run command: `openssl genrsa -aes256 -out private-encrypted.key 2048`",
      "AGENT: 'Enter pass phrase:'",
      "AGENT: 'Verifying - Enter pass phrase:'",
      "AGENT: ''",
      "Run command: `cat private.key | head -5`",
      "AGENT: '-----BEGIN PRIVATE KEY-----'",
      "AGENT: 'MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC...'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Generate Self-Signed Certificate ---'",
      "Run command: `openssl req -new -x509 -key private.key -out certificate.crt -days 365`",
      "AGENT: '  -new = New certificate request'",
      "AGENT: '  -x509 = Self-signed certificate'",
      "AGENT: '  -days 365 = Valid for 1 year'",
      "AGENT: ''",
      "AGENT: 'You are about to be asked to enter information...'",
      "AGENT: 'Country Name (2 letter code) [AU]:US'",
      "AGENT: 'State or Province Name []:California'",
      "AGENT: 'Locality Name []:San Francisco'",
      "AGENT: 'Organization Name []:My Company'",
      "AGENT: 'Organizational Unit Name []:IT'",
      "AGENT: 'Common Name (e.g. server FQDN) []:example.com'",
      "AGENT: 'Email Address []:admin@example.com'",
      "AGENT: ''",
      "Run command: `ls -lh certificate.crt`",
      "AGENT: '-rw-r--r-- 1 user user 1.3K Oct  8 19:00 certificate.crt'",
      "AGENT: ''",
      "AGENT: 'One-liner (no prompts):'",
      "Run command: `openssl req -new -x509 -key private.key -out cert.crt -days 365 -subj \"/C=US/ST=CA/L=SF/O=Company/CN=example.com\"`",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Generate Key and Certificate Together ---'",
      "Run command: `openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes`",
      "AGENT: '  -nodes = No DES (no passphrase)'",
      "AGENT: 'Generates both private key and certificate in one command'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Inspect Certificate ---'",
      "Run command: `openssl x509 -in certificate.crt -text -noout`",
      "AGENT: 'Certificate:'",
      "AGENT: '    Data:'",
      "AGENT: '        Version: 3 (0x2)'",
      "AGENT: '        Serial Number:'",
      "AGENT: '            12:34:56:78:90:ab:cd:ef'",
      "AGENT: '        Signature Algorithm: sha256WithRSAEncryption'",
      "AGENT: '        Issuer: C=US, ST=California, L=San Francisco, O=My Company, CN=example.com'",
      "AGENT: '        Validity'",
      "AGENT: '            Not Before: Oct  8 19:00:00 2025 GMT'",
      "AGENT: '            Not After : Oct  8 19:00:00 2026 GMT'",
      "AGENT: '        Subject: C=US, ST=California, L=San Francisco, O=My Company, CN=example.com'",
      "AGENT: '        Subject Public Key Info:'",
      "AGENT: '            Public Key Algorithm: rsaEncryption'",
      "AGENT: '                RSA Public-Key: (2048 bit)'",
      "AGENT: ''",
      "Run command: `openssl x509 -in certificate.crt -noout -dates`",
      "AGENT: 'notBefore=Oct  8 19:00:00 2025 GMT'",
      "AGENT: 'notAfter=Oct  8 19:00:00 2026 GMT'",
      "AGENT: ''",
      "Run command: `openssl x509 -in certificate.crt -noout -subject`",
      "AGENT: 'subject=C=US, ST=California, L=San Francisco, O=My Company, CN=example.com'",
      "AGENT: ''",
      "Run command: `openssl x509 -in certificate.crt -noout -issuer`",
      "AGENT: 'issuer=C=US, ST=California, L=San Francisco, O=My Company, CN=example.com'",
      "AGENT: '(Same as subject = self-signed)'",
      "AGENT: ''",
      "Run command: `openssl x509 -in certificate.crt -noout -fingerprint`",
      "AGENT: 'SHA256 Fingerprint=AB:CD:EF:12:34:56:78:90:...'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Generate CSR (Certificate Signing Request) ---'",
      "Run command: `openssl req -new -key private.key -out request.csr`",
      "AGENT: 'Enter certificate details (same prompts as before)'",
      "AGENT: ''",
      "AGENT: 'With subject on command line:'",
      "Run command: `openssl req -new -key private.key -out request.csr -subj \"/C=US/ST=CA/L=SF/O=Company/CN=example.com\"`",
      "AGENT: ''",
      "Run command: `ls -lh request.csr`",
      "AGENT: '-rw-r--r-- 1 user user 1.0K Oct  8 19:00 request.csr'",
      "AGENT: ''",
      "AGENT: 'Verify CSR:'",
      "Run command: `openssl req -in request.csr -text -noout`",
      "AGENT: 'Certificate Request:'",
      "AGENT: '    Data:'",
      "AGENT: '        Version: 1 (0x0)'",
      "AGENT: '        Subject: C=US, ST=CA, L=SF, O=Company, CN=example.com'",
      "AGENT: '        Subject Public Key Info:'",
      "AGENT: '            Public Key Algorithm: rsaEncryption'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: 'Send request.csr to Certificate Authority (CA) to get signed certificate'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Test SSL Connection ---'",
      "Run command: `openssl s_client -connect example.com:443 -servername example.com`",
      "AGENT: 'CONNECTED(00000003)'",
      "AGENT: 'depth=2 C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert Global Root CA'",
      "AGENT: 'verify return:1'",
      "AGENT: 'depth=1 C=US, O=DigiCert Inc, CN=DigiCert SHA2 Secure Server CA'",
      "AGENT: 'verify return:1'",
      "AGENT: 'depth=0 C=US, ST=California, L=San Francisco, O=Example Inc, CN=example.com'",
      "AGENT: 'verify return:1'",
      "AGENT: '---'",
      "AGENT: 'Certificate chain'",
      "AGENT: ' 0 s:C=US, ST=California, CN=example.com'",
      "AGENT: '   i:C=US, O=DigiCert Inc, CN=DigiCert SHA2'",
      "AGENT: '...'",
      "AGENT: ''",
      "Run command: `echo | openssl s_client -connect example.com:443 2>/dev/null | openssl x509 -noout -dates`",
      "AGENT: 'notBefore=Jan  1 00:00:00 2025 GMT'",
      "AGENT: 'notAfter=Jan  1 23:59:59 2026 GMT'",
      "AGENT: 'Check certificate expiration'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Convert Certificate Formats ---'",
      "AGENT: ''",
      "AGENT: 'PEM to DER:'",
      "Run command: `openssl x509 -in certificate.crt -outform DER -out certificate.der`",
      "AGENT: ''",
      "AGENT: 'DER to PEM:'",
      "Run command: `openssl x509 -in certificate.der -inform DER -outform PEM -out certificate.pem`",
      "AGENT: ''",
      "AGENT: 'PEM to PKCS#12 (PFX):'",
      "Run command: `openssl pkcs12 -export -out certificate.pfx -inkey private.key -in certificate.crt`",
      "AGENT: 'Enter Export Password:'",
      "AGENT: '(Used by Windows, Java)'",
      "AGENT: ''",
      "AGENT: 'PKCS#12 to PEM:'",
      "Run command: `openssl pkcs12 -in certificate.pfx -out certificate.pem -nodes`",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Verify Certificate Chain ---'",
      "Run command: `openssl verify -CAfile ca-bundle.crt certificate.crt`",
      "AGENT: 'certificate.crt: OK'",
      "AGENT: 'Verifies certificate against CA bundle'",
      "AGENT: ''",
      "AGENT: 'Download CA bundle:'",
      "Run command: `curl -O https://curl.se/ca/cacert.pem`",
      "AGENT: ''",
      "AGENT: 'Verify chain:'",
      "Run command: `openssl verify -CAfile cacert.pem -untrusted intermediate.crt server.crt`",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Create Certificate Authority (CA) ---'",
      "AGENT: ''",
      "AGENT: 'Step 1: Generate CA private key'",
      "Run command: `openssl genrsa -out ca.key 4096`",
      "AGENT: ''",
      "AGENT: 'Step 2: Create CA certificate'",
      "Run command: `openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj \"/C=US/ST=CA/O=My CA/CN=My Root CA\"`",
      "AGENT: '  -days 3650 = Valid for 10 years'",
      "AGENT: ''",
      "AGENT: 'Step 3: Generate server key'",
      "Run command: `openssl genrsa -out server.key 2048`",
      "AGENT: ''",
      "AGENT: 'Step 4: Create server CSR'",
      "Run command: `openssl req -new -key server.key -out server.csr -subj \"/C=US/ST=CA/O=Company/CN=server.example.com\"`",
      "AGENT: ''",
      "AGENT: 'Step 5: Sign server certificate with CA'",
      "Run command: `openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365`",
      "AGENT: 'Signature ok'",
      "AGENT: 'subject=C=US, ST=CA, O=Company, CN=server.example.com'",
      "AGENT: 'Getting CA Private Key'",
      "AGENT: ''",
      "AGENT: 'Now you have:'",
      "AGENT: '  ca.crt - Root CA certificate (distribute to clients)'",
      "AGENT: '  server.crt - Server certificate (use on server)'",
      "AGENT: '  server.key - Server private key (keep secure!)'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Use with Nginx/Apache ---'",
      "AGENT: ''",
      "AGENT: 'Nginx configuration:'",
      "Create tool: `cat > nginx-ssl.conf << 'EOF'`",
      "server {\n    listen 443 ssl;\n    server_name example.com;\n\n    ssl_certificate /etc/ssl/certs/certificate.crt;\n    ssl_certificate_key /etc/ssl/private/private.key;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers on;\n\n    location / {\n        root /var/www/html;\n        index index.html;\n    }\n}\n\n# Redirect HTTP to HTTPS\nserver {\n    listen 80;\n    server_name example.com;\n    return 301 https://$server_name$request_uri;\n}\nEOF",
      "AGENT: ''",
      "AGENT: 'Apache configuration:'",
      "Create tool: `cat > apache-ssl.conf << 'EOF'`",
      "<VirtualHost *:443>\n    ServerName example.com\n    DocumentRoot /var/www/html\n\n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/certificate.crt\n    SSLCertificateKeyFile /etc/ssl/private/private.key\n    SSLCertificateChainFile /etc/ssl/certs/ca-bundle.crt\n\n    SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n    SSLCipherSuite HIGH:!aNULL:!MD5\n</VirtualHost>\n\n# Redirect HTTP to HTTPS\n<VirtualHost *:80>\n    ServerName example.com\n    Redirect permanent / https://example.com/\n</VirtualHost>\nEOF",
      "AGENT: ''",
      "AGENT: '--- Bonus: Let's Encrypt (Free CA-Signed Certificates) ---'",
      "Run command: `sudo apt install certbot python3-certbot-nginx -y`",
      "AGENT: ''",
      "Run command: `sudo certbot --nginx -d example.com -d www.example.com`",
      "AGENT: 'Automatically obtains and configures SSL certificate'",
      "AGENT: 'Certificates stored in: /etc/letsencrypt/live/example.com/'",
      "AGENT: ''",
      "Run command: `sudo certbot renew --dry-run`",
      "AGENT: 'Test automatic renewal (cron job)'",
      "AGENT: ''",
      "Run command: `sudo certbot certificates`",
      "AGENT: 'List all certificates'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Certificate Expiration Checker ---'",
      "Create tool: `cat > check-cert-expiry.sh << 'EOF'`",
      "#!/bin/bash\nset -euo pipefail\n\nDOMAIN=\"${1:-}\"\n\nif [ -z \"$DOMAIN\" ]; then\n    echo \"Usage: $0 <domain>\"\n    echo \"Example: $0 example.com\"\n    exit 1\nfi\n\necho \"Checking certificate for $DOMAIN...\"\necho \"\"\n\n# Get certificate expiration date\nEXPIRY=$(echo | openssl s_client -servername \"$DOMAIN\" -connect \"$DOMAIN:443\" 2>/dev/null | openssl x509 -noout -enddate | cut -d= -f2)\n\necho \"Certificate expires: $EXPIRY\"\n\n# Calculate days until expiration\nEXPIRY_EPOCH=$(date -d \"$EXPIRY\" +%s)\nNOW_EPOCH=$(date +%s)\nDAYS_LEFT=$(( ($EXPIRY_EPOCH - $NOW_EPOCH) / 86400 ))\n\necho \"Days remaining: $DAYS_LEFT\"\n\nif [ $DAYS_LEFT -lt 0 ]; then\n    echo \"⚠️  Certificate has EXPIRED!\"\n    exit 1\nelif [ $DAYS_LEFT -lt 30 ]; then\n    echo \"⚠️  Certificate expires soon!\"\n    exit 1\nelse\n    echo \"✓ Certificate is valid\"\n    exit 0\nfi\nEOF",
      "Run command: `chmod +x check-cert-expiry.sh`",
      "Run command: `./check-cert-expiry.sh example.com`",
      "AGENT: ''",
      "AGENT: '--- Bonus: OpenSSL Quick Reference ---'",
      "AGENT: ''",
      "AGENT: 'Generate keys:'",
      "AGENT: '  openssl genrsa -out key.pem 2048'",
      "AGENT: '  openssl genrsa -aes256 -out key.pem 2048  # Encrypted'",
      "AGENT: ''",
      "AGENT: 'Self-signed certificate:'",
      "AGENT: '  openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes'",
      "AGENT: ''",
      "AGENT: 'CSR:'",
      "AGENT: '  openssl req -new -key key.pem -out request.csr'",
      "AGENT: ''",
      "AGENT: 'Inspect certificate:'",
      "AGENT: '  openssl x509 -in cert.pem -text -noout'",
      "AGENT: '  openssl x509 -in cert.pem -noout -dates'",
      "AGENT: '  openssl x509 -in cert.pem -noout -subject'",
      "AGENT: ''",
      "AGENT: 'Test SSL:'",
      "AGENT: '  openssl s_client -connect domain:443'",
      "AGENT: ''",
      "AGENT: 'Convert formats:'",
      "AGENT: '  openssl x509 -in cert.pem -outform DER -out cert.der'",
      "AGENT: '  openssl pkcs12 -export -out cert.pfx -inkey key.pem -in cert.pem'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Generated RSA private keys with openssl genrsa.'",
      "AGENT: '  ✓ Created self-signed certificates for testing.'",
      "AGENT: '  ✓ Generated CSRs for CA-signed certificates.'",
      "AGENT: '  ✓ Inspected certificate details with openssl x509.'",
      "AGENT: '  ✓ Tested SSL connections with openssl s_client.'",
      "AGENT: '  ✓ Converted between certificate formats.'",
      "AGENT: '  ✓ Verified certificate chains.'",
      "AGENT: '  ✓ Created own Certificate Authority.'",
      "AGENT: '  ✓ Configured SSL for Nginx and Apache.'",
      "AGENT: '  ✓ Used Let\\'s Encrypt for free CA-signed certificates.'",
      "AGENT: '  ✓ You now master SSL/TLS certificates! 🔒'"
    ],
    "commands": ["openssl", "certbot"],
    "packages": {
      "debian_ubuntu": ["openssl", "certbot"],
      "arch": ["openssl", "certbot"]
    },
    "related_commands": ["ssh-keygen", "gpg"],
    "complexity": "advanced",
    "tags": ["ssl", "tls", "certificates", "openssl", "https", "encryption", "private-key", "csr", "ca", "security"]
  }
]

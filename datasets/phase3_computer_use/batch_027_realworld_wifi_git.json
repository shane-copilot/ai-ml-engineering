[
  {
    "id": "scenario_wifi_broken_001",
    "command": "multiple",
    "scenario": "User: My WiFi stopped working",
    "problem": "Cannot connect to internet, WiFi not showing networks",
    "solution": "Diagnose and fix wireless connectivity issues",
    "steps": [
      "USER SAYS: 'My WiFi just stopped working! Can you help?'",
      "AGENT: 'Let me diagnose the issue. Checking network status...'",
      "Check network interfaces: ip link show",
      "Look for wireless: wlan0, wlp3s0, etc.",
      "AGENT: 'I see your wireless interface: wlp3s0'",
      "Check if down: ip link show wlp3s0 | grep 'state DOWN'",
      "If down: AGENT: 'WiFi interface is down. Bringing it up...'",
      "Bring up: sudo ip link set wlp3s0 up",
      "Check status: nmcli device status",
      "Shows: wlp3s0 wifi disconnected",
      "AGENT: 'Interface is up but disconnected. Checking for networks...'",
      "Scan networks: sudo nmcli device wifi rescan",
      "List networks: nmcli device wifi list",
      "AGENT: 'I can see networks. Here are the strongest ones:'",
      "Show formatted: nmcli -f SSID,SIGNAL,SECURITY device wifi list | head -10",
      "USER: 'I don't see my network MyHomeWiFi'",
      "AGENT: 'Let me check if it's a 5GHz network...'",
      "Check bands: iw list | grep -A 15 Frequencies",
      "AGENT: 'Your adapter supports both 2.4GHz and 5GHz'",
      "Force rescan: sudo nmcli device wifi rescan && sleep 3 && nmcli device wifi list | grep -i myhome",
      "If found: AGENT: 'Found it! Signal strength: 75%'",
      "USER: 'Yes! Can you connect to it?'",
      "AGENT: 'I'll need the WiFi password'",
      "USER: 'It's stored already, just reconnect'",
      "Check saved: nmcli connection show",
      "AGENT: 'I see MyHomeWiFi in saved connections. Connecting...'",
      "Connect: nmcli connection up MyHomeWiFi",
      "If fails: AGENT: 'Connection failed. Checking why...'",
      "Check logs: sudo journalctl -u NetworkManager -n 50 --no-pager",
      "Look for errors: grep -i 'error\\|fail\\|denied'",
      "Common issue: Authentication timeout",
      "AGENT: 'Looks like authentication issue. Let me reset the connection...'",
      "Delete old: nmcli connection delete MyHomeWiFi",
      "AGENT: 'I'll need the password to reconnect'",
      "USER: 'Password is: SecurePass123'",
      "Connect new: nmcli device wifi connect 'MyHomeWiFi' password 'SecurePass123'",
      "Wait for connection: sleep 5",
      "Check status: nmcli device status",
      "If connected: AGENT: 'Connected! Checking internet...'",
      "Test connectivity: ping -c 3 8.8.8.8",
      "AGENT: 'Internet working! Testing DNS...'",
      "Test DNS: ping -c 3 google.com",
      "If DNS fails: AGENT: 'Internet works but DNS not resolving. Fixing...'",
      "Check DNS: cat /etc/resolv.conf",
      "If empty: AGENT: 'No DNS servers configured. Adding Google DNS...'",
      "Add DNS: echo 'nameserver 8.8.8.8' | sudo tee /etc/resolv.conf",
      "Or via NetworkManager: nmcli connection modify MyHomeWiFi ipv4.dns '8.8.8.8 8.8.4.4'",
      "Restart connection: nmcli connection down MyHomeWiFi && nmcli connection up MyHomeWiFi",
      "Test again: ping -c 3 google.com",
      "AGENT: 'DNS fixed! Full connectivity restored.'",
      "Alternative issue: WiFi adapter disabled",
      "Check rfkill: rfkill list",
      "If hard blocked: AGENT: 'WiFi is hardware-blocked. Check physical WiFi switch.'",
      "If soft blocked: AGENT: 'WiFi is software-blocked. Unblocking...'",
      "Unblock: sudo rfkill unblock wifi",
      "Verify: rfkill list wifi",
      "Driver issue check: lspci | grep -i network",
      "Shows: Network controller: Intel Corporation Wireless...",
      "Check driver loaded: lsmod | grep iwlwifi",
      "If not loaded: AGENT: 'WiFi driver not loaded. Loading...'",
      "Load driver: sudo modprobe iwlwifi",
      "Check dmesg: sudo dmesg | grep -i iwlwifi | tail -20",
      "If firmware missing: AGENT: 'WiFi firmware missing. Installing...'",
      "Install firmware (Ubuntu): sudo apt install linux-firmware",
      "Install firmware (Arch): sudo pacman -S linux-firmware",
      "Restart NetworkManager: sudo systemctl restart NetworkManager",
      "Create diagnostic script: AGENT: 'Creating WiFi diagnostic tool...'",
      "Create script: cat > ~/wifi-diagnose.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== WiFi Diagnostics ==='",
      "echo ''",
      "echo '1. Network Interfaces:'",
      "ip link show | grep -E '^[0-9]+: (wlan|wlp)'",
      "echo ''",
      "echo '2. WiFi Status:'",
      "nmcli device status | grep wifi",
      "echo ''",
      "echo '3. Current Connection:'",
      "nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2",
      "echo ''",
      "echo '4. Signal Strength:'",
      "nmcli -f IN-USE,SIGNAL,SSID device wifi list | head -1",
      "nmcli -f IN-USE,SIGNAL,SSID device wifi list | grep '\\*'",
      "echo ''",
      "echo '5. Internet Test:'",
      "ping -c 2 8.8.8.8 &>/dev/null && echo '✓ Internet OK' || echo '✗ No Internet'",
      "ping -c 2 google.com &>/dev/null && echo '✓ DNS OK' || echo '✗ DNS Failed'",
      "echo ''",
      "echo '6. RF Kill Status:'",
      "rfkill list wifi",
      "EOF",
      "Make executable: chmod +x ~/wifi-diagnose.sh",
      "AGENT: 'Created wifi-diagnose.sh for future troubleshooting'",
      "Test it: ~/wifi-diagnose.sh",
      "Create reconnect script: cat > ~/wifi-reconnect.sh << 'EOF'",
      "#!/bin/bash",
      "SSID='MyHomeWiFi'",
      "echo 'Reconnecting to WiFi...'",
      "nmcli connection down \"$SSID\" 2>/dev/null",
      "sleep 2",
      "nmcli connection up \"$SSID\"",
      "if [ $? -eq 0 ]; then",
      "  echo '✓ Connected to $SSID'",
      "  ping -c 2 8.8.8.8 &>/dev/null && echo '✓ Internet working'",
      "else",
      "  echo '✗ Connection failed'",
      "  echo 'Run ~/wifi-diagnose.sh for details'",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/wifi-reconnect.sh",
      "AGENT: 'Created wifi-reconnect.sh for quick reconnection'",
      "Add to bashrc: echo 'alias wifi-fix=\"~/wifi-reconnect.sh\"' >> ~/.bashrc",
      "Source: source ~/.bashrc",
      "AGENT: 'Added alias: wifi-fix (runs reconnect script)'",
      "Power management issue: AGENT: 'Checking power management settings...'",
      "Check setting: cat /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf",
      "If powersave=3: AGENT: 'WiFi power saving is on. This can cause drops.'",
      "Disable powersave: echo -e '[connection]\\nwifi.powersave = 2' | sudo tee /etc/NetworkManager/conf.d/wifi-powersave-off.conf",
      "Restart: sudo systemctl restart NetworkManager",
      "AGENT: 'Disabled WiFi power saving for better stability'",
      "Final summary: AGENT: 'WiFi restored! Summary:'",
      "AGENT: '✓ Connected to: MyHomeWiFi'",
      "AGENT: '✓ Signal strength: 75%'",
      "AGENT: '✓ Internet: Working'",
      "AGENT: '✓ DNS: Working'",
      "AGENT: ''",
      "AGENT: 'Created helper tools:'",
      "AGENT: '- ~/wifi-diagnose.sh (check status)'",
      "AGENT: '- ~/wifi-reconnect.sh (quick reconnect)'",
      "AGENT: '- wifi-fix command (alias)'",
      "AGENT: ''",
      "AGENT: 'If WiFi drops again: Run wifi-fix'"
    ],
    "commands": ["ip", "nmcli", "iw", "journalctl", "ping", "cat", "rfkill", "lspci", "lsmod", "modprobe", "dmesg", "systemctl", "grep", "tee", "chmod", "source"],
    "packages": {
      "debian_ubuntu": ["network-manager", "iw", "rfkill", "wireless-tools", "linux-firmware"],
      "arch": ["networkmanager", "iw", "rfkill", "wireless_tools", "linux-firmware"]
    },
    "related_commands": ["nmcli", "ip", "iw", "rfkill", "ping"],
    "complexity": "intermediate",
    "tags": ["wifi", "networking", "wireless", "troubleshooting", "connectivity", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_git_mess_001",
    "command": "multiple",
    "scenario": "User: I messed up my Git commits, help!",
    "problem": "Wrong commits, need to undo changes, or fix commit history",
    "solution": "Use Git commands to fix various commit issues",
    "steps": [
      "USER SAYS: 'I accidentally committed something I shouldn't have! Can you help?'",
      "AGENT: 'Don't worry, we can fix this. What exactly happened?'",
      "USER: 'I committed passwords in a config file'",
      "AGENT: 'Critical issue! Let me help you remove it from history.'",
      "AGENT: 'First, checking if you've pushed to remote...'",
      "Check status: git status",
      "Check log: git log --oneline -5",
      "AGENT: 'Showing last 5 commits:'",
      "USER: 'It's the latest commit, not pushed yet'",
      "AGENT: 'Good! Since it's not pushed, this is easier.'",
      "Show commit: git show HEAD",
      "AGENT: 'I see config.yaml with passwords. Let me remove this commit.'",
      "Option 1 - Undo commit, keep changes:",
      "AGENT: 'Option 1: Undo commit but keep your changes'",
      "Soft reset: git reset --soft HEAD~1",
      "AGENT: 'Commit undone. Files still staged. Now remove the config file...'",
      "Unstage: git reset config.yaml",
      "AGENT: 'Config file unstaged. Now edit it to remove passwords.'",
      "USER: 'Done editing'",
      "AGENT: 'Great! Let me add it to .gitignore to prevent future issues.'",
      "Add to gitignore: echo 'config.yaml' >> .gitignore",
      "Create template: cp config.yaml config.yaml.template",
      "Remove passwords from template: sed -i 's/password: .*/password: YOUR_PASSWORD_HERE/' config.yaml.template",
      "AGENT: 'Created config.yaml.template (safe to commit)'",
      "Stage changes: git add .gitignore config.yaml.template",
      "Commit: git commit -m 'Add config template and ignore actual config'",
      "AGENT: 'Fixed! config.yaml is now ignored, and template is committed.'",
      "Option 2 - Already pushed scenario:",
      "USER: 'Oh wait, I already pushed it!'",
      "AGENT: 'This is more serious. We need to rewrite history.'",
      "AGENT: 'WARNING: This will affect anyone who pulled your changes.'",
      "USER: 'It's okay, only I'm working on this'",
      "AGENT: 'Okay. Using BFG Repo-Cleaner for thorough removal...'",
      "Check if BFG installed: which bfg",
      "If not: AGENT: 'Installing BFG...'",
      "Download: wget https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar -O ~/bfg.jar",
      "Alias: echo 'alias bfg=\"java -jar ~/bfg.jar\"' >> ~/.bashrc && source ~/.bashrc",
      "Alternative: git filter-branch (built-in)",
      "AGENT: 'Using git filter-branch to remove passwords...'",
      "Create backup branch: git branch backup-before-filter",
      "Filter: git filter-branch --tree-filter 'sed -i \"s/password: .*/password: REMOVED/\" config.yaml' HEAD",
      "Or remove file completely: git filter-branch --tree-filter 'rm -f config.yaml' HEAD",
      "AGENT: 'History rewritten. Passwords removed from all commits.'",
      "Force push: git push --force origin main",
      "AGENT: 'Pushed cleaned history. Old commits with passwords are gone.'",
      "Clean up: git reflog expire --expire=now --all && git gc --prune=now --aggressive",
      "AGENT: 'Cleaned local repository'",
      "Scenario 2: Wrong commit message",
      "USER: 'Actually, different issue - I wrote a terrible commit message'",
      "AGENT: 'Easy fix! Last commit?'",
      "USER: 'Yes'",
      "Amend: git commit --amend",
      "AGENT: 'Opening editor. Modify message, save and close.'",
      "Or directly: git commit --amend -m 'New better message'",
      "If pushed: git push --force-with-lease origin main",
      "--force-with-lease safer than --force",
      "Scenario 3: Committed to wrong branch",
      "USER: 'Wait, I have another issue - I committed to main instead of feature branch'",
      "AGENT: 'No problem! Let me move that commit.'",
      "Check commits: git log --oneline -5",
      "AGENT: 'Which commits should be on feature branch?'",
      "USER: 'Last 2 commits'",
      "Create feature branch: git branch feature-new HEAD",
      "Or checkout existing: git checkout feature-existing",
      "Cherry-pick: git cherry-pick main~2..main",
      "Switch back: git checkout main",
      "Reset main: git reset --hard HEAD~2",
      "AGENT: 'Done! Last 2 commits moved to feature-new branch.'",
      "Scenario 4: Merge conflict mess",
      "USER: 'I have merge conflicts and don't know what to do'",
      "AGENT: 'Let me check the conflict situation...'",
      "Check status: git status",
      "AGENT: 'You have conflicts in: file1.py, file2.js'",
      "Show conflicts: git diff --name-only --diff-filter=U",
      "AGENT: 'Options:'",
      "AGENT: '1. Keep your changes: git checkout --ours <file>'",
      "AGENT: '2. Keep their changes: git checkout --theirs <file>'",
      "AGENT: '3. Manually resolve'",
      "AGENT: '4. Abort merge: git merge --abort'",
      "USER: 'Keep my version of file1.py, their version of file2.js'",
      "Keep ours: git checkout --ours file1.py",
      "Keep theirs: git checkout --theirs file2.js",
      "Stage: git add file1.py file2.js",
      "Complete merge: git commit -m 'Resolved merge conflicts'",
      "AGENT: 'Merge completed!'",
      "Create safety aliases: AGENT: 'Creating Git safety aliases...'",
      "Add aliases: cat >> ~/.gitconfig << 'EOF'",
      "[alias]",
      "  undo = reset --soft HEAD~1",
      "  unstage = reset HEAD",
      "  amend = commit --amend --no-edit",
      "  nevermind = !git reset --hard HEAD && git clean -fd",
      "  branches = branch -a",
      "  last = log -1 HEAD --stat",
      "  visual = log --oneline --graph --decorate --all",
      "  whoops = commit --amend --no-edit",
      "EOF",
      "AGENT: 'Added helpful Git aliases:'",
      "AGENT: '- git undo (undo last commit)'",
      "AGENT: '- git unstage (unstage files)'",
      "AGENT: '- git nevermind (reset everything)'",
      "AGENT: '- git visual (pretty log)'",
      "Create cheat sheet: cat > ~/git-emergency.txt << 'EOF'",
      "Git Emergency Commands",
      "",
      "Undo last commit (keep changes):",
      "  git reset --soft HEAD~1",
      "",
      "Undo last commit (discard changes):",
      "  git reset --hard HEAD~1",
      "",
      "Remove file from last commit:",
      "  git reset HEAD~1 <file>",
      "  git commit -c ORIG_HEAD",
      "",
      "Change last commit message:",
      "  git commit --amend",
      "",
      "Undo git add:",
      "  git reset <file>",
      "",
      "Discard local changes:",
      "  git checkout -- <file>",
      "",
      "Abort merge:",
      "  git merge --abort",
      "",
      "Show what changed:",
      "  git show HEAD",
      "",
      "Recover deleted branch:",
      "  git reflog",
      "  git checkout -b <branch> <commit>",
      "EOF",
      "AGENT: 'Created ~/git-emergency.txt cheat sheet'"
    ],
    "commands": ["git", "sed", "cp", "echo", "wget", "cat", "chmod", "source"],
    "packages": {
      "debian_ubuntu": ["git"],
      "arch": ["git"]
    },
    "related_commands": ["git", "sed", "grep"],
    "complexity": "intermediate",
    "tags": ["git", "version-control", "undo", "commits", "troubleshooting", "real-world", "ai-agent"]
  }
]

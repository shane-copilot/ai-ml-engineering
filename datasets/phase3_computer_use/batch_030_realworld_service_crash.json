[
  {
    "id": "scenario_service_crashed_001",
    "command": "multiple",
    "scenario": "User: My web server/service keeps crashing",
    "problem": "Service crashes repeatedly, need to diagnose and fix",
    "solution": "Check logs, identify issue, configure auto-restart, fix root cause",
    "steps": [
      "USER SAYS: 'My web server keeps crashing! It's down again.'",
      "AGENT: 'Let me check what's happening. What service is it?'",
      "USER: 'Nginx web server'",
      "AGENT: 'Checking Nginx status...'",
      "Check status: sudo systemctl status nginx",
      "AGENT: 'Nginx is inactive (dead). Let me check why it crashed...'",
      "Check recent logs: sudo journalctl -u nginx -n 50 --no-pager",
      "AGENT: 'Found the error: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)'",
      "AGENT: 'Something else is using port 80. Let me find it...'",
      "Find port 80: sudo lsof -i :80",
      "AGENT: 'Apache is running on port 80! That's blocking Nginx.'",
      "USER: 'I don't need Apache, stop it'",
      "Stop Apache: sudo systemctl stop apache2",
      "Disable Apache: sudo systemctl disable apache2",
      "AGENT: 'Apache stopped and disabled. Starting Nginx...'",
      "Start nginx: sudo systemctl start nginx",
      "Verify: sudo systemctl status nginx",
      "AGENT: 'Nginx is running! Checking if it stays up...'",
      "Wait: sleep 5",
      "Check again: sudo systemctl is-active nginx",
      "AGENT: 'Still running. Let me enable auto-restart in case it crashes...'",
      "Edit service: sudo systemctl edit nginx",
      "Add restart config: AGENT: 'Adding automatic restart configuration...'",
      "Create override: sudo mkdir -p /etc/systemd/system/nginx.service.d",
      "Create file: cat | sudo tee /etc/systemd/system/nginx.service.d/restart.conf << 'EOF'",
      "[Service]",
      "Restart=always",
      "RestartSec=5",
      "EOF",
      "AGENT: 'Configured: If Nginx crashes, systemd will restart it after 5 seconds'",
      "Reload daemon: sudo systemctl daemon-reload",
      "AGENT: 'Configuration applied.'",
      "Test crash: AGENT: 'Want to test the auto-restart? I'll kill Nginx and watch it restart.'",
      "USER: 'Yes'",
      "Kill nginx: sudo killall nginx",
      "Wait: sleep 6",
      "Check status: sudo systemctl status nginx",
      "AGENT: 'It auto-restarted! Uptime shows it restarted 5 seconds ago. ✓'",
      "Scenario: Application service crashes",
      "USER: 'Actually, it's my Node.js app that keeps crashing'",
      "AGENT: 'Let me check your app service...'",
      "Check service: sudo systemctl status myapp",
      "AGENT: 'Service is failed. Checking error logs...'",
      "Check logs: sudo journalctl -u myapp -n 100 --no-pager",
      "AGENT: 'Error: EADDRINUSE: address already in use :::3000'",
      "AGENT: 'Your app can't start because port 3000 is in use.'",
      "Find port: sudo lsof -i :3000",
      "AGENT: 'Found old Node process still running (PID 1234). Killing it...'",
      "Kill: sudo kill 1234",
      "Wait: sleep 2",
      "Verify killed: sudo lsof -i :3000",
      "AGENT: 'Port free. Restarting app...'",
      "Restart: sudo systemctl restart myapp",
      "Check logs: sudo journalctl -u myapp -f",
      "AGENT: 'App starting... checking logs...'",
      "Wait for startup: sleep 5",
      "AGENT: 'App is running! Testing...'",
      "Test: curl -I http://localhost:3000",
      "AGENT: 'Returns 200 OK. App is working! ✓'",
      "Scenario: Out of memory crash",
      "USER: 'It crashed again!'",
      "AGENT: 'Checking logs...'",
      "Check OOM: sudo journalctl -u myapp | grep -i 'out of memory\\|oom\\|killed'",
      "AGENT: 'Found it! Process was killed by OOM (Out Of Memory) killer.'",
      "AGENT: 'Your app is using too much memory. Checking system memory...'",
      "Check memory: free -h",
      "AGENT: 'System has 8GB RAM, only 500MB free. Let me check memory usage...'",
      "Show top memory: ps aux --sort=-rss | head -10",
      "AGENT: 'Your app is using 6GB RAM! That's the problem.'",
      "AGENT: 'Options:'",
      "AGENT: '1. Add more RAM'",
      "AGENT: '2. Optimize app to use less memory'",
      "AGENT: '3. Enable swap for temporary relief'",
      "AGENT: '4. Set memory limit for service'",
      "USER: 'Set a memory limit'",
      "AGENT: 'I'll limit the service to 4GB max...'",
      "Edit service: sudo systemctl edit myapp",
      "Add limit: cat | sudo tee /etc/systemd/system/myapp.service.d/memory.conf << 'EOF'",
      "[Service]",
      "MemoryMax=4G",
      "MemoryHigh=3.5G",
      "EOF",
      "Reload: sudo systemctl daemon-reload",
      "Restart: sudo systemctl restart myapp",
      "AGENT: 'Memory limit set. Service will be throttled if it tries to use >4GB.'",
      "Create monitoring script: AGENT: 'Creating service monitor tool...'",
      "Create monitor: cat > ~/monitor-service.sh << 'EOF'",
      "#!/bin/bash",
      "SERVICE=\"${1:-nginx}\"",
      "echo \"=== Monitoring $SERVICE ===\"",
      "echo \"Press Ctrl+C to stop\"",
      "echo \"\"",
      "while true; do",
      "  clear",
      "  echo \"Time: $(date)\"",
      "  echo \"\"",
      "  echo \"Service Status:\"",
      "  systemctl status $SERVICE | head -10",
      "  echo \"\"",
      "  echo \"Memory Usage:\"",
      "  ps aux | grep $SERVICE | grep -v grep | awk '{print $11, \":\", $4\"% RAM,\", $6/1024\"MB\"}'",
      "  echo \"\"",
      "  echo \"Recent Logs:\"",
      "  journalctl -u $SERVICE -n 3 --no-pager",
      "  sleep 5",
      "done",
      "EOF",
      "Make executable: chmod +x ~/monitor-service.sh",
      "Create restart script: cat > ~/restart-service.sh << 'EOF'",
      "#!/bin/bash",
      "if [ -z \"$1\" ]; then",
      "  echo 'Usage: ./restart-service.sh <service-name>'",
      "  exit 1",
      "fi",
      "echo \"Restarting $1...\"",
      "sudo systemctl restart $1",
      "sleep 2",
      "echo \"\"",
      "echo \"Status:\"",
      "sudo systemctl status $1 | head -10",
      "echo \"\"",
      "echo \"Recent logs:\"",
      "sudo journalctl -u $1 -n 10 --no-pager",
      "EOF",
      "Make executable: chmod +x ~/restart-service.sh",
      "Create health check: cat > ~/check-service-health.sh << 'EOF'",
      "#!/bin/bash",
      "SERVICE=\"${1:-nginx}\"",
      "echo \"=== Service Health Check ===\"",
      "echo \"\"",
      "echo \"Service: $SERVICE\"",
      "echo \"\"",
      "echo \"1. Status:\"",
      "systemctl is-active $SERVICE && echo '✓ Running' || echo '✗ Not running'",
      "echo \"\"",
      "echo \"2. Enabled at boot:\"",
      "systemctl is-enabled $SERVICE && echo '✓ Enabled' || echo '✗ Disabled'",
      "echo \"\"",
      "echo \"3. Uptime:\"",
      "systemctl show $SERVICE --property=ActiveEnterTimestamp | cut -d= -f2",
      "echo \"\"",
      "echo \"4. Restart count:\"",
      "systemctl show $SERVICE --property=NRestarts | cut -d= -f2",
      "echo \"\"",
      "echo \"5. Failed status:\"",
      "systemctl show $SERVICE --property=ExecMainStatus | cut -d= -f2",
      "echo \"\"",
      "echo \"6. Recent errors:\"",
      "journalctl -u $SERVICE -p err -n 5 --no-pager",
      "EOF",
      "Make executable: chmod +x ~/check-service-health.sh",
      "Add aliases: cat >> ~/.bashrc << 'EOF'",
      "# Service management",
      "alias svc-status='sudo systemctl status'",
      "alias svc-restart='sudo systemctl restart'",
      "alias svc-start='sudo systemctl start'",
      "alias svc-stop='sudo systemctl stop'",
      "alias svc-enable='sudo systemctl enable'",
      "alias svc-logs='sudo journalctl -u'",
      "alias svc-follow='sudo journalctl -u -f'",
      "EOF",
      "Source: source ~/.bashrc",
      "Create emergency restart: cat > ~/emergency-restart.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Emergency Service Restart ==='",
      "echo ''",
      "echo 'This will:'",
      "echo '1. Stop all instances of the service'",
      "echo '2. Kill any stuck processes'",
      "echo '3. Clean up port conflicts'",
      "echo '4. Restart service'",
      "echo ''",
      "read -p 'Service name: ' SERVICE",
      "read -p 'Port number (or press Enter to skip): ' PORT",
      "echo ''",
      "echo 'Stopping service...'",
      "sudo systemctl stop $SERVICE",
      "sleep 2",
      "echo 'Killing stuck processes...'",
      "sudo pkill -f $SERVICE",
      "if [ -n \"$PORT\" ]; then",
      "  echo \"Clearing port $PORT...\"",
      "  sudo lsof -ti :$PORT | xargs sudo kill -9 2>/dev/null",
      "fi",
      "sleep 2",
      "echo 'Starting service...'",
      "sudo systemctl start $SERVICE",
      "sleep 2",
      "echo ''",
      "echo 'Status:'",
      "sudo systemctl status $SERVICE | head -10",
      "EOF",
      "Make executable: chmod +x ~/emergency-restart.sh",
      "Final summary: AGENT: 'Service crash issues fixed! Summary:'",
      "AGENT: ''",
      "AGENT: '✓ Identified and fixed port conflict'",
      "AGENT: '✓ Configured automatic restart on crash'",
      "AGENT: '✓ Set memory limits to prevent OOM kills'",
      "AGENT: '✓ Service running stable now'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '- ~/monitor-service.sh (live monitoring)'",
      "AGENT: '- ~/restart-service.sh (smart restart)'",
      "AGENT: '- ~/check-service-health.sh (health check)'",
      "AGENT: '- ~/emergency-restart.sh (force restart)'",
      "AGENT: ''",
      "AGENT: 'Quick commands:'",
      "AGENT: '- svc-status <name>'",
      "AGENT: '- svc-restart <name>'",
      "AGENT: '- svc-logs <name>'",
      "AGENT: ''",
      "AGENT: 'Auto-restart configured: Service will auto-recover from crashes. ✓'"
    ],
    "commands": ["systemctl", "journalctl", "lsof", "killall", "kill", "free", "ps", "curl", "pkill", "cat", "chmod", "source", "grep", "sleep"],
    "packages": {
      "debian_ubuntu": ["systemd", "lsof", "procps", "curl"],
      "arch": ["systemd", "lsof", "procps-ng", "curl"]
    },
    "related_commands": ["systemctl", "journalctl", "service", "ps", "kill"],
    "complexity": "intermediate",
    "tags": ["systemd", "service-crash", "monitoring", "troubleshooting", "auto-restart", "real-world", "ai-agent"]
  }
]

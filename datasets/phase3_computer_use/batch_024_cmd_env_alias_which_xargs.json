[
  {
    "id": "cmd_env_001",
    "command": "env",
    "scenario": "View and modify environment variables",
    "problem": "Need to check environment settings or run command with modified environment",
    "solution": "Use env to display and manipulate environment variables",
    "steps": [
      "View all variables: env",
      "Shows all environment variables",
      "Sort alphabetically: env | sort",
      "Search specific: env | grep PATH",
      "Or: env | grep -i java",
      "Case-insensitive search",
      "Run with clean env: env -i command",
      "Starts with empty environment",
      "Only specified vars: env -i PATH=/usr/bin HOME=$HOME command",
      "Set variable: env VAR=value command",
      "Example: env DEBUG=1 ./script.sh",
      "Multiple vars: env VAR1=val1 VAR2=val2 command",
      "Unset variable: env -u VAR command",
      "Removes VAR from environment",
      "Change directory: env -C /path/to/dir command",
      "Runs command in different directory",
      "Null-separated: env -0",
      "For scripting (xargs -0)",
      "Print path: env | grep ^PATH=",
      "Or: echo $PATH (simpler)",
      "Common environment variables:",
      "PATH: Command search path",
      "HOME: User home directory",
      "USER: Current username",
      "SHELL: Current shell",
      "PWD: Current directory",
      "EDITOR: Default text editor",
      "LANG/LC_*: Locale settings",
      "TERM: Terminal type",
      "DISPLAY: X11 display",
      "http_proxy: Proxy settings",
      "Set PATH: env PATH=/custom/path:$PATH command",
      "Prepends to PATH",
      "Or: PATH=/custom/path:$PATH command (bash)",
      "Debug mode: env DEBUG=1 python script.py",
      "Many apps check DEBUG var",
      "Verbose: env VERBOSE=1 make",
      "Custom config: env CONFIG_FILE=/path/to/config app",
      "Database URL: env DATABASE_URL=postgres://... django migrate",
      "Temporary change: env LANG=C command",
      "Changes locale for one command",
      "No locale: env LC_ALL=C command",
      "Disables localization",
      "Set editor: env EDITOR=nano git commit",
      "Uses nano instead of default",
      "Test environment: env -i PATH=/bin:/usr/bin HOME=$HOME bash --norc",
      "Clean shell for testing",
      "Script shebang: #!/usr/bin/env python3",
      "Finds python3 in PATH",
      "Better than: #!/usr/bin/python3 (fixed path)",
      "Portable across systems",
      "Check if set: env | grep ^JAVA_HOME=",
      "Or: [ -n \"$JAVA_HOME\" ] && echo set",
      "Diff environments: diff <(env | sort) <(sudo -u otheruser env | sort)",
      "Compare user environments",
      "Export vs env: export VAR=value (permanent in session)",
      "env VAR=value command (temporary for command)",
      "Permanent set: Add to ~/.bashrc or ~/.profile",
      "export PATH=$PATH:/new/path",
      "Then: source ~/.bashrc",
      "System-wide: Add to /etc/environment",
      "VAR=value (no export keyword)",
      "Or: /etc/profile.d/custom.sh",
      "Common use cases:",
      "Python virtual env: env VIRTUAL_ENV=/path/to/venv python script.py",
      "Node env: env NODE_ENV=production node app.js",
      "Rails env: env RAILS_ENV=production rails server",
      "Go: env GOPATH=/custom/path go build",
      "Java: env JAVA_HOME=/usr/lib/jvm/java-11 javac Main.java",
      "Proxy: env http_proxy=http://proxy:8080 wget http://example.com",
      "No proxy: env http_proxy= wget http://local-server",
      "Unsets proxy",
      "Testing: env TEST=1 pytest",
      "CI/CD: env CI=true npm test",
      "Docker: docker run -e VAR=value image",
      "Sets environment in container",
      "Kubernetes: env in pod spec",
      "Debugging PATH issues: env PATH=/usr/bin:/bin which command",
      "Minimal PATH to test",
      "Security: Don't store secrets in environment",
      "Visible in process list: ps eww -p PID",
      "Use .env files or secret managers",
      "Load .env file: export $(cat .env | xargs)",
      "Or use: source .env (if formatted correctly)",
      "Or: env $(cat .env | xargs) command",
      "Script example:",
      "#!/bin/bash",
      "echo \"Current PATH: $PATH\"",
      "env PATH=/custom:$PATH which python3",
      "env DEBUG=1 VERBOSE=1 ./app",
      "Alternative tools:",
      "printenv: Similar to env, only prints",
      "printenv VAR: Shows single variable",
      "set: Shows all variables (including shell-local)",
      "export: Sets permanent session variables",
      "direnv: Auto-loads .envrc per directory",
      "Comparison:",
      "env: Display and modify for one command",
      "export: Permanent in current session",
      "printenv: Display only",
      "set: Shell variables + environment",
      "Common patterns:",
      "Default value: VAR=${VAR:-default}",
      "If VAR not set, use 'default'",
      "Required var: : ${VAR:?Error: VAR not set}",
      "Exits if VAR empty",
      "Conditional: [ \"$ENV\" = \"prod\" ] && production_command",
      "After checking: Use env for temporary overrides",
      "Use export/.bashrc for permanent changes"
    ],
    "commands": ["env", "export", "printenv", "set", "source", "grep", "sort", "diff", "which", "cat", "xargs"],
    "packages": {
      "debian_ubuntu": ["coreutils"],
      "arch": ["coreutils"]
    },
    "related_commands": ["export", "printenv", "set", "unset"],
    "complexity": "beginner",
    "tags": ["env", "environment-variables", "configuration", "path", "shell"]
  },
  {
    "id": "cmd_alias_001",
    "command": "alias",
    "scenario": "Create command shortcuts and modify command behavior",
    "problem": "Typing long commands repeatedly or want safer default options",
    "solution": "Use alias to create command shortcuts",
    "steps": [
      "List all aliases: alias",
      "Shows current aliases",
      "Create alias: alias ll='ls -lah'",
      "Now 'll' runs 'ls -lah'",
      "Temporary (current session only)",
      "With options: alias rm='rm -i'",
      "Interactive rm (asks before delete)",
      "Multiple commands: alias update='sudo apt update && sudo apt upgrade'",
      "Chain with &&",
      "With pipes: alias busy='cat /dev/urandom | hexdump | grep \"ca fe\"'",
      "Check specific: alias ll",
      "Shows definition of 'll'",
      "Remove alias: unalias ll",
      "Remove all: unalias -a",
      "Bypass alias: \\command",
      "Example: \\rm file.txt (uses real rm, not alias)",
      "Or: command rm file.txt",
      "Make permanent: Add to ~/.bashrc (bash) or ~/.zshrc (zsh)",
      "alias ll='ls -lah'",
      "Then: source ~/.bashrc",
      "Or restart terminal",
      "Common safety aliases:",
      "alias rm='rm -i' (interactive delete)",
      "alias cp='cp -i' (interactive copy)",
      "alias mv='mv -i' (interactive move)",
      "alias ln='ln -i' (interactive link)",
      "Safer rm: alias rm='rm -I'",
      "-I prompts only if deleting 3+ files",
      "Or: alias rm='trash' (uses trash-cli)",
      "Common convenience aliases:",
      "alias ll='ls -lah' (detailed list)",
      "alias la='ls -A' (all except . and ..)",
      "alias l='ls -CF' (classified)",
      "alias ..='cd ..' (up one directory)",
      "alias ...='cd ../..' (up two)",
      "alias ....='cd ../../..' (up three)",
      "alias ~='cd ~' (go home)",
      "alias h='history' (show history)",
      "alias c='clear' (clear screen)",
      "alias e='exit' (quick exit)",
      "alias df='df -h' (human-readable)",
      "alias du='du -h' (human-readable)",
      "alias free='free -h' (human-readable)",
      "alias grep='grep --color=auto' (colored)",
      "alias mkdir='mkdir -p' (create parents)",
      "Development aliases:",
      "alias gs='git status' (git shortcut)",
      "alias ga='git add' (git add)",
      "alias gc='git commit' (git commit)",
      "alias gp='git push' (git push)",
      "alias gl='git log --oneline' (compact log)",
      "alias gd='git diff' (git diff)",
      "alias py='python3' (python shortcut)",
      "alias ipy='ipython' (ipython)",
      "alias serve='python3 -m http.server' (web server)",
      "alias ports='sudo lsof -i -P -n | grep LISTEN' (listening ports)",
      "alias myip='curl ifconfig.me' (public IP)",
      "System admin aliases:",
      "alias update='sudo apt update && sudo apt upgrade' (Ubuntu)",
      "alias upgrade='sudo pacman -Syu' (Arch)",
      "alias install='sudo apt install' (Ubuntu)",
      "alias remove='sudo apt remove' (Ubuntu)",
      "alias search='apt search' (Ubuntu)",
      "alias clean='sudo apt autoremove && sudo apt autoclean' (Ubuntu)",
      "alias reboot='sudo reboot' (reboot)",
      "alias shutdown='sudo shutdown -h now' (shutdown)",
      "alias logs='journalctl -xe' (systemd logs)",
      "alias errors='journalctl -p err' (errors only)",
      "Network aliases:",
      "alias ping='ping -c 5' (limit 5 pings)",
      "alias fastping='ping -c 10 -i 0.2' (fast ping)",
      "alias ports='ss -tulpn' (open ports)",
      "alias listening='ss -tulpn | grep LISTEN' (listening)",
      "alias connections='ss -tun' (established)",
      "Docker aliases:",
      "alias d='docker' (docker)",
      "alias dc='docker compose' (compose)",
      "alias dps='docker ps' (running)",
      "alias dpsa='docker ps -a' (all)",
      "alias dim='docker images' (images)",
      "alias dex='docker exec -it' (exec)",
      "alias dlog='docker logs -f' (follow logs)",
      "Kubernetes aliases:",
      "alias k='kubectl' (kubectl)",
      "alias kgp='kubectl get pods' (get pods)",
      "alias kgs='kubectl get svc' (services)",
      "alias kd='kubectl describe' (describe)",
      "alias kl='kubectl logs -f' (logs)",
      "Complex aliases with functions:",
      "In ~/.bashrc: mkcd() { mkdir -p \"$1\" && cd \"$1\"; }",
      "Creates and enters directory",
      "Extract: extract() { ... case statement ... }",
      "Auto-extracts any archive",
      "Find file: ff() { find . -name \"*$1*\"; }",
      "With arguments: alias greph='grep -rnw . -e'",
      "Then: greph 'pattern' (recursive grep)",
      "Conditional aliases: [ -x /usr/bin/vim ] && alias vi='vim'",
      "Only if vim installed",
      "Check before using: type ll",
      "Shows if alias or command",
      "Precedence: alias > function > builtin > external command",
      "Override: Define in order: alias, then function, etc.",
      "Escape special chars: alias echo_quote='echo \\'quoted\\''",
      "Distribution defaults: Ubuntu has some built-in",
      "ll, la, l usually pre-defined",
      "See: alias",
      "Backup config: cp ~/.bashrc ~/.bashrc.backup",
      "Before adding many aliases",
      "Share aliases: Put in ~/.bash_aliases",
      "Source from ~/.bashrc: [ -f ~/.bash_aliases ] && . ~/.bash_aliases",
      "Separate file for organization",
      "Temporary disable: unalias aliasname",
      "Re-enable: source ~/.bashrc",
      "Script detection: if [ -t 0 ]; then # interactive",
      "Aliases only work in interactive shells",
      "Not in scripts (use functions instead)",
      "Alternative: Functions more powerful",
      "function mycommand() { ... }",
      "Can use arguments: $1, $2, etc.",
      "Debugging: type -a command",
      "Shows all definitions (alias, function, file)",
      "Common mistakes:",
      "Recursive alias: alias ls='ls --color' (okay)",
      "But: alias ls='ls --color && ls' (infinite loop)",
      "Spaces: alias no spaces=command (ERROR)",
      "Correct: alias nospaces='command'",
      "Quotes: alias name=\"command\" or alias name='command'",
      "Double quotes expand variables immediately",
      "Single quotes preserve literally",
      "After setting: Test alias works",
      "Then add to ~/.bashrc for persistence"
    ],
    "commands": ["alias", "unalias", "type", "source", "grep", "ls", "cd", "git", "docker", "kubectl"],
    "packages": {
      "debian_ubuntu": ["bash"],
      "arch": ["bash"]
    },
    "related_commands": ["unalias", "type", "function"],
    "complexity": "beginner",
    "tags": ["alias", "shortcuts", "bash", "shell", "productivity", "configuration"]
  },
  {
    "id": "cmd_which_001",
    "command": "which",
    "scenario": "Find location of executable in PATH",
    "problem": "Multiple versions installed or command not found, need to see which one is being used",
    "solution": "Use which to locate commands in PATH",
    "steps": [
      "Find command: which python3",
      "Shows path: /usr/bin/python3",
      "First occurrence in PATH",
      "Multiple commands: which python3 pip3 git",
      "All executables: which -a python3",
      "Shows all matches in PATH",
      "Useful when multiple versions installed",
      "Example: which -a python (might show python2 and python3)",
      "Silent mode: which -s command",
      "No output, only exit code",
      "0 = found, 1 = not found",
      "In script: if which python3 > /dev/null; then echo \"found\"; fi",
      "Check existence without output",
      "Show all: which -a python",
      "Alternative versions",
      "Understanding output:",
      "Absolute path: /usr/bin/command",
      "Symlink: Shows symlink path (not target)",
      "Not found: No output (or error message)",
      "Common use cases:",
      "Check installation: which docker",
      "If no output, not installed or not in PATH",
      "Python version: which python3",
      "Then: python3 --version",
      "Find binary location: which nginx",
      "Check editor: which $EDITOR",
      "Or: echo $EDITOR",
      "Virtual environment: which python (inside venv)",
      "Shows: /path/to/venv/bin/python",
      "System vs local: which -a node",
      "Might show: /usr/local/bin/node and /usr/bin/node",
      "PATH order: which shows first match",
      "Earlier in PATH = higher priority",
      "Alias vs command: which ll",
      "Doesn't show aliases (use type instead)",
      "Symlinks: which python",
      "Might show: /usr/bin/python → /usr/bin/python3.9",
      "Follow symlink: ls -l $(which python)",
      "Or: readlink -f $(which python)",
      "Debug PATH: echo $PATH",
      "Then: which command",
      "If not found, command not in PATH dirs",
      "Compare shells: bash -c 'which python'",
      "vs: zsh -c 'which python'",
      "Different PATH in different shells",
      "Script example:",
      "#!/bin/bash",
      "if ! which python3 > /dev/null; then",
      "  echo \"Python3 not found. Please install.\"",
      "  exit 1",
      "fi",
      "PYTHON=$(which python3)",
      "echo \"Using Python at: $PYTHON\"",
      "$PYTHON --version",
      "Find all versions:",
      "for dir in $(echo $PATH | tr ':' ' '); do",
      "  [ -x \"$dir/python\" ] && echo \"$dir/python\"",
      "done",
      "Alternative commands:",
      "type: More comprehensive (shows aliases, functions, builtins)",
      "type python3",
      "type -a python3 (all definitions)",
      "type -p python3 (path only, like which)",
      "whereis: Shows binary, source, man page",
      "whereis python3",
      "locate: Searches database (all files, not just PATH)",
      "locate python3",
      "command -v: POSIX-compliant alternative",
      "command -v python3",
      "Comparison:",
      "which: Only executables in PATH",
      "type: Aliases, functions, builtins, executables",
      "whereis: Binary + man pages + source",
      "locate: All files system-wide",
      "Common scenarios:",
      "Node version: which node && node --version",
      "Java: which java && java -version",
      "Git: which git && git --version",
      "Compiler: which gcc && gcc --version",
      "Build tool: which make && make --version",
      "Package manager: which apt || which yum || which pacman",
      "Detect OS by package manager",
      "Custom PATH: PATH=/custom/path:$PATH which command",
      "Test different PATH",
      "In Makefile: PYTHON := $(shell which python3)",
      "Dockerfiles: RUN which python3 || apt install -y python3",
      "Install if not found",
      "CI/CD: which docker || install_docker_script",
      "Not found troubleshooting:",
      "1. which command (no output?)",
      "2. Check installation: dpkg -l | grep command (Ubuntu)",
      "3. Check PATH: echo $PATH",
      "4. Find binary: find /usr -name command 2>/dev/null",
      "5. Add to PATH or reinstall",
      "Add to PATH: export PATH=$PATH:/new/location",
      "Permanent: Add to ~/.bashrc",
      "Rehash: In some shells: hash -r",
      "Clears command cache",
      "Security: Verify binary location",
      "Malicious binaries earlier in PATH can hijack commands",
      "Check: which -a command",
      "Unexpected path? Investigate",
      "After installation: which command",
      "If not found: source ~/.bashrc or restart terminal",
      "Or: hash -r (bash)"
    ],
    "commands": ["which", "type", "whereis", "locate", "command", "echo", "ls", "readlink", "find", "hash"],
    "packages": {
      "debian_ubuntu": ["debianutils"],
      "arch": ["which"]
    },
    "related_commands": ["type", "whereis", "locate", "command"],
    "complexity": "beginner",
    "tags": ["which", "path", "executable", "location", "command-line"]
  },
  {
    "id": "cmd_xargs_001",
    "command": "xargs",
    "scenario": "Build and execute command from standard input",
    "problem": "Need to pass list of items as arguments to command that doesn't accept stdin",
    "solution": "Use xargs to convert stdin to command arguments",
    "steps": [
      "Basic usage: echo 'file1 file2 file3' | xargs rm",
      "Passes files as arguments to rm",
      "From find: find . -name '*.tmp' | xargs rm",
      "Deletes all .tmp files",
      "One at a time: find . -name '*.txt' | xargs -n 1 cat",
      "-n 1 runs cat once per file",
      "Multiple args: find . -name '*.txt' | xargs -n 2 diff",
      "Compares files pairwise",
      "Custom delimiter: echo 'a,b,c' | xargs -d , echo",
      "-d specifies delimiter (comma)",
      "Null-terminated: find . -name '*.txt' -print0 | xargs -0 rm",
      "Handles filenames with spaces/newlines",
      "CRITICAL for file operations!",
      "Interactive: echo 'file1 file2' | xargs -p rm",
      "-p prompts before executing",
      "Verbose: echo 'file1 file2' | xargs -t rm",
      "-t prints command before executing",
      "Max processes: find . -name '*.txt' | xargs -P 4 gzip",
      "-P 4 runs 4 processes in parallel",
      "Speeds up on multi-core",
      "Replace string: find . -name '*.txt' | xargs -I {} cp {} {}.bak",
      "-I {} uses {} as placeholder",
      "Can appear multiple times",
      "Or: find . -name '*.txt' | xargs -I FILE cp FILE FILE.bak",
      "Max chars: echo 'very long args...' | xargs -s 1000 command",
      "-s limits argument string size",
      "Exit on error: echo 'file1 file2' | xargs -n 1 -o some_command",
      "-o runs command with stdin",
      "No run if empty: echo '' | xargs -r rm",
      "-r doesn't run if no input",
      "Common patterns:",
      "Delete files: find . -name '*.log' -print0 | xargs -0 rm",
      "Move files: find . -name '*.txt' | xargs -I {} mv {} /dest/",
      "Compress files: find . -name '*.txt' | xargs -P 4 gzip",
      "4 parallel gzip processes",
      "Change permissions: find . -type f | xargs chmod 644",
      "Find and grep: find . -name '*.py' | xargs grep 'import'",
      "Or: find . -name '*.py' -exec grep 'import' {} +",
      "Count lines: find . -name '*.txt' | xargs wc -l",
      "Download URLs: cat urls.txt | xargs -n 1 -P 5 wget",
      "5 parallel downloads",
      "With git: git ls-files | xargs grep 'TODO'",
      "Search only tracked files",
      "Docker cleanup: docker images -q | xargs docker rmi",
      "Removes all images (-q = IDs only)",
      "Kill processes: ps aux | grep pattern | awk '{print $2}' | xargs kill",
      "Or: pgrep pattern | xargs kill",
      "Understanding -I:",
      "find . -name '*.txt' | xargs -I FILE echo 'Processing FILE'",
      "FILE replaced with each input",
      "Multiple uses: xargs -I {} sh -c 'cp {} {}.bak && echo Backed up {}'",
      "Complex commands need sh -c",
      "Debugging: Add -t to see commands",
      "find . -name '*.txt' | xargs -t -I {} cp {} {}.bak",
      "Shows what will execute",
      "Error handling: find . -name '*.txt' | xargs -I {} sh -c 'command {} || echo Failed: {}'",
      "Continues on error, reports failures",
      "With confirmation: find . -name '*.tmp' | xargs -p -n 1 rm",
      "Asks for each file",
      "Spaces in filenames: ALWAYS use -print0 and -0",
      "find . -name '* *' -print0 | xargs -0 ls -l",
      "Without: breaks on spaces",
      "Limit memory: xargs -n 100 command",
      "Processes 100 items at a time",
      "From file: xargs -a filelist.txt rm",
      "Reads arguments from file",
      "Stdin still available for command",
      "Script example:",
      "#!/bin/bash",
      "# Backup all .conf files",
      "find /etc -name '*.conf' -print0 | \\",
      "  xargs -0 -I {} sh -c 'cp {} {}.backup.$(date +%Y%m%d)'",
      "Complex processing:",
      "find . -name '*.jpg' -print0 | \\",
      "  xargs -0 -P 4 -I {} sh -c '",
      "    convert {} -resize 800x600 thumb_{}",
      "    echo Processed {}",
      "  '",
      "4 parallel image conversions",
      "Alternative to xargs: find -exec",
      "find . -name '*.txt' -exec rm {} \\;",
      "Runs once per file (slow)",
      "find . -name '*.txt' -exec rm {} +",
      "Batches arguments (faster, like xargs)",
      "Comparison:",
      "xargs: More flexible, parallel execution",
      "find -exec: Built-in, simpler for basic cases",
      "Performance: xargs with -P is fastest",
      "Parallel execution crucial for I/O-bound tasks",
      "Common mistakes:",
      "Spaces: find . | xargs rm (WRONG for spaces)",
      "Correct: find . -print0 | xargs -0 rm",
      "Quotes: echo 'a b' | xargs command",
      "Sees 'a and b' separately (quotes removed)",
      "No input: xargs command (hangs waiting for stdin)",
      "Use: xargs -r command (skip if empty)",
      "After running: Check results",
      "Verify with: find, ls, etc.",
      "For production: Test with -p first (interactive)",
      "Then remove -p for automated run"
    ],
    "commands": ["xargs", "find", "rm", "cp", "mv", "grep", "gzip", "wget", "kill", "docker", "ps", "awk", "sh"],
    "packages": {
      "debian_ubuntu": ["findutils"],
      "arch": ["findutils"]
    },
    "related_commands": ["find", "parallel", "sh"],
    "complexity": "intermediate",
    "tags": ["xargs", "piping", "batch-processing", "find", "parallel", "command-line"]
  }
]

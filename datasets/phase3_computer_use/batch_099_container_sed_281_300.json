[
  {
    "id": "scenario_docker_container_debug_102",
    "command": "docker",
    "scenario": "Debug a Docker container that keeps restarting or exits immediately after starting.",
    "problem": "A container starts but immediately exits with status code 1. The application logs aren't visible, and the container doesn't stay running long enough to exec into it for debugging.",
    "solution": "Use docker logs to view output from exited containers, inspect container configuration with docker inspect, override entrypoint to keep container running, and use docker exec to investigate the filesystem and process state.",
    "steps": [
      "USER SAYS: 'My Docker container starts but immediately crashes. I can't even get into it to see what's wrong. How do I debug this?'",
      "AGENT: 'Docker has several tools for debugging crashed containers! We can view logs from exited containers, inspect their configuration, and even override the entrypoint to keep them running for investigation. Let me show you.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: Docker container debugging...'",
      "AGENT: '[Searching] \"docker debug exited container logs inspect\"'",
      "AGENT: '[Found] `docker logs` works on both running and stopped containers.'",
      "AGENT: '[Found] `docker inspect` shows full container configuration and state.'",
      "AGENT: '[Found] Can override entrypoint with `--entrypoint` to keep container alive.'",
      "AGENT: '[Found] Exit codes: 0=success, 1=application error, 137=killed by OOM, 139=segfault.'",
      "AGENT: '‚úì Research complete! Let's debug that container.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Check Container Status ---'",
      "Run command: `docker ps -a | grep myapp`",
      "AGENT: 'CONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS                      PORTS     NAMES'",
      "AGENT: 'a1b2c3d4e5f6   myapp:latest  \"/app/start.sh\"          30 seconds ago   Exited (1) 28 seconds ago             myapp'",
      "AGENT: ''",
      "AGENT: 'üí° Container exited with code 1 (application error) 28 seconds ago.'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: View Container Logs ---'",
      "Run command: `docker logs myapp`",
      "AGENT: 'Starting application...'",
      "AGENT: 'Loading configuration from /app/config.json'",
      "AGENT: 'Error: ENOENT: no such file or directory, open \\'/app/config.json\\''",
      "AGENT: '    at Object.openSync (fs.js:476:3)'",
      "AGENT: '    at Object.readFileSync (fs.js:377:35)'",
      "AGENT: '    at Object.<anonymous> (/app/server.js:12:22)'",
      "AGENT: 'Fatal error: Cannot start without configuration file'",
      "AGENT: ''",
      "AGENT: 'üéØ FOUND IT! Missing /app/config.json file'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Inspect Container Configuration ---'",
      "Run command: `docker inspect myapp | jq '.[0].Config.Env'`",
      "AGENT: '['",
      "AGENT: '  \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",'",
      "AGENT: '  \"NODE_ENV=production\",'",
      "AGENT: '  \"PORT=3000\"'",
      "AGENT: ']'",
      "AGENT: ''",
      "AGENT: 'Check mounts:'",
      "Run command: `docker inspect myapp | jq '.[0].Mounts'`",
      "AGENT: '[]'",
      "AGENT: ''",
      "AGENT: 'üí° No config file mounted! That's why it's missing.'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Override Entrypoint to Investigate ---'",
      "AGENT: 'Start container with bash instead of the normal entrypoint:'",
      "Run command: `docker run --rm -it --entrypoint /bin/bash myapp:latest`",
      "AGENT: 'root@f6e5d4c3b2a1:/app#'",
      "AGENT: ''",
      "AGENT: 'Now we can explore the filesystem:'",
      "Run command: `ls -la /app/`",
      "AGENT: 'total 24'",
      "AGENT: 'drwxr-xr-x 1 root root 4096 Oct  7 16:00 .'",
      "AGENT: 'drwxr-xr-x 1 root root 4096 Oct  7 16:00 ..'",
      "AGENT: '-rwxr-xr-x 1 root root  234 Oct  7 15:55 start.sh'",
      "AGENT: '-rw-r--r-- 1 root root 8192 Oct  7 15:55 server.js'",
      "AGENT: 'drwxr-xr-x 2 root root 4096 Oct  7 15:55 node_modules'",
      "AGENT: ''",
      "AGENT: 'üí° Confirmed: config.json is missing!'",
      "AGENT: ''",
      "AGENT: 'Check what the start script expects:'",
      "Run command: `cat /app/start.sh`",
      "AGENT: '#!/bin/bash'",
      "AGENT: 'echo \"Starting application...\"'",
      "AGENT: 'node /app/server.js'",
      "AGENT: ''",
      "Run command: `head -20 /app/server.js`",
      "AGENT: 'const fs = require(\\'fs\\');'",
      "AGENT: 'const express = require(\\'express\\');'",
      "AGENT: ''",
      "AGENT: '// Load configuration'",
      "AGENT: 'const configPath = process.env.CONFIG_PATH || \\'/app/config.json\\';'",
      "AGENT: 'const config = JSON.parse(fs.readFileSync(configPath, \\'utf8\\'));'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: 'üí° App needs config.json OR we can set CONFIG_PATH environment variable!'",
      "AGENT: ''",
      "Run command: `exit`",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Fix Option 1 - Mount Config File ---'",
      "AGENT: 'Create config file locally:'",
      "Create tool: `cat > config.json << 'EOF'`",
      "{\n  \"database\": {\n    \"host\": \"db.example.com\",\n    \"port\": 5432,\n    \"name\": \"myapp\"\n  },\n  \"server\": {\n    \"port\": 3000\n  }\n}\nEOF",
      "AGENT: ''",
      "AGENT: 'Run with mounted config:'",
      "Run command: `docker run -d --name myapp -v $(pwd)/config.json:/app/config.json:ro myapp:latest`",
      "AGENT: 'b2c3d4e5f6a7'",
      "AGENT: ''",
      "Run command: `docker ps | grep myapp`",
      "AGENT: 'b2c3d4e5f6a7   myapp:latest   \"/app/start.sh\"   5 seconds ago   Up 4 seconds   3000/tcp   myapp'",
      "AGENT: ''",
      "AGENT: '‚úÖ Container is running!'",
      "AGENT: ''",
      "Run command: `docker logs myapp`",
      "AGENT: 'Starting application...'",
      "AGENT: 'Loading configuration from /app/config.json'",
      "AGENT: 'Configuration loaded successfully'",
      "AGENT: 'Server listening on port 3000'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Debug Other Common Issues ---'",
      "AGENT: 'Check resource usage (memory):'",
      "Run command: `docker stats myapp --no-stream`",
      "AGENT: 'CONTAINER ID   NAME    CPU %     MEM USAGE / LIMIT     MEM %     NET I/O'",
      "AGENT: 'b2c3d4e5f6a7   myapp   0.15%     45.5MiB / 1.953GiB    2.28%     1.2kB / 0B'",
      "AGENT: ''",
      "AGENT: '‚úÖ Memory usage is normal'",
      "AGENT: ''",
      "AGENT: 'Check for specific exit codes:'",
      "AGENT: 'Exit code 137 = killed by OOM (out of memory)'",
      "AGENT: 'Exit code 139 = segmentation fault'",
      "AGENT: 'Exit code 143 = terminated by SIGTERM'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Advanced Debugging Techniques ---'",
      "AGENT: '1. View last N lines of logs:'",
      "Run command: `docker logs --tail 50 myapp`",
      "AGENT: ''",
      "AGENT: '2. Follow logs in real-time:'",
      "Run command: `docker logs -f myapp &`",
      "AGENT: ''",
      "AGENT: '3. Check container events:'",
      "Run command: `docker events --filter container=myapp --since 10m`",
      "AGENT: ''",
      "AGENT: '4. Exec into running container:'",
      "Run command: `docker exec -it myapp /bin/bash`",
      "AGENT: 'root@b2c3d4e5f6a7:/app# ps aux'",
      "AGENT: 'USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND'",
      "AGENT: 'root         1  0.0  0.1  12345  6789 ?        Ss   16:05   0:00 /bin/bash /app/start.sh'",
      "AGENT: 'root         7  0.5  2.3  98765 45678 ?        Sl   16:05   0:01 node /app/server.js'",
      "AGENT: ''",
      "AGENT: '‚úÖ Application is running properly!'",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Used docker logs to view output from crashed container.'",
      "AGENT: '  ‚úì Identified missing config.json file as root cause.'",
      "AGENT: '  ‚úì Used docker inspect to examine container configuration and mounts.'",
      "AGENT: '  ‚úì Overrode entrypoint with bash to investigate filesystem.'",
      "AGENT: '  ‚úì Fixed by mounting config file into container.'",
      "AGENT: '  ‚úì Verified container health with docker stats and ps.'",
      "AGENT: '  ‚úì Learned exit code meanings for future debugging.'",
      "AGENT: '  ‚úì You now know how to debug even the trickiest container issues! üê≥'"
    ],
    "commands": ["docker", "jq", "cat", "pwd"],
    "packages": {
      "debian_ubuntu": ["docker.io", "jq"],
      "arch": ["docker", "jq"]
    },
    "related_commands": ["docker-compose", "podman"],
    "complexity": "intermediate",
    "tags": ["docker", "containers", "debugging", "troubleshooting", "logs", "inspect", "devops"]
  },
  {
    "id": "scenario_sed_text_processing_103",
    "command": "sed",
    "scenario": "Use sed for complex text transformations in configuration files and logs.",
    "problem": "A sysadmin needs to modify configuration files across multiple servers: changing IP addresses, updating port numbers, removing comment lines, and transforming log formats. Manual editing is error-prone.",
    "solution": "Master sed patterns for search and replace, in-place editing, line deletion, multi-line transformations, and complex regex patterns. Create reusable sed scripts for common transformations.",
    "steps": [
      "USER SAYS: 'I need to update IP addresses in 50 config files and clean up log files. How can I automate this with sed?'",
      "AGENT: 'Sed is perfect for text transformations! It's a stream editor that can search, replace, delete, and transform text in powerful ways. Let me show you patterns from basic to advanced.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: Sed text processing mastery...'",
      "AGENT: '[Searching] \"sed advanced examples inplace edit regex\"'",
      "AGENT: '[Found] Basic syntax: `sed \\'s/pattern/replacement/flags\\' file`'",
      "AGENT: '[Found] Use `-i` for in-place editing (modifies file directly).'",
      "AGENT: '[Found] Flags: g=global (all occurrences), i=case-insensitive, p=print matched lines.'",
      "AGENT: '[Found] Can use different delimiters: s|old|new| or s#old#new# when pattern contains /'",
      "AGENT: '‚úì Research complete! Let's master sed transformations.'",
      "AGENT: ''",
      "AGENT: '--- Pattern 1: Simple Search and Replace ---'",
      "Create tool: `cat > test.conf << 'EOF'`",
      "server_ip=192.168.1.100\nbackup_ip=192.168.1.101\nport=8080\n# Comment line\nenabled=true\nEOF",
      "AGENT: ''",
      "AGENT: 'Replace single occurrence:'",
      "Run command: `sed 's/192.168.1/10.0.0/' test.conf`",
      "AGENT: 'server_ip=10.0.0.100'",
      "AGENT: 'backup_ip=192.168.1.101  ‚Üê Not replaced (only first per line)'",
      "AGENT: ''",
      "AGENT: 'Replace ALL occurrences (global flag):'",
      "Run command: `sed 's/192.168.1/10.0.0/g' test.conf`",
      "AGENT: 'server_ip=10.0.0.100'",
      "AGENT: 'backup_ip=10.0.0.101'",
      "AGENT: ''",
      "AGENT: '--- Pattern 2: In-Place Editing ---'",
      "Run command: `sed -i.bak 's/192.168.1/10.0.0/g' test.conf`",
      "AGENT: 'This modifies test.conf and creates test.conf.bak backup'",
      "AGENT: ''",
      "Run command: `cat test.conf`",
      "AGENT: 'server_ip=10.0.0.100'",
      "AGENT: 'backup_ip=10.0.0.101'",
      "AGENT: 'port=8080'",
      "AGENT: ''",
      "AGENT: '--- Pattern 3: Delete Lines ---'",
      "AGENT: 'Delete blank lines:'",
      "Run command: `sed '/^$/d' test.conf`",
      "AGENT: ''",
      "AGENT: 'Delete comment lines:'",
      "Run command: `sed '/^#/d' test.conf`",
      "AGENT: 'server_ip=10.0.0.100'",
      "AGENT: 'backup_ip=10.0.0.101'",
      "AGENT: 'port=8080'",
      "AGENT: 'enabled=true'",
      "AGENT: ''",
      "AGENT: 'Delete lines containing specific text:'",
      "Run command: `sed '/backup/d' test.conf`",
      "AGENT: 'server_ip=10.0.0.100'",
      "AGENT: 'port=8080'",
      "AGENT: '# Comment line'",
      "AGENT: 'enabled=true'",
      "AGENT: ''",
      "AGENT: '--- Pattern 4: Line Range Operations ---'",
      "AGENT: 'Delete lines 2-3:'",
      "Run command: `sed '2,3d' test.conf`",
      "AGENT: ''",
      "AGENT: 'Replace only on line 1:'",
      "Run command: `sed '1s/192.168.1/10.0.0/' test.conf`",
      "AGENT: ''",
      "AGENT: 'Replace from line 2 to end:'",
      "Run command: `sed '2,$s/192.168.1/10.0.0/g' test.conf`",
      "AGENT: ''",
      "AGENT: '--- Pattern 5: Multiple Commands ---'",
      "Run command: `sed -e 's/192.168.1/10.0.0/g' -e '/^#/d' -e '/^$/d' test.conf`",
      "AGENT: 'server_ip=10.0.0.100'",
      "AGENT: 'backup_ip=10.0.0.101'",
      "AGENT: 'port=8080'",
      "AGENT: 'enabled=true'",
      "AGENT: ''",
      "AGENT: 'Or use semicolons:'",
      "Run command: `sed 's/192.168.1/10.0.0/g; /^#/d; /^$/d' test.conf`",
      "AGENT: ''",
      "AGENT: '--- Pattern 6: Advanced - Change Delimiters ---'",
      "AGENT: 'Useful when pattern contains slashes (URLs, paths):'",
      "Run command: `echo 'url=https://old.example.com/api' | sed 's|old.example.com|new.example.com|'`",
      "AGENT: 'url=https://new.example.com/api'",
      "AGENT: ''",
      "AGENT: '--- Pattern 7: Capture Groups and Backreferences ---'",
      "Create tool: `cat > logfile.txt << 'EOF'`",
      "2025-10-07 16:30:00 INFO User john logged in\n2025-10-07 16:30:05 ERROR Failed to connect to database\n2025-10-07 16:30:10 WARNING Disk space low\nEOF",
      "AGENT: ''",
      "AGENT: 'Extract just the timestamp:'",
      "Run command: `sed 's/^\\([0-9-]\\+ [0-9:]\\+\\).*/\\1/' logfile.txt`",
      "AGENT: '2025-10-07 16:30:00'",
      "AGENT: '2025-10-07 16:30:05'",
      "AGENT: '2025-10-07 16:30:10'",
      "AGENT: ''",
      "AGENT: 'Reformat log entries:'",
      "Run command: `sed 's/^\\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\(.*\\)/[\\3] \\1 \\2 - \\4/' logfile.txt`",
      "AGENT: '[INFO] 2025-10-07 16:30:00 - User john logged in'",
      "AGENT: '[ERROR] 2025-10-07 16:30:05 - Failed to connect to database'",
      "AGENT: '[WARNING] 2025-10-07 16:30:10 - Disk space low'",
      "AGENT: ''",
      "AGENT: '--- Pattern 8: Case Conversion ---'",
      "AGENT: 'Convert to uppercase:'",
      "Run command: `echo 'hello world' | sed 's/.*/\\U&/'`",
      "AGENT: 'HELLO WORLD'",
      "AGENT: ''",
      "AGENT: 'Convert to lowercase:'",
      "Run command: `echo 'HELLO WORLD' | sed 's/.*/\\L&/'`",
      "AGENT: 'hello world'",
      "AGENT: ''",
      "AGENT: '--- Pattern 9: Insert and Append Lines ---'",
      "AGENT: 'Insert line before match:'",
      "Run command: `sed '/port=/i # Port configuration' test.conf`",
      "AGENT: 'server_ip=10.0.0.100'",
      "AGENT: 'backup_ip=10.0.0.101'",
      "AGENT: '# Port configuration'",
      "AGENT: 'port=8080'",
      "AGENT: ''",
      "AGENT: 'Append line after match:'",
      "Run command: `sed '/port=/a timeout=30' test.conf`",
      "AGENT: 'server_ip=10.0.0.100'",
      "AGENT: 'backup_ip=10.0.0.101'",
      "AGENT: 'port=8080'",
      "AGENT: 'timeout=30'",
      "AGENT: ''",
      "AGENT: '--- Pattern 10: Real-World Use Cases ---'",
      "AGENT: ''",
      "AGENT: 'Use Case 1: Update all config files in directory:'",
      "Run command: `find /etc/myapp -name '*.conf' -exec sed -i.bak 's/old_server/new_server/g' {} \\;`",
      "AGENT: ''",
      "AGENT: 'Use Case 2: Clean Apache logs (remove IPs for privacy):'",
      "Run command: `sed 's/^[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+/XXX.XXX.XXX.XXX/' access.log > cleaned.log`",
      "AGENT: ''",
      "AGENT: 'Use Case 3: Extract emails from text:'",
      "Run command: `sed -n 's/.*\\([a-zA-Z0-9._%+-]\\+@[a-zA-Z0-9.-]\\+\\.[a-zA-Z]\\{2,\\}\\).*/\\1/p' document.txt`",
      "AGENT: ''",
      "AGENT: 'Use Case 4: Create sed script file for complex operations:'",
      "Create tool: `cat > transform.sed << 'EOF'`",
      "# Remove comments\n/^#/d\n\n# Remove blank lines\n/^$/d\n\n# Update IP addresses\ns/192.168.1/10.0.0/g\n\n# Update ports\ns/port=8080/port=9090/g\n\n# Add timestamp to beginning of each line\ns/^/[$(date)] /\nEOF",
      "AGENT: ''",
      "Run command: `sed -f transform.sed test.conf`",
      "AGENT: ''",
      "AGENT: '--- Bonus: Sed One-Liners Collection ---'",
      "AGENT: ''",
      "AGENT: 'Double-space a file:'",
      "Run command: `sed G file.txt`",
      "AGENT: ''",
      "AGENT: 'Number all lines:'",
      "Run command: `sed = file.txt | sed 'N;s/\\n/\\t/'`",
      "AGENT: ''",
      "AGENT: 'Print only lines 10-20:'",
      "Run command: `sed -n '10,20p' file.txt`",
      "AGENT: ''",
      "AGENT: 'Delete trailing whitespace:'",
      "Run command: `sed 's/[ \\t]*$//' file.txt`",
      "AGENT: ''",
      "AGENT: 'Join lines with comma:'",
      "Run command: `sed ':a;N;$!ba;s/\\n/,/g' file.txt`",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Mastered basic sed: search, replace, delete operations.'",
      "AGENT: '  ‚úì Used in-place editing with automatic backups.'",
      "AGENT: '  ‚úì Applied line range operations and multiple commands.'",
      "AGENT: '  ‚úì Learned regex capture groups and backreferences.'",
      "AGENT: '  ‚úì Transformed log formats and cleaned data.'",
      "AGENT: '  ‚úì Created reusable sed scripts for complex operations.'",
      "AGENT: '  ‚úì Built collection of practical sed one-liners.'",
      "AGENT: '  ‚úì You can now automate any text transformation task! üîÑ'"
    ],
    "commands": ["sed", "cat", "echo", "find"],
    "packages": {
      "debian_ubuntu": ["sed", "findutils"],
      "arch": ["sed", "findutils"]
    },
    "related_commands": ["awk", "grep", "tr", "cut"],
    "complexity": "intermediate",
    "tags": ["sed", "text-processing", "regex", "automation", "log-analysis", "configuration", "stream-editor"]
  }
]

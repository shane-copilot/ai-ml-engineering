[
  {
    "id": "scenario_postgres_slow_query_debug_091",
    "command": "psql",
    "scenario": "Identify and optimize slow PostgreSQL queries causing performance issues.",
    "problem": "A production application is experiencing slow response times. Database monitoring shows some queries taking 10+ seconds. The DBA needs to identify which queries are slow, analyze their execution plans, and optimize them.",
    "solution": "Enable pg_stat_statements extension to track query performance, identify the slowest queries, use EXPLAIN ANALYZE to understand execution plans, add appropriate indexes, and verify the improvements.",
    "steps": [
      "USER SAYS: 'Our application is getting really slow, especially on the dashboard page. I think the database queries are the problem but I don't know which ones or how to fix them.'",
      "AGENT: 'Let's use PostgreSQL's built-in query analysis tools to find and fix the slow queries. This is a systematic process that will pinpoint the exact problem.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: PostgreSQL query performance analysis...'",
      "AGENT: '[Searching] \"postgresql find slow queries optimize\"'",
      "AGENT: '[Found] `pg_stat_statements` extension tracks all query execution statistics.'",
      "AGENT: '[Found] `EXPLAIN ANALYZE` shows actual execution plan and timing.'",
      "AGENT: '[Found] Look for Sequential Scans on large tables - usually need indexes.'",
      "AGENT: '[Found] `CREATE INDEX` can dramatically speed up WHERE clauses and JOINs.'",
      "AGENT: '‚úì Research complete! Let's debug this step by step.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Enable Query Tracking ---'",
      "AGENT: 'First, make sure pg_stat_statements is installed:'",
      "Run command: `sudo -u postgres psql -c \"CREATE EXTENSION IF NOT EXISTS pg_stat_statements;\"`",
      "AGENT: 'CREATE EXTENSION'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Find the Slowest Queries ---'",
      "Run command: `sudo -u postgres psql -d production_db << 'EOF'\nSELECT \n  query,\n  calls,\n  total_exec_time,\n  mean_exec_time,\n  max_exec_time\nFROM pg_stat_statements\nORDER BY mean_exec_time DESC\nLIMIT 10;\nEOF`",
      "AGENT: ''",
      "AGENT: '                                           query                                           | calls | total_exec_time | mean_exec_time | max_exec_time'",
      "AGENT: '-------------------------------------------------------------------------------------------+-------+-----------------+----------------+---------------'",
      "AGENT: ' SELECT * FROM orders WHERE user_id = $1 AND status = $2 ORDER BY created_at DESC        |   450 |      58234.56   |      129.41    |    12543.22'",
      "AGENT: ' SELECT u.*, COUNT(o.id) FROM users u LEFT JOIN orders o ON u.id = o.user_id GROUP BY u |    85 |      12456.78   |      146.55    |     8932.11'",
      "AGENT: ' SELECT * FROM products WHERE category_id IN (SELECT id FROM categories WHERE active=true)|   120 |       9876.54   |       82.30    |     3211.45'",
      "AGENT: ''",
      "AGENT: 'üí° The first query is the worst offender: average 129ms, max 12.5 seconds!'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Analyze the Slow Query ---'",
      "AGENT: 'Let's see the execution plan for this query:'",
      "Run command: `sudo -u postgres psql -d production_db << 'EOF'\nEXPLAIN ANALYZE \nSELECT * FROM orders \nWHERE user_id = 42 AND status = 'pending' \nORDER BY created_at DESC \nLIMIT 20;\nEOF`",
      "AGENT: ''",
      "AGENT: '                                              QUERY PLAN'",
      "AGENT: '-------------------------------------------------------------------------------------------------------'",
      "AGENT: ' Limit  (cost=12543.22..12543.27 rows=20 width=256) (actual time=8234.123..8234.128 rows=20 loops=1)'",
      "AGENT: '   ->  Sort  (cost=12543.22..12643.45 rows=40089 width=256) (actual time=8234.121..8234.124 rows=20 loops=1)'",
      "AGENT: '         Sort Key: created_at DESC'",
      "AGENT: '         Sort Method: top-N heapsort  Memory: 45kB'",
      "AGENT: '         ->  Seq Scan on orders  (cost=0.00..11234.56 rows=40089 width=256) (actual time=0.012..8123.456 rows=45000 loops=1)'",
      "AGENT: '               Filter: ((user_id = 42) AND (status = \\'pending\\'::text))'",
      "AGENT: '               Rows Removed by Filter: 955000'",
      "AGENT: ' Planning Time: 0.234 ms'",
      "AGENT: ' Execution Time: 8234.234 ms'",
      "AGENT: ''",
      "AGENT: 'üéØ FOUND THE PROBLEM! \"Seq Scan\" means it's reading ALL 1 million rows to find the 45k matching ones. We need an index!'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Create Appropriate Indexes ---'",
      "Run command: `sudo -u postgres psql -d production_db << 'EOF'\nCREATE INDEX CONCURRENTLY idx_orders_user_status_created \nON orders(user_id, status, created_at DESC);\nEOF`",
      "AGENT: 'CREATE INDEX'",
      "AGENT: ''",
      "AGENT: 'Note: `CONCURRENTLY` allows index creation without locking the table.'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Verify the Improvement ---'",
      "Run command: `sudo -u postgres psql -d production_db << 'EOF'\nEXPLAIN ANALYZE \nSELECT * FROM orders \nWHERE user_id = 42 AND status = 'pending' \nORDER BY created_at DESC \nLIMIT 20;\nEOF`",
      "AGENT: ''",
      "AGENT: '                                              QUERY PLAN'",
      "AGENT: '-------------------------------------------------------------------------------------------------------'",
      "AGENT: ' Limit  (cost=0.56..8.89 rows=20 width=256) (actual time=0.032..0.085 rows=20 loops=1)'",
      "AGENT: '   ->  Index Scan using idx_orders_user_status_created on orders  (cost=0.56..16789.23 rows=40089 width=256) (actual time=0.031..0.082 rows=20 loops=1)'",
      "AGENT: '         Index Cond: ((user_id = 42) AND (status = \\'pending\\'::text))'",
      "AGENT: ' Planning Time: 0.156 ms'",
      "AGENT: ' Execution Time: 0.112 ms'",
      "AGENT: ''",
      "AGENT: 'üéâ AMAZING! Query time dropped from 8,234ms to 0.112ms - that's a 73,000x improvement!'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Monitor Index Usage ---'",
      "AGENT: 'After some time, check if the index is being used:'",
      "Run command: `sudo -u postgres psql -d production_db << 'EOF'\nSELECT \n  schemaname,\n  tablename,\n  indexname,\n  idx_scan,\n  idx_tup_read,\n  idx_tup_fetch\nFROM pg_stat_user_indexes\nWHERE indexname = 'idx_orders_user_status_created';\nEOF`",
      "AGENT: ''",
      "AGENT: ' schemaname | tablename |          indexname           | idx_scan | idx_tup_read | idx_tup_fetch'",
      "AGENT: '------------+-----------+------------------------------+----------+--------------+---------------'",
      "AGENT: ' public     | orders    | idx_orders_user_status_created|     3456 |       69120  |        69120'",
      "AGENT: ''",
      "AGENT: '‚úÖ The index has been used 3,456 times! It's working perfectly.'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Reset Statistics (Optional) ---'",
      "AGENT: 'To track new slow queries after fixes:'",
      "Run command: `sudo -u postgres psql -d production_db -c \"SELECT pg_stat_statements_reset();\"`",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Enabled pg_stat_statements to track query performance.'",
      "AGENT: '  ‚úì Identified slowest queries by mean execution time.'",
      "AGENT: '  ‚úì Used EXPLAIN ANALYZE to find Sequential Scan bottleneck.'",
      "AGENT: '  ‚úì Created compound index on (user_id, status, created_at DESC).'",
      "AGENT: '  ‚úì Verified 73,000x performance improvement with EXPLAIN ANALYZE.'",
      "AGENT: '  ‚úì Confirmed index is being actively used with pg_stat_user_indexes.'",
      "AGENT: '  ‚úì Your database queries are now blazing fast! üöÄ'"
    ],
    "commands": ["psql", "sudo"],
    "packages": {
      "debian_ubuntu": ["postgresql", "postgresql-contrib"],
      "arch": ["postgresql"]
    },
    "related_commands": ["pg_dump", "pg_restore", "pgbadger", "pg_stat_activity"],
    "complexity": "advanced",
    "tags": ["postgresql", "database", "performance", "optimization", "sql", "indexes", "query-tuning", "troubleshooting"]
  }
]

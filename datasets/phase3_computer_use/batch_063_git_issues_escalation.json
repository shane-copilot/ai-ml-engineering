[
  {
    "id": "scenario_git_issues_multi_approach_001",
    "command": "git",
    "scenario": "Developer: Git repository corrupted or conflicts",
    "problem": "Can't commit, push, or merge due to Git issues",
    "solution": "Fix Git repository problems through escalating methods",
    "steps": [
      "USER SAYS: 'Git won\\'t let me commit! Says repository is locked!'",
      "AGENT: 'Let me fix the Git issue...'",
      "AGENT: 'Approach 1: Check Git status...'",
      "Check status: git status",
      "AGENT: 'fatal: Unable to create \\'/path/.git/index.lock\\': File exists ✗'",
      "AGENT: 'Git lock file exists - previous operation crashed'",
      "AGENT: 'Approach 2: Remove stale lock file...'",
      "Remove lock: rm -f .git/index.lock",
      "AGENT: 'Lock file removed ✓'",
      "Try again: git status",
      "AGENT: 'On branch main'",
      "AGENT: 'Changes not staged for commit:'",
      "AGENT: '  modified: src/app.js ✓'",
      "AGENT: 'Git working again!'",
      "Try commit: git commit -m 'Fix bug'",
      "AGENT: 'error: object file .git/objects/ab/cdef123... is empty ✗'",
      "AGENT: 'Corrupted object in repository!'",
      "USER: 'How did that happen?'",
      "AGENT: 'Disk issues, crashes, or force shutdowns can corrupt Git'",
      "AGENT: 'Approach 3: Check repository integrity...'",
      "Check: git fsck",
      "AGENT: 'error: object file .git/objects/ab/cdef123... is empty'",
      "AGENT: 'error: HEAD: invalid sha1 pointer'",
      "AGENT: 'Checking object directories: 100% (256/256), done.'",
      "AGENT: '2 missing blobs ✗'",
      "AGENT: 'Repository has corrupted objects'",
      "AGENT: 'Approach 4: Try to recover from reflog...'",
      "Check reflog: git reflog",
      "AGENT: 'abc1234 HEAD@{0}: commit: Working changes'",
      "AGENT: 'def5678 HEAD@{1}: commit: Previous work ✓'",
      "AGENT: 'Reflog intact'",
      "Reset: git reset --hard HEAD@{1}",
      "AGENT: 'HEAD is now at def5678 Previous work ✓'",
      "AGENT: 'Rolled back to last good commit'",
      "Check status: git status",
      "AGENT: 'On branch main'",
      "AGENT: 'nothing to commit ✓'",
      "USER: 'But I lost my recent changes!'",
      "AGENT: 'Approach 5: Recover from working directory...'",
      "Check files: git diff",
      "AGENT: 'diff --git a/src/app.js ✓'",
      "AGENT: 'Your changes still exist in working directory!'",
      "Create commit: git add . && git commit -m 'Recovered changes'",
      "AGENT: '[main abc7890] Recovered changes ✓'",
      "AGENT: 'Changes saved!'",
      "Try push: git push origin main",
      "AGENT: '! [rejected] main -> main (non-fast-forward) ✗'",
      "AGENT: 'Remote has changes we don\\'t have'",
      "AGENT: 'Approach 6: Pull with rebase...'",
      "Try pull: git pull --rebase origin main",
      "AGENT: 'CONFLICT (content): Merge conflict in src/app.js ✗'",
      "AGENT: 'Automatic merge failed'",
      "USER: 'I hate merge conflicts!'",
      "AGENT: 'Approach 7: Resolve conflicts step-by-step...'",
      "Show conflict: cat src/app.js",
      "AGENT: '<<<<<<< HEAD'",
      "AGENT: 'const x = 1;  // Our changes'",
      "AGENT: '======='",
      "AGENT: 'const x = 2;  // Their changes'",
      "AGENT: '>>>>>>> abc1234'",
      "Show method: cat > ~/resolve-conflict.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Git Conflict Resolution ==='",
      "echo ''",
      "echo 'Files with conflicts:'",
      "git diff --name-only --diff-filter=U",
      "echo ''",
      "echo 'Options:'",
      "echo '1. Accept ours (keep our changes)'",
      "echo '2. Accept theirs (use their changes)'",
      "echo '3. Manual edit (fix conflicts manually)'",
      "echo '4. Use merge tool'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1)",
      "    git diff --name-only --diff-filter=U | xargs git checkout --ours",
      "    git add .",
      "    echo '✓ Kept our changes'",
      "    ;;",
      "  2)",
      "    git diff --name-only --diff-filter=U | xargs git checkout --theirs",
      "    git add .",
      "    echo '✓ Accepted their changes'",
      "    ;;",
      "  3)",
      "    echo 'Edit files, remove conflict markers, then:'",
      "    echo '  git add <file>'",
      "    echo '  git rebase --continue'",
      "    ;;",
      "  4)",
      "    git mergetool",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/resolve-conflict.sh",
      "Accept theirs: git checkout --theirs src/app.js",
      "AGENT: 'Updated to their version'",
      "Stage: git add src/app.js",
      "Continue: git rebase --continue",
      "AGENT: 'Successfully rebased ✓'",
      "Push: git push origin main",
      "AGENT: 'To github.com:user/repo.git'",
      "AGENT: '   abc1234..def5678  main -> main ✓'",
      "AGENT: 'Pushed successfully!'",
      "USER: 'What if the repo was really corrupted?'",
      "AGENT: 'Approach 8: Clone fresh and restore work...'",
      "Show method: cat > ~/recover-git-repo.sh << 'EOF'",
      "#!/bin/bash",
      "REPO_PATH=$1",
      "echo \"=== Recovering Git Repository ===\"",
      "echo ''",
      "cd $REPO_PATH",
      "echo '1. Backup current state...'",
      "tar czf ../repo-backup-$(date +%Y%m%d).tar.gz .",
      "echo '✓ Backup created'",
      "echo ''",
      "echo '2. Save uncommitted changes...'",
      "git diff > ../uncommitted-changes.patch",
      "git diff --cached > ../staged-changes.patch",
      "echo '✓ Changes saved as patches'",
      "echo ''",
      "echo '3. Get remote URL...'",
      "REMOTE=$(git remote get-url origin)",
      "echo \"Remote: $REMOTE\"",
      "echo ''",
      "echo '4. Clone fresh copy...'",
      "cd ..",
      "mv \"$REPO_PATH\" \"${REPO_PATH}.corrupted\"",
      "git clone $REMOTE \"$REPO_PATH\"",
      "cd \"$REPO_PATH\"",
      "echo '✓ Fresh clone'",
      "echo ''",
      "echo '5. Apply saved changes...'",
      "git apply ../uncommitted-changes.patch 2>/dev/null && echo '✓ Applied uncommitted'",
      "git apply --cached ../staged-changes.patch 2>/dev/null && echo '✓ Applied staged'",
      "echo ''",
      "echo '✓ Repository recovered'",
      "EOF",
      "chmod +x ~/recover-git-repo.sh",
      "AGENT: 'Approach 9: Fix common Git problems...'",
      "Show method: cat > ~/fix-git-issues.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Git Problem Fixer ==='",
      "echo ''",
      "echo '1. Remove lock files'",
      "echo '2. Reset to last commit'",
      "echo '3. Abort merge/rebase'",
      "echo '4. Clean untracked files'",
      "echo '5. Reset branch to remote'",
      "echo '6. Fix detached HEAD'",
      "echo '7. Prune remote branches'",
      "echo '8. Garbage collect'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1)",
      "    rm -f .git/index.lock",
      "    rm -f .git/refs/heads/*.lock",
      "    echo '✓ Lock files removed'",
      "    ;;",
      "  2)",
      "    git reset --hard HEAD",
      "    echo '✓ Reset to HEAD'",
      "    ;;",
      "  3)",
      "    git merge --abort 2>/dev/null || git rebase --abort",
      "    echo '✓ Merge/rebase aborted'",
      "    ;;",
      "  4)",
      "    git clean -fd",
      "    echo '✓ Untracked files removed'",
      "    ;;",
      "  5)",
      "    git fetch origin",
      "    git reset --hard origin/$(git branch --show-current)",
      "    echo '✓ Reset to remote'",
      "    ;;",
      "  6)",
      "    BRANCH=$(git branch | grep -v detached | head -1 | awk '{print $NF}')",
      "    git checkout $BRANCH",
      "    echo \"✓ Checked out $BRANCH\"",
      "    ;;",
      "  7)",
      "    git remote prune origin",
      "    echo '✓ Pruned remote branches'",
      "    ;;",
      "  8)",
      "    git gc --aggressive --prune=now",
      "    echo '✓ Garbage collected'",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/fix-git-issues.sh",
      "AGENT: 'Approach 10: Prevent future issues...'",
      "Show method: cat > ~/git-best-practices.txt << 'EOF'",
      "=== Git Best Practices to Avoid Issues ===",
      "1. Commit frequently",
      "   - Don't let too many changes pile up",
      "   - Makes recovery easier",
      "2. Push regularly",
      "   - Remote is a backup",
      "   - Easier to collaborate",
      "3. Use branches",
      "   - Keep main stable",
      "   - Experiment safely",
      "4. Never force push to shared branches",
      "   - Can lose others' work",
      "   - Use --force-with-lease if needed",
      "5. Clean up regularly",
      "   - git gc occasionally",
      "   - Remove old branches",
      "6. Use .gitignore",
      "   - Don't commit build artifacts",
      "   - Keeps repo clean",
      "7. Write good commit messages",
      "   - Easier to find things later",
      "   - Helps with recovery",
      "Common fixes:",
      "  Undo last commit: git reset HEAD~1",
      "  Discard changes: git checkout -- <file>",
      "  Unstage file: git reset HEAD <file>",
      "  Amend commit: git commit --amend",
      "  Stash changes: git stash",
      "  Apply stash: git stash pop",
      "EOF",
      "Create git helper: cat > ~/git-helper.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Git Helper ==='",
      "echo ''",
      "if [ ! -d .git ]; then",
      "  echo '✗ Not a git repository'",
      "  exit 1",
      "fi",
      "echo 'Repository status:'",
      "git status -s",
      "echo ''",
      "echo 'Recent commits:'",
      "git log --oneline -5",
      "echo ''",
      "echo 'Remote:'",
      "git remote -v",
      "echo ''",
      "echo 'Quick actions:'",
      "echo 's - Status (detailed)'",
      "echo 'a - Add all and commit'",
      "echo 'p - Pull latest'",
      "echo 'P - Push'",
      "echo 'u - Undo last commit (keep changes)'",
      "echo 'r - Reset to remote'",
      "echo 'c - Clean untracked files'",
      "read -p 'Action: ' ACT",
      "case $ACT in",
      "  s) git status ;;",
      "  a)",
      "    git add .",
      "    read -p 'Commit message: ' MSG",
      "    git commit -m \"$MSG\"",
      "    ;;",
      "  p) git pull ;;",
      "  P) git push ;;",
      "  u) git reset HEAD~1 ;;",
      "  r)",
      "    git fetch",
      "    git reset --hard origin/$(git branch --show-current)",
      "    ;;",
      "  c) git clean -fd ;;",
      "esac",
      "EOF",
      "chmod +x ~/git-helper.sh",
      "AGENT: 'Git repository fixed and working! ✓'",
      "AGENT: ''",
      "AGENT: 'Problems encountered and solved:'",
      "AGENT: '  1. Lock file → removed'",
      "AGENT: '  2. Corrupted objects → rolled back'",
      "AGENT: '  3. Lost changes → recovered from working directory'",
      "AGENT: '  4. Push rejected → rebased'",
      "AGENT: '  5. Merge conflict → resolved'",
      "AGENT: ''",
      "AGENT: 'Troubleshooting progression:'",
      "AGENT: '  1. Can\\'t commit → lock file'",
      "AGENT: '  2. Remove lock → corrupted object'",
      "AGENT: '  3. Check fsck → 2 missing blobs'",
      "AGENT: '  4. Check reflog → intact'",
      "AGENT: '  5. Reset to previous → recovered'",
      "AGENT: '  6. Re-commit changes → saved'",
      "AGENT: '  7. Try push → rejected'",
      "AGENT: '  8. Pull rebase → conflict'",
      "AGENT: '  9. Resolve conflict → success'",
      "AGENT: ''",
      "AGENT: 'Alternative approaches:'",
      "AGENT: '  8. Clone fresh and restore work'",
      "AGENT: '  9. Fix common problems automatically'",
      "AGENT: '  10. Best practices to prevent issues'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '  ~/git-helper.sh - quick Git operations'",
      "AGENT: '  ~/fix-git-issues.sh - automated fixes'",
      "AGENT: '  ~/recover-git-repo.sh - full recovery'",
      "AGENT: '  ~/resolve-conflict.sh - conflict resolution'",
      "AGENT: ''",
      "AGENT: 'Repository healthy and synced! ✓'"
    ],
    "commands": ["git"],
    "packages": {"debian_ubuntu": ["git"], "arch": ["git"]},
    "related_commands": ["git", "git-fsck", "git-reflog"],
    "complexity": "intermediate",
    "tags": ["git", "version-control", "repository", "conflicts", "corruption", "multiple-approaches", "troubleshooting", "real-world", "ai-agent"]
  }
]

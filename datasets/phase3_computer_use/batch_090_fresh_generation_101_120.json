[
  {
    "id": "scenario_redis_cache_implementation_092",
    "command": "redis-cli",
    "scenario": "Implement Redis caching to reduce database load and improve application performance.",
    "problem": "An application makes the same expensive database queries repeatedly, causing high database CPU usage and slow response times. The developer wants to cache frequently accessed data in Redis to reduce database load.",
    "solution": "Install Redis, connect to it from the application, implement cache-aside pattern with TTL (Time To Live), demonstrate cache hits vs misses, and show dramatic performance improvement.",
    "steps": [
      "USER SAYS: 'My app keeps querying the database for user profiles every time someone loads a page, even though this data rarely changes. It's killing our database performance. Can I cache this?'",
      "AGENT: 'Absolutely! Redis is perfect for this. It's an in-memory data store that can serve cached data in microseconds instead of the milliseconds it takes to query a database. Let me show you how.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: Redis caching patterns...'",
      "AGENT: '[Searching] \"redis cache-aside pattern implementation\"'",
      "AGENT: '[Found] Cache-aside pattern: Application checks cache first, queries DB on miss, then stores result in cache.'",
      "AGENT: '[Found] Use TTL (Time To Live) to auto-expire stale data.'",
      "AGENT: '[Found] Redis data types: Strings for simple values, Hashes for objects, Sets for collections.'",
      "AGENT: '[Found] Use `redis-cli` for testing and monitoring.'",
      "AGENT: '✓ Research complete! Let's implement caching.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Install and Start Redis ---'",
      "Run command: `sudo apt update && sudo apt install redis-server -y`",
      "AGENT: ''",
      "Run command: `sudo systemctl start redis-server`",
      "Run command: `sudo systemctl enable redis-server`",
      "AGENT: ''",
      "AGENT: 'Verify Redis is running:'",
      "Run command: `redis-cli ping`",
      "AGENT: 'PONG'",
      "AGENT: ''",
      "AGENT: '✓ Redis is up and running!'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Test Redis Manually ---'",
      "AGENT: 'Let's store and retrieve a simple key-value pair:'",
      "Run command: `redis-cli SET user:123:name \"John Doe\"`",
      "AGENT: 'OK'",
      "AGENT: ''",
      "Run command: `redis-cli GET user:123:name`",
      "AGENT: '\"John Doe\"'",
      "AGENT: ''",
      "AGENT: 'Set a key with expiration (TTL of 60 seconds):'",
      "Run command: `redis-cli SETEX user:123:session 60 \"active\"`",
      "AGENT: 'OK'",
      "AGENT: ''",
      "Run command: `redis-cli TTL user:123:session`",
      "AGENT: '(integer) 57'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Implement Cache-Aside Pattern in Python ---'",
      "Create tool: `cat > app_with_cache.py << 'EOF'`",
      "#!/usr/bin/env python3\n\nimport redis\nimport psycopg2\nimport json\nimport time\n\n# Connect to Redis\nredis_client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)\n\n# Connect to PostgreSQL\ndb_conn = psycopg2.connect(\n    host=\"localhost\",\n    database=\"myapp\",\n    user=\"myuser\",\n    password=\"mypass\"\n)\n\ndef get_user_profile(user_id):\n    \"\"\"Get user profile with caching (cache-aside pattern)\"\"\"\n    cache_key = f\"user:profile:{user_id}\"\n    \n    # Try to get from cache first\n    cached_data = redis_client.get(cache_key)\n    if cached_data:\n        print(f\"✓ Cache HIT for user {user_id}\")\n        return json.loads(cached_data)\n    \n    # Cache miss - query database\n    print(f\"✗ Cache MISS for user {user_id} - querying database\")\n    start_time = time.time()\n    \n    cursor = db_conn.cursor()\n    cursor.execute(\n        \"SELECT id, name, email, created_at FROM users WHERE id = %s\",\n        (user_id,)\n    )\n    row = cursor.fetchone()\n    cursor.close()\n    \n    db_time = (time.time() - start_time) * 1000\n    print(f\"  Database query took: {db_time:.2f}ms\")\n    \n    if not row:\n        return None\n    \n    # Build user profile\n    user_profile = {\n        \"id\": row[0],\n        \"name\": row[1],\n        \"email\": row[2],\n        \"created_at\": str(row[3])\n    }\n    \n    # Store in cache with 5-minute TTL\n    redis_client.setex(\n        cache_key,\n        300,  # 5 minutes\n        json.dumps(user_profile)\n    )\n    print(f\"  Cached user {user_id} for 5 minutes\")\n    \n    return user_profile\n\nif __name__ == \"__main__\":\n    # Simulate multiple requests for same user\n    print(\"First request (should be cache miss):\")\n    profile1 = get_user_profile(123)\n    print(f\"Result: {profile1}\")\n    print()\n    \n    print(\"Second request (should be cache hit):\")\n    start = time.time()\n    profile2 = get_user_profile(123)\n    cache_time = (time.time() - start) * 1000\n    print(f\"Result: {profile2}\")\n    print(f\"Response time: {cache_time:.2f}ms\")\n    print()\n    \n    print(\"Third request (should be cache hit):\")\n    start = time.time()\n    profile3 = get_user_profile(123)\n    cache_time = (time.time() - start) * 1000\n    print(f\"Response time: {cache_time:.2f}ms\")\nEOF",
      "chmod +x app_with_cache.py",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Run the Application ---'",
      "Run command: `python3 app_with_cache.py`",
      "AGENT: 'First request (should be cache miss):'",
      "AGENT: '✗ Cache MISS for user 123 - querying database'",
      "AGENT: '  Database query took: 23.45ms'",
      "AGENT: '  Cached user 123 for 5 minutes'",
      "AGENT: 'Result: {\"id\": 123, \"name\": \"John Doe\", \"email\": \"john@example.com\", \"created_at\": \"2024-01-15\"}'",
      "AGENT: ''",
      "AGENT: 'Second request (should be cache hit):'",
      "AGENT: '✓ Cache HIT for user 123'",
      "AGENT: 'Result: {\"id\": 123, \"name\": \"John Doe\", \"email\": \"john@example.com\", \"created_at\": \"2024-01-15\"}'",
      "AGENT: 'Response time: 0.87ms'",
      "AGENT: ''",
      "AGENT: 'Third request (should be cache hit):'",
      "AGENT: '✓ Cache HIT for user 123'",
      "AGENT: 'Response time: 0.92ms'",
      "AGENT: ''",
      "AGENT: '🎉 INCREDIBLE! Cache hits are ~25x faster than database queries (0.9ms vs 23ms)!'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Monitor Redis Performance ---'",
      "Run command: `redis-cli INFO stats | grep -E 'keyspace_hits|keyspace_misses'`",
      "AGENT: 'keyspace_hits:1234567'",
      "AGENT: 'keyspace_misses:45678'",
      "AGENT: ''",
      "AGENT: 'Calculate cache hit ratio:'",
      "Run command: `redis-cli INFO stats | awk '/keyspace_hits|keyspace_misses/{sum+=$2} END{print \"Cache hit ratio: \" (1234567/(1234567+45678)*100) \"%\"}'`",
      "AGENT: 'Cache hit ratio: 96.4%'",
      "AGENT: ''",
      "AGENT: '✅ 96.4% hit ratio means most requests are served from cache!'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: View All Cached Keys ---'",
      "Run command: `redis-cli KEYS 'user:profile:*'`",
      "AGENT: '1) \"user:profile:123\"'",
      "AGENT: '2) \"user:profile:456\"'",
      "AGENT: '3) \"user:profile:789\"'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Cache Invalidation ---'",
      "AGENT: 'When a user updates their profile, delete the cache:'",
      "Run command: `redis-cli DEL user:profile:123`",
      "AGENT: '(integer) 1'",
      "AGENT: ''",
      "AGENT: 'Or flush all user profile caches:'",
      "Run command: `redis-cli --scan --pattern 'user:profile:*' | xargs redis-cli DEL`",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Installed and configured Redis server.'",
      "AGENT: '  ✓ Implemented cache-aside pattern in Python application.'",
      "AGENT: '  ✓ Set TTL (Time To Live) to auto-expire stale data after 5 minutes.'",
      "AGENT: '  ✓ Demonstrated 25x performance improvement (23ms → 0.9ms).'",
      "AGENT: '  ✓ Achieved 96.4% cache hit ratio, dramatically reducing database load.'",
      "AGENT: '  ✓ Showed cache invalidation strategies for data updates.'",
      "AGENT: '  ✓ Your application is now blazing fast with minimal database queries! ⚡'"
    ],
    "commands": ["apt", "systemctl", "redis-cli", "python3", "cat", "chmod", "awk"],
    "packages": {
      "debian_ubuntu": ["redis-server", "python3-redis", "python3-psycopg2"],
      "arch": ["redis", "python-redis", "python-psycopg2"]
    },
    "related_commands": ["memcached", "varnish"],
    "complexity": "intermediate",
    "tags": ["redis", "caching", "performance", "optimization", "python", "database", "cache-aside", "ttl", "devops"]
  }
]

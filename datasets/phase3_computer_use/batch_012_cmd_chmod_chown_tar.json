[
  {
    "id": "cmd_chmod_001",
    "command": "chmod",
    "scenario": "Fix 'Permission denied' error when trying to execute script",
    "problem": "Downloaded or created script but can't execute it, gets 'Permission denied' error",
    "solution": "Use chmod to add execute permissions to the script",
    "steps": [
      "Check current permissions: ls -l script.sh",
      "Output format: -rw-r--r-- (owner group other)",
      "r=read(4), w=write(2), x=execute(1)",
      "Add execute permission for owner: chmod +x script.sh",
      "Verify: ls -l script.sh (should show -rwxr-xr-x)",
      "Execute script: ./script.sh",
      "Alternative: chmod u+x script.sh (only owner)",
      "For all users: chmod a+x script.sh",
      "Numeric method: chmod 755 script.sh",
      "755 = rwxr-xr-x (owner: rwx, group: r-x, other: r-x)",
      "Common script permissions: 755 (executable by all) or 700 (only owner)",
      "Remove execute: chmod -x script.sh or chmod 644 script.sh",
      "Make read-only: chmod 444 script.sh",
      "Full permissions: chmod 777 script.sh (NOT recommended for security)",
      "Owner only, full access: chmod 700 script.sh",
      "Recursive for directory: chmod -R +x /path/to/dir/",
      "Multiple files: chmod +x script1.sh script2.sh",
      "With find: find . -name '*.sh' -exec chmod +x {} \\;",
      "Understanding numeric chmod:",
      "7 = rwx (4+2+1), 6 = rw- (4+2), 5 = r-x (4+1), 4 = r-- (4)",
      "Example: chmod 644 file.txt (owner: rw, group: r, other: r)",
      "Example: chmod 600 ~/.ssh/id_rsa (SSH key should be owner-only readable)",
      "Fix SSH key permissions: chmod 600 ~/.ssh/id_rsa && chmod 644 ~/.ssh/id_rsa.pub",
      "Fix SSH directory: chmod 700 ~/.ssh",
      "After chmod: Test execution: ./script.sh or bash script.sh"
    ],
    "commands": ["chmod", "ls"],
    "packages": {
      "debian_ubuntu": ["coreutils"],
      "arch": ["coreutils"]
    },
    "related_commands": ["chown", "chgrp", "umask", "ls"],
    "complexity": "beginner",
    "tags": ["chmod", "permissions", "execute", "file-permissions", "access-control"]
  },
  {
    "id": "cmd_chmod_002",
    "command": "chmod",
    "scenario": "Secure sensitive files and directories",
    "problem": "Need to restrict access to configuration files, SSH keys, and user data",
    "solution": "Use chmod to set appropriate permissions for security",
    "steps": [
      "Principle: Least privilege - minimum permissions necessary",
      "SSH private key security: chmod 600 ~/.ssh/id_rsa",
      "600 = only owner can read/write, no one else has access",
      "SSH public key: chmod 644 ~/.ssh/id_rsa.pub",
      "SSH directory: chmod 700 ~/.ssh",
      "SSH authorized_keys: chmod 600 ~/.ssh/authorized_keys",
      "Config files with passwords: chmod 600 /etc/app/config.conf",
      "Database config: sudo chmod 600 /etc/mysql/my.cnf",
      "Web server private key: sudo chmod 600 /etc/ssl/private/server.key",
      "User's home directory: chmod 755 ~/ (readable but not writable by others)",
      "Or more secure: chmod 750 ~/ (group can read, others nothing)",
      "Private documents: chmod 700 ~/Documents (only owner)",
      "Shared directory: chmod 770 /shared (owner and group)",
      "Web directory: chmod 755 /var/www/html (Apache/nginx can read)",
      "Web files: chmod 644 /var/www/html/*.html",
      "CGI scripts: chmod 755 /var/www/cgi-bin/*.cgi",
      "Temporary files: chmod 1777 /tmp (sticky bit + all access)",
      "Sticky bit: chmod +t /shared (only owner can delete own files)",
      "SUID bit: chmod u+s /usr/bin/sudo (runs as file owner)",
      "SGID bit: chmod g+s /shared (new files inherit group)",
      "Remove SUID: chmod u-s file",
      "Check for world-writable files: find /path -type f -perm -002",
      "Fix world-writable: find /path -type f -perm -002 -exec chmod o-w {} \\;",
      "Recursive permission fix: chmod -R 755 /var/www/html",
      "But careful with recursive - can break things!",
      "Better: find /var/www/html -type d -exec chmod 755 {} \\; && find /var/www/html -type f -exec chmod 644 {} \\;",
      "Audit SUID binaries: find / -perm -4000 -type f 2>/dev/null",
      "Security checklist: SSH keys 600, config files 600/644, directories 755/700, web files 644"
    ],
    "commands": ["chmod", "find", "ls"],
    "packages": {
      "debian_ubuntu": ["coreutils", "findutils"],
      "arch": ["coreutils", "findutils"]
    },
    "related_commands": ["chown", "chgrp", "umask", "setfacl", "getfacl"],
    "complexity": "intermediate",
    "tags": ["chmod", "security", "permissions", "file-security", "ssh", "access-control"]
  },
  {
    "id": "cmd_chown_001",
    "command": "chown",
    "scenario": "Fix ownership after copying files as root",
    "problem": "Copied files as root with sudo, now regular user can't access them",
    "solution": "Use chown to change ownership back to user",
    "steps": [
      "Check current ownership: ls -l file.txt",
      "Output shows: owner:group",
      "Change owner: sudo chown username file.txt",
      "Change owner and group: sudo chown username:groupname file.txt",
      "Or: sudo chown username:username file.txt",
      "Change only group: sudo chown :groupname file.txt",
      "Or use chgrp: sudo chgrp groupname file.txt",
      "Get your username: whoami",
      "Get your group: groups or id -gn",
      "Typical user:group same: sudo chown user:user file.txt",
      "Use $USER variable: sudo chown $USER:$USER file.txt",
      "Recursive for directory: sudo chown -R username:username /path/to/dir/",
      "Multiple files: sudo chown username file1.txt file2.txt",
      "With wildcard: sudo chown username *.txt",
      "Preserve symlinks: sudo chown -h username symlink",
      "Reference another file: sudo chown --reference=otherfile.txt targetfile.txt",
      "Common scenario - web files: sudo chown -R www-data:www-data /var/www/html/",
      "Development directory: sudo chown -R $USER:$USER ~/projects/",
      "After extraction: sudo chown -R $USER:$USER ~/extracted_folder/",
      "Fix home directory: sudo chown -R username:username /home/username/",
      "Verify changes: ls -l file.txt",
      "Recursive with feedback: sudo chown -Rv username:username /path/",
      "Dry run (doesn't exist for chown, use find):",
      "find /path -not -user username -ls (preview what would change)",
      "Then: find /path -not -user username -exec sudo chown username:username {} \\;",
      "Permission denied after chown? Check chmod too: sudo chmod 644 file.txt",
      "Complete fix: sudo chown $USER:$USER file.txt && chmod 644 file.txt"
    ],
    "commands": ["chown", "chgrp", "ls", "whoami", "groups", "id", "find", "chmod"],
    "packages": {
      "debian_ubuntu": ["coreutils"],
      "arch": ["coreutils"]
    },
    "related_commands": ["chgrp", "chmod", "ls", "id", "groups"],
    "complexity": "beginner",
    "tags": ["chown", "ownership", "permissions", "file-ownership", "user-management"]
  },
  {
    "id": "cmd_tar_001",
    "command": "tar",
    "scenario": "Create compressed backup of directory",
    "problem": "Need to backup important directory before making changes",
    "solution": "Use tar with compression to create archive",
    "steps": [
      "Create gzipped tar archive: tar -czf backup.tar.gz /path/to/directory/",
      "Flags: c=create, z=gzip, f=filename",
      "Create bzip2 archive (better compression): tar -cjf backup.tar.bz2 /path/to/directory/",
      "j=bzip2",
      "Create xz archive (best compression): tar -cJf backup.tar.xz /path/to/directory/",
      "J=xz (capital J)",
      "Verbose output: tar -czvf backup.tar.gz /path/to/directory/",
      "v=verbose, shows files being added",
      "Exclude files: tar -czf backup.tar.gz --exclude='*.tmp' --exclude='cache' /path/to/directory/",
      "Exclude multiple patterns: tar -czf backup.tar.gz --exclude={'*.log','*.tmp','cache/*'} /path/",
      "Exclude using file: tar -czf backup.tar.gz --exclude-from=exclude.txt /path/",
      "Preserve permissions: tar -czpf backup.tar.gz /path/ (p=preserve)",
      "With timestamp in name: tar -czf backup_$(date +%Y%m%d).tar.gz /path/",
      "Backup home directory: tar -czf ~/backup_home.tar.gz ~/Documents ~/Pictures ~/Config",
      "Backup and show progress: tar -czf backup.tar.gz /path/ --checkpoint=1000 --checkpoint-action=dot",
      "Or use pv: tar -czf - /path/ | pv > backup.tar.gz",
      "Split large archive: tar -czf - /path/ | split -b 1G - backup.tar.gz.part_",
      "Test archive integrity: tar -tzf backup.tar.gz > /dev/null",
      "List contents: tar -tzf backup.tar.gz | less",
      "Count files in archive: tar -tzf backup.tar.gz | wc -l",
      "Verify after creation: tar -tzf backup.tar.gz | tail",
      "Compare with original: tar -df backup.tar.gz -C /path/to/directory/",
      "Calculate archive size: du -h backup.tar.gz",
      "Compress existing tar: gzip backup.tar (creates backup.tar.gz)",
      "Better: Use tar directly with compression for efficiency",
      "Remote backup via SSH: tar -czf - /path/ | ssh user@server 'cat > backup.tar.gz'",
      "Store in cloud: tar -czf - /path/ | rclone rcat remote:bucket/backup.tar.gz"
    ],
    "commands": ["tar", "date", "pv", "split", "wc", "du", "gzip", "ssh", "rclone"],
    "packages": {
      "debian_ubuntu": ["tar", "gzip", "bzip2", "xz-utils", "pv"],
      "arch": ["tar", "gzip", "bzip2", "xz", "pv"]
    },
    "related_commands": ["gzip", "bzip2", "xz", "zip", "rsync"],
    "complexity": "intermediate",
    "tags": ["tar", "backup", "compression", "archive", "gzip", "bzip2"]
  },
  {
    "id": "cmd_tar_002",
    "command": "tar",
    "scenario": "Extract and restore files from backup archive",
    "problem": "Need to restore files from tar.gz backup archive",
    "solution": "Use tar to safely extract archive contents",
    "steps": [
      "Extract gzipped tar: tar -xzf backup.tar.gz",
      "Flags: x=extract, z=gzip, f=filename",
      "Extract to specific directory: tar -xzf backup.tar.gz -C /path/to/destination/",
      "Create destination first: mkdir -p /restore && tar -xzf backup.tar.gz -C /restore/",
      "Extract bzip2: tar -xjf backup.tar.bz2",
      "Extract xz: tar -xJf backup.tar.xz",
      "Verbose extraction: tar -xzvf backup.tar.gz",
      "Shows each file as extracted",
      "List contents before extracting: tar -tzf backup.tar.gz | less",
      "Verify archive first: tar -tzf backup.tar.gz > /dev/null",
      "Check exit code: echo $? (should be 0 if OK)",
      "Extract specific file: tar -xzf backup.tar.gz path/to/file.txt",
      "Must use exact path from tar -tzf output",
      "Extract specific directory: tar -xzf backup.tar.gz path/to/directory/",
      "Extract with pattern: tar -xzf backup.tar.gz --wildcards '*.txt'",
      "Extract and strip leading path: tar -xzf backup.tar.gz --strip-components=1",
      "Useful when archive has extra parent directory",
      "Preserve permissions: tar -xzpf backup.tar.gz (p=preserve)",
      "Extract to current user: tar -xzf backup.tar.gz --no-same-owner",
      "Useful when extracting root-owned files as regular user",
      "Overwrite existing files: Default behavior",
      "Keep existing (don't overwrite): tar -xzf backup.tar.gz --keep-old-files",
      "Interactive overwrite: tar -xzf backup.tar.gz --keep-newer-files",
      "Extract from stdin: cat backup.tar.gz | tar -xz",
      "Or from SSH: ssh user@server 'cat backup.tar.gz' | tar -xz",
      "Extract split archive: cat backup.tar.gz.part_* | tar -xz",
      "Show progress: tar -xzvf backup.tar.gz | pv -l > /dev/null",
      "Or use pv: pv backup.tar.gz | tar -xz",
      "Test extraction: tar -xzf backup.tar.gz -C /tmp/test/ (test in temp dir first)",
      "After extraction verify: ls -la /path/ or diff -r /original /extracted",
      "If corrupted: Try: tar -xzf backup.tar.gz --ignore-command-error",
      "Partial recovery: gunzip < backup.tar.gz | tar -x --ignore-zeros"
    ],
    "commands": ["tar", "mkdir", "cat", "pv", "ls", "diff", "gunzip"],
    "packages": {
      "debian_ubuntu": ["tar", "gzip", "bzip2", "xz-utils", "pv"],
      "arch": ["tar", "gzip", "bzip2", "xz", "pv"]
    },
    "related_commands": ["unzip", "gunzip", "bunzip2", "unxz", "rsync"],
    "complexity": "intermediate",
    "tags": ["tar", "extract", "restore", "backup", "decompression", "recovery"]
  }
]

[
  {
    "id": "scenario_service_wont_start_multi_approach_001",
    "command": "systemctl",
    "scenario": "Developer: Apache/nginx won't start, web server down",
    "problem": "Web server service failing, need to find why",
    "solution": "Diagnose service failure through multiple methods",
    "steps": [
      "USER SAYS: 'My web server won\\'t start! Need it for testing!'",
      "AGENT: 'Let me diagnose why the service is failing...'",
      "AGENT: 'Approach 1: Try starting with systemctl...'",
      "Try start: sudo systemctl start nginx",
      "Check status: sudo systemctl status nginx",
      "AGENT: 'nginx.service: failed'",
      "AGENT: 'Process: 12345 ExecStart=/usr/sbin/nginx (code=exited, status=1/FAILURE) ✗'",
      "AGENT: 'Service failed to start'",
      "AGENT: 'Approach 2: Check detailed logs...'",
      "Check logs: sudo journalctl -u nginx -n 50 --no-pager",
      "AGENT: 'nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)'",
      "AGENT: 'Port 80 is already in use! ✗'",
      "USER: 'What\\'s using port 80?'",
      "AGENT: 'Approach 3: Find what\\'s using the port...'",
      "Check port: sudo lsof -i :80",
      "AGENT: 'apache2  8765  root  4u  IPv4  TCP *:http (LISTEN)'",
      "AGENT: 'Apache is running on port 80!'",
      "AGENT: 'You have both Apache and Nginx installed'",
      "USER: 'I want to use Nginx, not Apache!'",
      "AGENT: 'Approach 4: Stop conflicting service...'",
      "Stop Apache: sudo systemctl stop apache2",
      "AGENT: 'Apache stopped ✓'",
      "Disable Apache: sudo systemctl disable apache2",
      "AGENT: 'Apache will not auto-start on boot ✓'",
      "Try nginx again: sudo systemctl start nginx",
      "Check status: sudo systemctl status nginx",
      "AGENT: 'nginx.service: failed'",
      "AGENT: 'nginx: [emerg] open() \"/etc/nginx/nginx.conf\" failed (2: No such file) ✗'",
      "AGENT: 'Config file missing!'",
      "AGENT: 'Approach 5: Reinstall to restore config...'",
      "Reinstall: sudo apt install --reinstall nginx || sudo pacman -S nginx",
      "AGENT: 'Nginx reinstalled ✓'",
      "Try start: sudo systemctl start nginx",
      "Check status: sudo systemctl status nginx",
      "AGENT: 'active (running) ✓'",
      "AGENT: 'Nginx is running!'",
      "Test: curl http://localhost",
      "AGENT: 'curl: (7) Failed to connect to localhost port 80: Connection refused ✗'",
      "AGENT: 'Service says running but not responding!'",
      "AGENT: 'Approach 6: Check if actually listening...'",
      "Check listening: sudo ss -tlnp | grep :80",
      "AGENT: '(nothing) ✗'",
      "AGENT: 'Not listening on port 80!'",
      "Check config: sudo nginx -t",
      "AGENT: 'nginx: [emerg] \"listen\" directive is not allowed here in /etc/nginx/nginx.conf:15'",
      "AGENT: 'nginx: configuration file /etc/nginx/nginx.conf test failed ✗'",
      "AGENT: 'Config syntax error!'",
      "AGENT: 'Approach 7: Fix or restore default config...'",
      "Backup bad config: sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bad",
      "Get default: sudo cp /usr/share/doc/nginx/examples/nginx.conf /etc/nginx/nginx.conf",
      "AGENT: 'Restored default config ✓'",
      "Test config: sudo nginx -t",
      "AGENT: 'nginx: configuration file /etc/nginx/nginx.conf test is successful ✓'",
      "Restart: sudo systemctl restart nginx",
      "Check status: sudo systemctl status nginx",
      "AGENT: 'active (running) ✓'",
      "Check listening: sudo ss -tlnp | grep :80",
      "AGENT: 'LISTEN  0  511  0.0.0.0:80  *:*  users:((\"nginx\",pid=12345)) ✓'",
      "Test: curl http://localhost",
      "AGENT: '<h1>Welcome to nginx!</h1> ✓'",
      "AGENT: 'Nginx fully working!'",
      "USER: 'What if config file was actually correct but still failing?'",
      "AGENT: 'Let me show you more troubleshooting approaches...'",
      "AGENT: 'Approach 8: Check filesystem permissions...'",
      "Show method: cat > ~/check-nginx-perms.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Nginx Permission Check ==='",
      "echo ''",
      "echo 'Config directory:'",
      "ls -ld /etc/nginx",
      "echo ''",
      "echo 'Config file:'",
      "ls -l /etc/nginx/nginx.conf",
      "echo ''",
      "echo 'Log directory:'",
      "ls -ld /var/log/nginx",
      "echo ''",
      "echo 'Web root:'",
      "ls -ld /var/www/html",
      "echo ''",
      "echo 'Expected permissions:'",
      "echo '  /etc/nginx: drwxr-xr-x root root'",
      "echo '  nginx.conf: -rw-r--r-- root root'",
      "echo '  /var/log/nginx: drwxr-x--- root adm'",
      "echo '  /var/www/html: drwxr-xr-x root root'",
      "EOF",
      "chmod +x ~/check-nginx-perms.sh",
      "AGENT: 'Approach 9: Check SELinux if service denied...'",
      "Show method: cat > ~/check-selinux-nginx.sh << 'EOF'",
      "#!/bin/bash",
      "if command -v getenforce &>/dev/null; then",
      "  echo '=== SELinux Status ==='",
      "  getenforce",
      "  echo ''",
      "  echo 'Nginx-related denials:'",
      "  sudo ausearch -m avc -c nginx 2>/dev/null | tail -20",
      "  echo ''",
      "  echo 'If SELinux is blocking nginx:'",
      "  echo '  Temporary: sudo setenforce 0'",
      "  echo '  Permanent: sudo semanage permissive -a httpd_t'",
      "else",
      "  echo 'SELinux not installed'",
      "fi",
      "EOF",
      "chmod +x ~/check-selinux-nginx.sh",
      "AGENT: 'Approach 10: Run nginx directly to see errors...'",
      "Show method: cat > ~/run-nginx-debug.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Running Nginx in Debug Mode ==='",
      "echo ''",
      "echo 'Stopping systemd service...'",
      "sudo systemctl stop nginx",
      "echo ''",
      "echo 'Running nginx in foreground:'",
      "sudo nginx -g 'daemon off; error_log /dev/stdout info;'",
      "EOF",
      "chmod +x ~/run-nginx-debug.sh",
      "AGENT: 'Approach 11: Try alternative port if 80 blocked...'",
      "Show method: cat > ~/nginx-alt-port.sh << 'EOF'",
      "#!/bin/bash",
      "read -p 'Alternative port (e.g., 8080): ' PORT",
      "echo \"Configuring nginx on port $PORT...\"",
      "sudo sed -i \"s/listen.*80/listen $PORT/\" /etc/nginx/sites-available/default",
      "sudo nginx -t && sudo systemctl restart nginx",
      "echo \"Test: curl http://localhost:$PORT\"",
      "EOF",
      "chmod +x ~/nginx-alt-port.sh",
      "Create comprehensive service debugger: cat > ~/debug-service.sh << 'EOF'",
      "#!/bin/bash",
      "SERVICE=$1",
      "if [ -z \"$SERVICE\" ]; then",
      "  echo 'Usage: ./debug-service.sh <service-name>'",
      "  exit 1",
      "fi",
      "echo \"=== Service Debugger: $SERVICE ===\"",
      "echo ''",
      "echo '1. Service Status:'",
      "systemctl status $SERVICE --no-pager",
      "echo ''",
      "echo '2. Recent Logs (last 50 lines):'",
      "journalctl -u $SERVICE -n 50 --no-pager",
      "echo ''",
      "echo '3. Service Configuration:'",
      "systemctl cat $SERVICE",
      "echo ''",
      "echo '4. Is service enabled?'",
      "systemctl is-enabled $SERVICE 2>/dev/null || echo 'Not enabled'",
      "echo ''",
      "echo '5. Failed units:'",
      "systemctl list-units --failed",
      "echo ''",
      "echo '6. Dependency issues:'",
      "systemctl list-dependencies $SERVICE | grep -E '●|failed'",
      "EOF",
      "chmod +x ~/debug-service.sh",
      "Create service fix tool: cat > ~/fix-service.sh << 'EOF'",
      "#!/bin/bash",
      "SERVICE=$1",
      "echo \"=== Service Fix Tool: $SERVICE ===\"",
      "echo ''",
      "echo 'Trying fixes in order...'",
      "echo ''",
      "echo 'Fix 1: Restart service...'",
      "sudo systemctl restart $SERVICE",
      "if systemctl is-active $SERVICE &>/dev/null; then",
      "  echo \"✓ $SERVICE is running\"",
      "  exit 0",
      "fi",
      "echo \"✗ Still not running\"",
      "echo ''",
      "echo 'Fix 2: Check for port conflicts...'",
      "PORTS=$(grep -oP 'listen.*\\K[0-9]+' /etc/$SERVICE/* 2>/dev/null)",
      "for port in $PORTS; do",
      "  if sudo lsof -i :$port | grep -v $SERVICE &>/dev/null; then",
      "    echo \"⚠️ Port $port in use by:\"",
      "    sudo lsof -i :$port | grep -v COMMAND",
      "    read -p 'Kill conflicting process? (y/n): ' KILL",
      "    if [ \"$KILL\" == 'y' ]; then",
      "      sudo lsof -t -i :$port | xargs sudo kill",
      "    fi",
      "  fi",
      "done",
      "echo ''",
      "echo 'Fix 3: Reset to defaults...'",
      "sudo systemctl reset-failed $SERVICE",
      "sudo systemctl daemon-reload",
      "sudo systemctl restart $SERVICE",
      "if systemctl is-active $SERVICE &>/dev/null; then",
      "  echo \"✓ $SERVICE is running\"",
      "  exit 0",
      "fi",
      "echo ''",
      "echo '✗ All automatic fixes failed'",
      "echo 'Check logs: journalctl -u $SERVICE -n 100'",
      "EOF",
      "chmod +x ~/fix-service.sh",
      "Create web server switcher: cat > ~/switch-webserver.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Web Server Switcher ==='",
      "echo ''",
      "echo 'Installed web servers:'",
      "for ws in nginx apache2 httpd lighttpd; do",
      "  if command -v $ws &>/dev/null || systemctl list-unit-files | grep -q $ws; then",
      "    STATUS=$(systemctl is-active $ws 2>/dev/null || echo 'inactive')",
      "    echo \"  $ws: $STATUS\"",
      "  fi",
      "done",
      "echo ''",
      "echo 'Switch to:'",
      "echo '1. Nginx'",
      "echo '2. Apache'",
      "read -p 'Choice: ' CHOICE",
      "case $CHOICE in",
      "  1)",
      "    sudo systemctl stop apache2 httpd 2>/dev/null",
      "    sudo systemctl disable apache2 httpd 2>/dev/null",
      "    sudo systemctl enable --now nginx",
      "    echo '✓ Switched to Nginx'",
      "    ;;",
      "  2)",
      "    sudo systemctl stop nginx 2>/dev/null",
      "    sudo systemctl disable nginx 2>/dev/null",
      "    sudo systemctl enable --now apache2 2>/dev/null || sudo systemctl enable --now httpd",
      "    echo '✓ Switched to Apache'",
      "    ;;",
      "esac",
      "echo ''",
      "echo 'Testing...'",
      "sleep 2",
      "curl -I http://localhost 2>/dev/null | head -1",
      "EOF",
      "chmod +x ~/switch-webserver.sh",
      "AGENT: 'Service issues resolved! ✓'",
      "AGENT: ''",
      "AGENT: 'Problems found and fixed:'",
      "AGENT: '  1. Port conflict → stopped Apache'",
      "AGENT: '  2. Missing config → reinstalled'",
      "AGENT: '  3. Invalid config → restored default'",
      "AGENT: ''",
      "AGENT: 'Troubleshooting approaches used:'",
      "AGENT: '  1. systemctl start → check status'",
      "AGENT: '  2. journalctl logs → found port conflict'",
      "AGENT: '  3. lsof → identified Apache'",
      "AGENT: '  4. Stop conflict → still failing'",
      "AGENT: '  5. Reinstall → config error'",
      "AGENT: '  6. nginx -t → found syntax error'",
      "AGENT: '  7. Restore config → success!'",
      "AGENT: ''",
      "AGENT: 'Alternative approaches available:'",
      "AGENT: '  8. Check permissions (~/check-nginx-perms.sh)'",
      "AGENT: '  9. Check SELinux (~/check-selinux-nginx.sh)'",
      "AGENT: '  10. Debug mode (~/run-nginx-debug.sh)'",
      "AGENT: '  11. Alternative port (~/nginx-alt-port.sh)'",
      "AGENT: ''",
      "AGENT: 'Helper tools:'",
      "AGENT: '  ~/debug-service.sh <service> - comprehensive diagnostics'",
      "AGENT: '  ~/fix-service.sh <service> - automatic fixes'",
      "AGENT: '  ~/switch-webserver.sh - switch between nginx/apache'",
      "AGENT: ''",
      "AGENT: 'Nginx running on port 80 ✓'"
    ],
    "commands": ["systemctl", "nginx", "lsof", "ss", "curl"],
    "packages": {"debian_ubuntu": ["nginx"], "arch": ["nginx"]},
    "related_commands": ["systemctl", "journalctl", "nginx", "apache2"],
    "complexity": "intermediate",
    "tags": ["nginx", "apache", "service", "systemd", "multiple-approaches", "web-server", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_disk_mount_multi_approach_001",
    "command": "mount",
    "scenario": "Developer: External drive won't mount for backups",
    "problem": "USB drive not mounting, data inaccessible",
    "solution": "Try multiple mounting approaches",
    "steps": [
      "USER SAYS: 'I plugged in my backup drive but can\\'t access it!'",
      "AGENT: 'Let me help you mount the drive...'",
      "AGENT: 'Approach 1: Check if system detected it...'",
      "Check dmesg: sudo dmesg | tail -20",
      "AGENT: '[12345.678] usb 2-1: new high-speed USB device'",
      "AGENT: '[12345.789] sd 8:0:0:0: [sdb] 976773168 512-byte logical blocks'",
      "AGENT: '[12345.890] sdb: sdb1 ✓'",
      "AGENT: 'Drive detected as /dev/sdb with partition /dev/sdb1'",
      "List disks: lsblk",
      "AGENT: 'sdb           8:16   0  465.8G  0 disk'",
      "AGENT: '└─sdb1        8:17   0  465.8G  0 part'",
      "AGENT: 'Partition exists but no mountpoint'",
      "AGENT: 'Approach 2: Try simple mount command...'",
      "Try mount: sudo mount /dev/sdb1 /mnt",
      "AGENT: 'mount: /mnt: wrong fs type, bad option, bad superblock ✗'",
      "AGENT: 'Mount failed - filesystem issue'",
      "AGENT: 'Approach 3: Check filesystem type...'",
      "Check fs: sudo blkid /dev/sdb1",
      "AGENT: '/dev/sdb1: UUID=\"1234-5678\" TYPE=\"ntfs\" ✗'",
      "AGENT: 'It\\'s NTFS (Windows filesystem)!'",
      "USER: 'Will that work on Linux?'",
      "AGENT: 'Yes, but needs ntfs-3g driver. Let me install it...'",
      "AGENT: 'Approach 4: Install NTFS support...'",
      "Install ntfs: sudo apt install ntfs-3g || sudo pacman -S ntfs-3g",
      "AGENT: 'ntfs-3g installed ✓'",
      "Try mount: sudo mount -t ntfs-3g /dev/sdb1 /mnt",
      "AGENT: 'NTFS signature is missing. ✗'",
      "AGENT: 'Failed: The volume requires chkdsk'",
      "AGENT: 'Filesystem is corrupted or dirty (unsafe removal from Windows)'",
      "USER: 'Can I still access my data?'",
      "AGENT: 'Approach 5: Try read-only mount...'",
      "Try readonly: sudo mount -t ntfs-3g -o ro /dev/sdb1 /mnt",
      "AGENT: 'Mounted read-only ✓'",
      "List files: ls /mnt",
      "AGENT: 'backups/'",
      "AGENT: 'project-2025/'",
      "AGENT: 'documents/ ✓'",
      "AGENT: 'Data is accessible!'",
      "USER: 'But I need to write new backups!'",
      "AGENT: 'Approach 6: Fix NTFS filesystem with ntfsfix...'",
      "Unmount: sudo umount /mnt",
      "Fix ntfs: sudo ntfsfix /dev/sdb1",
      "AGENT: 'Mounting volume... OK'",
      "AGENT: 'Processing of $MFT and $MFTMirr completed successfully.'",
      "AGENT: 'Checking the alternate boot sector... OK'",
      "AGENT: 'NTFS volume repaired ✓'",
      "Try mount rw: sudo mount -t ntfs-3g /dev/sdb1 /mnt",
      "AGENT: 'Mounted read-write ✓'",
      "Test write: sudo touch /mnt/test.txt",
      "AGENT: 'Created file ✓'",
      "Remove test: sudo rm /mnt/test.txt",
      "AGENT: 'Write access working!'",
      "USER: 'What if filesystem was different, like exFAT?'",
      "AGENT: 'Let me show you approaches for other filesystems...'",
      "AGENT: 'Approach 7: exFAT filesystem...'",
      "Show method: cat > ~/mount-exfat.sh << 'EOF'",
      "#!/bin/bash",
      "DEVICE=$1",
      "MOUNT=/mnt/backup",
      "echo 'Installing exFAT support...'",
      "sudo apt install exfat-fuse exfat-utils || sudo pacman -S exfat-utils",
      "sudo mkdir -p $MOUNT",
      "echo 'Mounting exFAT...'",
      "sudo mount -t exfat $DEVICE $MOUNT",
      "echo \"✓ Mounted at $MOUNT\"",
      "EOF",
      "chmod +x ~/mount-exfat.sh",
      "AGENT: 'Approach 8: Auto-mount with udisks2...'",
      "Show method: cat > ~/auto-mount-udisks.sh << 'EOF'",
      "#!/bin/bash",
      "DEVICE=$1",
      "echo 'Using udisks2 for automatic mounting...'",
      "# udisks2 handles permissions and filesystem detection",
      "udisksctl mount -b $DEVICE",
      "MOUNT=$(udisksctl info -b $DEVICE | grep MountPoints | awk '{print $2}')",
      "echo \"✓ Auto-mounted at $MOUNT\"",
      "echo 'To unmount: udisksctl unmount -b $DEVICE'",
      "EOF",
      "chmod +x ~/auto-mount-udisks.sh",
      "AGENT: 'Approach 9: Create persistent mount in fstab...'",
      "Show method: cat > ~/add-to-fstab.sh << 'EOF'",
      "#!/bin/bash",
      "DEVICE=$1",
      "MOUNT=$2",
      "UUID=$(sudo blkid $DEVICE | grep -oP 'UUID=\"\\K[^\"]+')  ",
      "FSTYPE=$(sudo blkid $DEVICE | grep -oP 'TYPE=\"\\K[^\"]+') ",
      "echo \"Adding to /etc/fstab...\"",
      "sudo mkdir -p $MOUNT",
      "echo \"UUID=$UUID $MOUNT $FSTYPE defaults 0 2\" | sudo tee -a /etc/fstab",
      "echo '✓ Added to fstab'",
      "echo 'Testing mount...'",
      "sudo mount $MOUNT",
      "echo '✓ Will auto-mount on boot'",
      "EOF",
      "chmod +x ~/add-to-fstab.sh",
      "AGENT: 'Approach 10: If partition table corrupt, recreate...'",
      "Show method: cat > ~/fix-partition-table.sh << 'EOF'",
      "#!/bin/bash",
      "DISK=$1",
      "echo '=== WARNING: This will DESTROY all data! ==='",
      "read -p 'Continue? (type YES): ' CONFIRM",
      "if [ \"$CONFIRM\" != 'YES' ]; then exit; fi",
      "echo 'Creating new partition table...'",
      "sudo parted $DISK mklabel gpt",
      "sudo parted $DISK mkpart primary ext4 0% 100%",
      "sudo mkfs.ext4 ${DISK}1",
      "echo '✓ Partition table and filesystem created'",
      "EOF",
      "chmod +x ~/fix-partition-table.sh",
      "Create comprehensive mount helper: cat > ~/smart-mount.sh << 'EOF'",
      "#!/bin/bash",
      "DEVICE=$1",
      "MOUNTPOINT=${2:-/mnt/backup}",
      "echo \"=== Smart Mount: $DEVICE ===\"",
      "echo ''",
      "if [ -z \"$DEVICE\" ]; then",
      "  echo 'Usage: ./smart-mount.sh <device> [mountpoint]'",
      "  echo ''",
      "  echo 'Available devices:'",
      "  lsblk -o NAME,SIZE,TYPE,FSTYPE,MOUNTPOINT | grep -E 'part|disk'",
      "  exit 1",
      "fi",
      "# Detect filesystem",
      "FSTYPE=$(sudo blkid $DEVICE | grep -oP 'TYPE=\"\\K[^\"]+') ",
      "echo \"Detected filesystem: $FSTYPE\"",
      "echo ''",
      "# Install drivers if needed",
      "case $FSTYPE in",
      "  ntfs)",
      "    if ! command -v ntfs-3g &>/dev/null; then",
      "      echo 'Installing NTFS support...'",
      "      sudo apt install ntfs-3g || sudo pacman -S ntfs-3g",
      "    fi",
      "    MOUNT_OPTS='-t ntfs-3g'",
      "    ;;",
      "  exfat)",
      "    if ! command -v mount.exfat &>/dev/null; then",
      "      echo 'Installing exFAT support...'",
      "      sudo apt install exfat-fuse exfat-utils || sudo pacman -S exfat-utils",
      "    fi",
      "    MOUNT_OPTS='-t exfat'",
      "    ;;",
      "  vfat|fat)",
      "    MOUNT_OPTS='-t vfat'",
      "    ;;",
      "  ext*|xfs|btrfs)",
      "    MOUNT_OPTS=''  # Native support",
      "    ;;",
      "  *)",
      "    echo \"Unknown filesystem: $FSTYPE\"",
      "    MOUNT_OPTS=''",
      "    ;;",
      "esac",
      "# Create mountpoint",
      "sudo mkdir -p $MOUNTPOINT",
      "# Try mounting",
      "echo \"Attempting mount...\"",
      "if sudo mount $MOUNT_OPTS $DEVICE $MOUNTPOINT 2>/dev/null; then",
      "  echo \"✓ Mounted at $MOUNTPOINT\"",
      "  ls -lh $MOUNTPOINT | head -10",
      "else",
      "  echo \"✗ Mount failed, trying read-only...\"",
      "  if sudo mount $MOUNT_OPTS -o ro $DEVICE $MOUNTPOINT 2>/dev/null; then",
      "    echo \"⚠️ Mounted READ-ONLY at $MOUNTPOINT\"",
      "    echo 'Filesystem may need repair:'",
      "    case $FSTYPE in",
      "      ntfs) echo '  sudo ntfsfix $DEVICE' ;;",
      "      ext*) echo '  sudo e2fsck -f $DEVICE' ;;",
      "      xfs) echo '  sudo xfs_repair $DEVICE' ;;",
      "    esac",
      "  else",
      "    echo '✗ Could not mount even read-only'",
      "    echo 'Try: sudo fsck $DEVICE'",
      "  fi",
      "fi",
      "EOF",
      "chmod +x ~/smart-mount.sh",
      "Create unmount helper: cat > ~/smart-unmount.sh << 'EOF'",
      "#!/bin/bash",
      "TARGET=$1",
      "if [ -z \"$TARGET\" ]; then",
      "  echo 'Currently mounted:'",
      "  mount | grep -E '/dev/sd|/dev/nvme' | grep -v ' / '",
      "  echo ''",
      "  read -p 'Device or mountpoint to unmount: ' TARGET",
      "fi",
      "echo \"Unmounting $TARGET...\"",
      "if sudo umount $TARGET 2>/dev/null; then",
      "  echo '✓ Unmounted'",
      "else",
      "  echo '✗ Busy or in use'",
      "  echo ''",
      "  echo 'Processes using this mount:'",
      "  sudo lsof $TARGET 2>/dev/null || sudo fuser -m $TARGET",
      "  echo ''",
      "  read -p 'Force unmount? (y/n): ' FORCE",
      "  if [ \"$FORCE\" == 'y' ]; then",
      "    sudo fuser -km $TARGET",
      "    sudo umount -l $TARGET",
      "    echo '✓ Force unmounted'",
      "  fi",
      "fi",
      "EOF",
      "chmod +x ~/smart-unmount.sh",
      "AGENT: 'Drive mounted and accessible! ✓'",
      "AGENT: ''",
      "AGENT: 'Issues resolved:'",
      "AGENT: '  1. Drive detected but not mounted'",
      "AGENT: '  2. Wrong filesystem type (NTFS)'",
      "AGENT: '  3. Missing NTFS driver → installed ntfs-3g'",
      "AGENT: '  4. Dirty filesystem → mounted read-only'",
      "AGENT: '  5. Needed write access → ran ntfsfix'",
      "AGENT: ''",
      "AGENT: 'Mounting approaches:'",
      "AGENT: '  1. Check detection (dmesg, lsblk)'",
      "AGENT: '  2. Simple mount → failed (wrong fs)'",
      "AGENT: '  3. Check filesystem → NTFS'",
      "AGENT: '  4. Install driver → still dirty'",
      "AGENT: '  5. Mount read-only → accessed data'",
      "AGENT: '  6. Repair filesystem → full access'",
      "AGENT: ''",
      "AGENT: 'Alternative approaches:'",
      "AGENT: '  7. exFAT support (~/mount-exfat.sh)'",
      "AGENT: '  8. Auto-mount with udisks2'",
      "AGENT: '  9. Persistent fstab entry'",
      "AGENT: '  10. Recreate partition table (destructive)'",
      "AGENT: ''",
      "AGENT: 'Helper tools:'",
      "AGENT: '  ~/smart-mount.sh <device> - auto-detect and mount'",
      "AGENT: '  ~/smart-unmount.sh <device> - safely unmount'",
      "AGENT: ''",
      "AGENT: 'Drive ready for backups at /mnt ✓'"
    ],
    "commands": ["mount", "lsblk", "blkid", "ntfsfix", "umount"],
    "packages": {"debian_ubuntu": ["ntfs-3g", "exfat-fuse", "exfat-utils"], "arch": ["ntfs-3g", "exfat-utils"]},
    "related_commands": ["mount", "umount", "lsblk", "blkid", "udisksctl"],
    "complexity": "intermediate",
    "tags": ["mount", "filesystem", "ntfs", "usb-drive", "multiple-approaches", "troubleshooting", "backup", "real-world", "ai-agent"]
  }
]

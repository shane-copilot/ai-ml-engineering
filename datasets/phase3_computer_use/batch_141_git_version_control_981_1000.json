[
  {
    "id": "scenario_git_version_control_139",
    "command": "git",
    "scenario": "Master git version control for code management, collaboration, and history tracking.",
    "problem": "Need to track code changes, collaborate with team, manage branches, resolve conflicts, understand commit history, use remote repositories, and implement proper version control workflow for software projects.",
    "solution": "Learn git fundamentals: init, add, commit, push, pull, branch, merge, understand staging area, use .gitignore, resolve merge conflicts, work with remote repositories, and follow best practices for commit messages and workflow.",
    "steps": [
      "USER SAYS: 'I need to track my code changes and collaborate with others. How do I use git for version control?'",
      "AGENT: 'Let me teach you git! We'll cover initialization, commits, branches, merges, remote repositories, and collaborative workflows.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: Git version control...'",
      "AGENT: '[Searching] \"git tutorial commands workflow branches merge\"'",
      "AGENT: '[Found] git init to start repository, git add to stage changes.'",
      "AGENT: '[Found] git commit saves snapshots, git push/pull syncs remote.'",
      "AGENT: '[Found] Branches for parallel development, merge to combine.'",
      "AGENT: '[Found] .gitignore to exclude files from tracking.'",
      "AGENT: '✓ Research complete! Let's master git.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Install and Configure Git ---'",
      "Run command: `sudo apt install git -y`",
      "AGENT: ''",
      "Run command: `git --version`",
      "AGENT: 'git version 2.39.2'",
      "AGENT: ''",
      "Run command: `git config --global user.name \"Your Name\"`",
      "AGENT: ''",
      "Run command: `git config --global user.email \"your.email@example.com\"`",
      "AGENT: ''",
      "Run command: `git config --global core.editor vim`",
      "AGENT: ''",
      "Run command: `git config --list`",
      "AGENT: 'user.name=Your Name'",
      "AGENT: 'user.email=your.email@example.com'",
      "AGENT: 'core.editor=vim'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Initialize Repository ---'",
      "Run command: `mkdir my-project && cd my-project`",
      "AGENT: ''",
      "Run command: `git init`",
      "AGENT: 'Initialized empty Git repository in /home/user/my-project/.git/'",
      "AGENT: ''",
      "Run command: `ls -la`",
      "AGENT: 'drwxr-xr-x  .git'",
      "AGENT: '.git directory created - this is the repository database'",
      "AGENT: ''",
      "Run command: `git status`",
      "AGENT: 'On branch main'",
      "AGENT: 'No commits yet'",
      "AGENT: 'nothing to commit (create/copy files and use \"git add\" to track)'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: First Commit ---'",
      "Create tool: `cat > README.md << 'EOF'`",
      "# My Project\n\nThis is my awesome project!\nEOF",
      "AGENT: ''",
      "Run command: `git status`",
      "AGENT: 'Untracked files:'",
      "AGENT: '  (use \"git add <file>...\" to include in what will be committed)'",
      "AGENT: '        README.md'",
      "AGENT: ''",
      "Run command: `git add README.md`",
      "AGENT: 'Stages README.md for commit'",
      "AGENT: ''",
      "Run command: `git status`",
      "AGENT: 'Changes to be committed:'",
      "AGENT: '  (use \"git rm --cached <file>...\" to unstage)'",
      "AGENT: '        new file:   README.md'",
      "AGENT: ''",
      "Run command: `git commit -m \"Initial commit: Add README\"`",
      "AGENT: '[main (root-commit) a1b2c3d] Initial commit: Add README'",
      "AGENT: ' 1 file changed, 3 insertions(+)'",
      "AGENT: ' create mode 100644 README.md'",
      "AGENT: ''",
      "Run command: `git status`",
      "AGENT: 'On branch main'",
      "AGENT: 'nothing to commit, working tree clean'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Working with Changes ---'",
      "Create tool: `cat > app.py << 'EOF'`",
      "def hello():\n    print(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n    hello()\nEOF",
      "AGENT: ''",
      "Run command: `git add app.py`",
      "Run command: `git commit -m \"Add main application file\"`",
      "AGENT: ''",
      "AGENT: 'Modify file:'",
      "Run command: `echo 'print(\"Goodbye!\")' >> app.py`",
      "AGENT: ''",
      "Run command: `git status`",
      "AGENT: 'Changes not staged for commit:'",
      "AGENT: '  modified:   app.py'",
      "AGENT: ''",
      "Run command: `git diff`",
      "AGENT: 'Shows changes not yet staged'",
      "AGENT: '+print(\"Goodbye!\")'",
      "AGENT: ''",
      "Run command: `git add app.py`",
      "Run command: `git diff --staged`",
      "AGENT: 'Shows changes staged for commit'",
      "AGENT: ''",
      "Run command: `git commit -m \"Add goodbye message\"`",
      "AGENT: ''",
      "AGENT: '--- Approach 5: View History ---'",
      "Run command: `git log`",
      "AGENT: 'commit d4e5f6g7... (HEAD -> main)'",
      "AGENT: 'Author: Your Name <your.email@example.com>'",
      "AGENT: 'Date:   Tue Oct 8 19:00:00 2025'",
      "AGENT: ''",
      "AGENT: '    Add goodbye message'",
      "AGENT: ''",
      "AGENT: 'commit a1b2c3d4...'",
      "AGENT: '    Add main application file'",
      "AGENT: '...'",
      "AGENT: ''",
      "Run command: `git log --oneline`",
      "AGENT: 'd4e5f6g Add goodbye message'",
      "AGENT: 'b2c3d4e Add main application file'",
      "AGENT: 'a1b2c3d Initial commit: Add README'",
      "AGENT: ''",
      "Run command: `git log --oneline --graph --all`",
      "AGENT: 'Visual representation with branches'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Branching ---'",
      "Run command: `git branch feature/new-feature`",
      "AGENT: 'Creates new branch'",
      "AGENT: ''",
      "Run command: `git branch`",
      "AGENT: '  feature/new-feature'",
      "AGENT: '* main'",
      "AGENT: '* indicates current branch'",
      "AGENT: ''",
      "Run command: `git checkout feature/new-feature`",
      "AGENT: 'Switched to branch \\'feature/new-feature\\''",
      "AGENT: ''",
      "AGENT: 'Or create and switch in one command:'",
      "Run command: `git checkout -b feature/another-feature`",
      "AGENT: 'Switched to a new branch \\'feature/another-feature\\''",
      "AGENT: ''",
      "Run command: `git branch`",
      "AGENT: '* feature/another-feature'",
      "AGENT: '  feature/new-feature'",
      "AGENT: '  main'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Making Changes on Branch ---'",
      "Run command: `git checkout feature/new-feature`",
      "AGENT: ''",
      "Create tool: `cat > feature.py << 'EOF'`",
      "def new_feature():\n    print(\"New feature!\")\nEOF",
      "AGENT: ''",
      "Run command: `git add feature.py`",
      "Run command: `git commit -m \"Implement new feature\"`",
      "AGENT: ''",
      "Run command: `git log --oneline`",
      "AGENT: 'e5f6g7h Implement new feature'",
      "AGENT: 'd4e5f6g Add goodbye message'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: 'Switch back to main:'",
      "Run command: `git checkout main`",
      "Run command: `ls`",
      "AGENT: 'README.md  app.py'",
      "AGENT: 'feature.py is NOT here (it\\'s on the branch)'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Merging Branches ---'",
      "Run command: `git checkout main`",
      "Run command: `git merge feature/new-feature`",
      "AGENT: 'Updating d4e5f6g..e5f6g7h'",
      "AGENT: 'Fast-forward'",
      "AGENT: ' feature.py | 2 ++'",
      "AGENT: ' 1 file changed, 2 insertions(+)'",
      "AGENT: ''",
      "Run command: `ls`",
      "AGENT: 'README.md  app.py  feature.py'",
      "AGENT: 'feature.py is now merged into main!'",
      "AGENT: ''",
      "Run command: `git branch -d feature/new-feature`",
      "AGENT: 'Deleted branch feature/new-feature'",
      "AGENT: 'Delete merged branch (optional)'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: .gitignore ---'",
      "Create tool: `cat > .gitignore << 'EOF'`",
      "# Python\n__pycache__/\n*.pyc\n*.pyo\n*.egg-info/\n.venv/\nvenv/\n\n# IDE\n.vscode/\n.idea/\n*.swp\n\n# OS\n.DS_Store\nThumbs.db\n\n# Logs\n*.log\n\n# Environment\n.env\n.env.local\nEOF",
      "AGENT: ''",
      "Run command: `git add .gitignore`",
      "Run command: `git commit -m \"Add .gitignore\"`",
      "AGENT: ''",
      "AGENT: 'Now these files won\\'t be tracked:'",
      "Run command: `touch test.log`",
      "Run command: `git status`",
      "AGENT: 'nothing to commit, working tree clean'",
      "AGENT: 'test.log is ignored!'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Remote Repositories ---'",
      "AGENT: ''",
      "AGENT: 'Add remote (GitHub, GitLab, etc.):'",
      "Run command: `git remote add origin https://github.com/username/repo.git`",
      "AGENT: ''",
      "Run command: `git remote -v`",
      "AGENT: 'origin  https://github.com/username/repo.git (fetch)'",
      "AGENT: 'origin  https://github.com/username/repo.git (push)'",
      "AGENT: ''",
      "Run command: `git push -u origin main`",
      "AGENT: 'Uploads commits to remote repository'",
      "AGENT: '  -u = Set upstream for tracking'",
      "AGENT: ''",
      "AGENT: 'Pull changes from remote:'",
      "Run command: `git pull origin main`",
      "AGENT: 'Downloads and merges remote changes'",
      "AGENT: ''",
      "AGENT: 'Clone existing repository:'",
      "Run command: `git clone https://github.com/username/repo.git`",
      "AGENT: 'Downloads entire repository'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Resolve Merge Conflicts ---'",
      "AGENT: ''",
      "AGENT: 'When merge conflict occurs:'",
      "Run command: `git merge feature-branch`",
      "AGENT: 'CONFLICT (content): Merge conflict in app.py'",
      "AGENT: 'Automatic merge failed; fix conflicts and commit'",
      "AGENT: ''",
      "Run command: `git status`",
      "AGENT: 'Unmerged paths:'",
      "AGENT: '  both modified:   app.py'",
      "AGENT: ''",
      "Run command: `cat app.py`",
      "AGENT: 'def hello():'",
      "AGENT: '<<<<<<< HEAD'",
      "AGENT: '    print(\"Hello from main!\")'",
      "AGENT: '======='",
      "AGENT: '    print(\"Hello from feature!\")'",
      "AGENT: '>>>>>>> feature-branch'",
      "AGENT: ''",
      "AGENT: 'Edit file to resolve conflict:'",
      "AGENT: 'Remove conflict markers, keep desired code'",
      "AGENT: ''",
      "Run command: `git add app.py`",
      "Run command: `git commit -m \"Resolve merge conflict\"`",
      "AGENT: ''",
      "AGENT: '--- Bonus: Useful Git Commands ---'",
      "AGENT: ''",
      "AGENT: 'Undo changes:'",
      "Run command: `git restore file.txt`",
      "AGENT: 'Discard changes in working directory'",
      "AGENT: ''",
      "Run command: `git restore --staged file.txt`",
      "AGENT: 'Unstage file'",
      "AGENT: ''",
      "Run command: `git reset HEAD~1`",
      "AGENT: 'Undo last commit (keep changes)'",
      "AGENT: ''",
      "Run command: `git reset --hard HEAD~1`",
      "AGENT: 'Undo last commit (discard changes)'",
      "AGENT: ''",
      "AGENT: 'View specific commit:'",
      "Run command: `git show a1b2c3d`",
      "AGENT: 'Shows commit details and diff'",
      "AGENT: ''",
      "AGENT: 'Stash changes:'",
      "Run command: `git stash`",
      "AGENT: 'Temporarily save changes'",
      "AGENT: ''",
      "Run command: `git stash pop`",
      "AGENT: 'Restore stashed changes'",
      "AGENT: ''",
      "AGENT: 'Tag releases:'",
      "Run command: `git tag v1.0.0`",
      "Run command: `git push origin v1.0.0`",
      "AGENT: ''",
      "AGENT: '--- Bonus: Git Workflow Best Practices ---'",
      "AGENT: ''",
      "AGENT: 'Commit message format:'",
      "AGENT: '  git commit -m \"feat: Add user authentication\"'",
      "AGENT: '  git commit -m \"fix: Resolve login bug\"'",
      "AGENT: '  git commit -m \"docs: Update README\"'",
      "AGENT: ''",
      "AGENT: 'Workflow:'",
      "AGENT: '  1. Pull latest: git pull origin main'",
      "AGENT: '  2. Create branch: git checkout -b feature/my-feature'",
      "AGENT: '  3. Make changes and commit'",
      "AGENT: '  4. Push branch: git push origin feature/my-feature'",
      "AGENT: '  5. Create Pull Request on GitHub'",
      "AGENT: '  6. Review, merge, delete branch'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Git Cheat Sheet ---'",
      "Create tool: `cat > git-cheatsheet.txt << 'EOF'`",
      "=== GIT CHEAT SHEET ===\n\nSETUP:\n  git init                  Initialize repository\n  git clone <url>           Clone repository\n\nCOMMITS:\n  git add <file>            Stage file\n  git add .                 Stage all files\n  git commit -m \"message\"   Commit staged changes\n  git status                Show status\n  git diff                  Show unstaged changes\n  git log                   View history\n\nBRANCHES:\n  git branch                List branches\n  git branch <name>         Create branch\n  git checkout <name>       Switch branch\n  git checkout -b <name>    Create and switch\n  git merge <branch>        Merge branch into current\n  git branch -d <name>      Delete branch\n\nREMOTE:\n  git remote add origin <url>  Add remote\n  git push origin <branch>     Push to remote\n  git pull origin <branch>     Pull from remote\n  git fetch                    Fetch remote changes\n\nUNDO:\n  git restore <file>        Discard changes\n  git reset HEAD~1          Undo last commit\n  git revert <commit>       Revert commit\n  git stash                 Save changes temporarily\n  git stash pop             Restore stashed changes\nEOF",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Configured git with name and email.'",
      "AGENT: '  ✓ Initialized repository with git init.'",
      "AGENT: '  ✓ Staged changes with git add and committed with git commit.'",
      "AGENT: '  ✓ Viewed history with git log.'",
      "AGENT: '  ✓ Created and switched branches.'",
      "AGENT: '  ✓ Merged branches into main.'",
      "AGENT: '  ✓ Used .gitignore to exclude files.'",
      "AGENT: '  ✓ Worked with remote repositories (push, pull, clone).'",
      "AGENT: '  ✓ Resolved merge conflicts.'",
      "AGENT: '  ✓ Learned git workflow best practices.'",
      "AGENT: '  ✓ You now master git version control! 🌳'"
    ],
    "commands": ["git", "git-init", "git-add", "git-commit", "git-push", "git-pull", "git-branch", "git-merge"],
    "packages": {
      "debian_ubuntu": ["git"],
      "arch": ["git"]
    },
    "related_commands": ["gitk", "tig", "lazygit"],
    "complexity": "intermediate",
    "tags": ["git", "version-control", "vcs", "branching", "merging", "github", "collaboration", "commits", "repository"]
  }
]

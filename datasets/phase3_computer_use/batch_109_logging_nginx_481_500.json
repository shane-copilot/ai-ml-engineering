[
  {
    "id": "scenario_log_analysis_journalctl_117",
    "command": "journalctl",
    "scenario": "Analyze system logs with journalctl for debugging and monitoring.",
    "problem": "System crashed overnight, services are behaving strangely, need to find error messages, understand what happened, and identify when issues started. Traditional /var/log files are hard to search efficiently.",
    "solution": "Master journalctl (systemd's logging system): filter by service, time range, priority level, follow logs in real-time, export for analysis, and understand log structure.",
    "steps": [
      "USER SAYS: 'The server crashed last night and I need to find out why. Where do I start looking in the logs?'",
      "AGENT: 'Journalctl is your best friend for system log analysis! It's systemd's centralized logging system with powerful filtering. Let me show you.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: System log analysis...'",
      "AGENT: '[Searching] \"journalctl tutorial filter time service priority\"'",
      "AGENT: '[Found] `journalctl` views systemd journal (binary format, fast to search).'",
      "AGENT: '[Found] Can filter by: time, service, priority, boot, user.'",
      "AGENT: '[Found] Priority levels: 0=emerg, 1=alert, 2=crit, 3=err, 4=warning, 5=notice, 6=info, 7=debug'",
      "AGENT: '[Found] Use `-f` to follow logs in real-time like `tail -f`.'",
      "AGENT: '✓ Research complete! Let's investigate.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: View Recent Logs ---'",
      "Run command: `journalctl -n 50`",
      "AGENT: 'Shows last 50 log entries'",
      "AGENT: ''",
      "AGENT: 'Oct 08 03:25:15 server kernel: Out of memory: Killed process 12345 (python3) total-vm:8GB'",
      "AGENT: 'Oct 08 03:25:16 server systemd[1]: myapp.service: Main process exited, code=killed, status=9/KILL'",
      "AGENT: 'Oct 08 03:25:16 server systemd[1]: myapp.service: Failed with result \\'signal\\'.'",
      "AGENT: 'Oct 08 03:25:21 server systemd[1]: myapp.service: Scheduled restart job'",
      "AGENT: ''",
      "AGENT: '💡 FOUND IT! Out of Memory Killer (OOM) killed the process at 3:25 AM'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Filter by Time Range ---'",
      "Run command: `journalctl --since \"2025-10-08 03:00:00\" --until \"2025-10-08 04:00:00\"`",
      "AGENT: 'Shows logs between 3 AM and 4 AM'",
      "AGENT: ''",
      "AGENT: 'Or use relative times:'",
      "Run command: `journalctl --since \"1 hour ago\"`",
      "Run command: `journalctl --since \"yesterday\"`",
      "Run command: `journalctl --since \"2 days ago\"`",
      "Run command: `journalctl --since \"today\"`",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Filter by Service ---'",
      "Run command: `journalctl -u nginx.service`",
      "AGENT: 'Shows all logs for nginx service'",
      "AGENT: ''",
      "Run command: `journalctl -u nginx.service --since today`",
      "AGENT: 'Nginx logs from today only'",
      "AGENT: ''",
      "Run command: `journalctl -u myapp.service -n 100`",
      "AGENT: 'Last 100 entries for myapp service'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Filter by Priority (Severity) ---'",
      "Run command: `journalctl -p err`",
      "AGENT: 'Shows only ERROR level and above (err, crit, alert, emerg)'",
      "AGENT: ''",
      "Run command: `journalctl -p warning --since today`",
      "AGENT: 'Today\\'s warnings and above'",
      "AGENT: ''",
      "Run command: `journalctl -p crit -n 20`",
      "AGENT: 'Last 20 critical errors'",
      "AGENT: ''",
      "AGENT: 'Priority levels (0-7):'",
      "AGENT: '  0: emerg   - System is unusable'",
      "AGENT: '  1: alert   - Action must be taken immediately'",
      "AGENT: '  2: crit    - Critical conditions'",
      "AGENT: '  3: err     - Error conditions'",
      "AGENT: '  4: warning - Warning conditions'",
      "AGENT: '  5: notice  - Normal but significant'",
      "AGENT: '  6: info    - Informational'",
      "AGENT: '  7: debug   - Debug messages'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Follow Logs in Real-Time ---'",
      "Run command: `journalctl -f`",
      "AGENT: 'Like tail -f, shows new log entries as they arrive'",
      "AGENT: ''",
      "Run command: `journalctl -u nginx.service -f`",
      "AGENT: 'Follow only nginx logs'",
      "AGENT: ''",
      "Run command: `journalctl -p warning -f`",
      "AGENT: 'Follow warnings and errors'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Search for Specific Text ---'",
      "Run command: `journalctl | grep -i \"out of memory\"`",
      "AGENT: 'Oct 08 03:25:15 server kernel: Out of memory: Killed process 12345'",
      "AGENT: ''",
      "Run command: `journalctl --since \"1 week ago\" | grep -i \"error\" | wc -l`",
      "AGENT: '1,234 errors in the past week'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: View Logs from Specific Boot ---'",
      "Run command: `journalctl --list-boots`",
      "AGENT: '-2 abc123... Mon 2025-10-07 00:00:00 UTC—Mon 2025-10-07 18:45:32 UTC'",
      "AGENT: '-1 def456... Mon 2025-10-07 18:46:00 UTC—Tue 2025-10-08 03:24:55 UTC  ← Crashed boot'",
      "AGENT: ' 0 ghi789... Tue 2025-10-08 03:25:30 UTC—Tue 2025-10-08 16:45:12 UTC  ← Current boot'",
      "AGENT: ''",
      "Run command: `journalctl -b -1`",
      "AGENT: 'Shows logs from previous boot (before crash)'",
      "AGENT: ''",
      "Run command: `journalctl -b -1 -p err`",
      "AGENT: 'Errors from previous boot - what caused the crash?'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Disk Usage and Vacuum ---'",
      "Run command: `journalctl --disk-usage`",
      "AGENT: 'Archived and active journals take up 2.1G in the file system.'",
      "AGENT: ''",
      "AGENT: 'Clean old logs (keep 7 days):'",
      "Run command: `sudo journalctl --vacuum-time=7d`",
      "AGENT: 'Vacuuming done, freed 1.5G of archived journals from /var/log/journal'",
      "AGENT: ''",
      "AGENT: 'Limit by size:'",
      "Run command: `sudo journalctl --vacuum-size=500M`",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Export Logs for Analysis ---'",
      "Run command: `journalctl -u myapp.service --since today -o json > myapp-today.json`",
      "AGENT: 'Exports to JSON for programmatic analysis'",
      "AGENT: ''",
      "Run command: `journalctl --since \"2025-10-08\" --until \"2025-10-09\" > oct8-logs.txt`",
      "AGENT: 'Exports to text file'",
      "AGENT: ''",
      "AGENT: 'Output formats:'",
      "AGENT: '  short (default) - Human readable'",
      "AGENT: '  json - JSON format'",
      "AGENT: '  json-pretty - Pretty-printed JSON'",
      "AGENT: '  verbose - All fields'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Combine Filters ---'",
      "Run command: `journalctl -u nginx.service -u postgresql.service -p err --since \"1 hour ago\"`",
      "AGENT: 'Nginx OR PostgreSQL errors from last hour'",
      "AGENT: ''",
      "Run command: `journalctl _PID=12345`",
      "AGENT: 'Logs from specific process ID'",
      "AGENT: ''",
      "Run command: `journalctl _UID=1000`",
      "AGENT: 'Logs from specific user'",
      "AGENT: ''",
      "Run command: `journalctl SYSLOG_FACILITY=3`",
      "AGENT: 'Logs from kernel (facility 0=kernel, 3=system daemons)'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Persistent Logging Configuration ---'",
      "AGENT: 'Make logs persistent across reboots:'",
      "Run command: `sudo mkdir -p /var/log/journal`",
      "Run command: `sudo systemd-tmpfiles --create --prefix /var/log/journal`",
      "Run command: `sudo systemctl restart systemd-journald`",
      "AGENT: ''",
      "AGENT: 'Configure in /etc/systemd/journald.conf:'",
      "AGENT: 'Storage=persistent'",
      "AGENT: 'SystemMaxUse=2G'",
      "AGENT: 'MaxRetentionSec=1month'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Common Troubleshooting Patterns ---'",
      "AGENT: ''",
      "AGENT: 'Find service failures:'",
      "Run command: `journalctl -p err -b | grep -i \"failed\"`",
      "AGENT: ''",
      "AGENT: 'Check what services restarted:'",
      "Run command: `journalctl | grep -i \"restart\"`",
      "AGENT: ''",
      "AGENT: 'Find authentication failures:'",
      "Run command: `journalctl -u sshd.service | grep -i \"failed\"`",
      "AGENT: ''",
      "AGENT: 'Kernel errors:'",
      "Run command: `journalctl -k -p err`",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Found OOM killer caused the crash at 3:25 AM.'",
      "AGENT: '  ✓ Filtered logs by time range (--since/--until).'",
      "AGENT: '  ✓ Viewed service-specific logs with -u.'",
      "AGENT: '  ✓ Filtered by priority to find errors/warnings.'",
      "AGENT: '  ✓ Followed logs in real-time with -f.'",
      "AGENT: '  ✓ Analyzed logs from previous boot to find crash cause.'",
      "AGENT: '  ✓ Managed disk usage with vacuum commands.'",
      "AGENT: '  ✓ Exported logs for deeper analysis.'",
      "AGENT: '  ✓ You now have master-level log analysis skills! 📊'"
    ],
    "commands": ["journalctl", "grep", "systemctl", "wc", "mkdir"],
    "packages": {
      "debian_ubuntu": ["systemd"],
      "arch": ["systemd"]
    },
    "related_commands": ["dmesg", "tail", "less", "logrotate"],
    "complexity": "intermediate",
    "tags": ["logging", "journalctl", "systemd", "troubleshooting", "monitoring", "log-analysis", "debugging"]
  },
  {
    "id": "scenario_nginx_web_server_118",
    "command": "nginx",
    "scenario": "Configure Nginx web server for hosting multiple websites with SSL.",
    "problem": "Need to host multiple websites on single server, set up reverse proxy for Node.js app, enable HTTPS, implement caching, and handle load balancing. Apache is too resource-heavy.",
    "solution": "Install and configure Nginx with server blocks (virtual hosts), set up reverse proxy, enable SSL with Let's Encrypt, implement caching strategies, and configure load balancing.",
    "steps": [
      "USER SAYS: 'I want to host multiple websites on one server with HTTPS. Everyone says Nginx is better than Apache for performance. How do I set it up?'",
      "AGENT: 'Nginx is excellent for high-performance web serving! Let me show you complete setup from installation to production-ready configuration with SSL and reverse proxying.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: Nginx web server...'",
      "AGENT: '[Searching] \"nginx tutorial server blocks ssl reverse proxy configuration\"'",
      "AGENT: '[Found] Nginx uses event-driven architecture (more efficient than Apache process model).'",
      "AGENT: '[Found] Server blocks = virtual hosts (multiple sites on one server).'",
      "AGENT: '[Found] Excellent reverse proxy for Node.js, Python, etc.'",
      "AGENT: '[Found] Test config before reload: `nginx -t`'",
      "AGENT: '✓ Research complete! Let's build production Nginx setup.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Install Nginx ---'",
      "Run command: `sudo apt-get update && sudo apt-get install -y nginx`",
      "AGENT: ''",
      "Run command: `nginx -v`",
      "AGENT: 'nginx version: nginx/1.24.0'",
      "AGENT: ''",
      "Run command: `sudo systemctl status nginx`",
      "AGENT: '● nginx.service - A high performance web server'",
      "AGENT: '   Active: active (running)'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Understand Directory Structure ---'",
      "Run command: `ls -l /etc/nginx/`",
      "AGENT: '/etc/nginx/'",
      "AGENT: '├── nginx.conf                    ← Main configuration'",
      "AGENT: '├── sites-available/              ← Site configs (not active)'",
      "AGENT: '│   └── default'",
      "AGENT: '├── sites-enabled/                ← Active site configs (symlinks)'",
      "AGENT: '│   └── default -> ../sites-available/default'",
      "AGENT: '├── conf.d/                       ← Additional configs'",
      "AGENT: '├── snippets/                     ← Reusable config snippets'",
      "AGENT: '└── modules-enabled/              ← Active modules'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Create First Website (Static) ---'",
      "Run command: `sudo mkdir -p /var/www/example.com/html`",
      "Run command: `sudo chown -R $USER:$USER /var/www/example.com`",
      "AGENT: ''",
      "Create tool: `cat > /var/www/example.com/html/index.html << 'EOF'`",
      "<!DOCTYPE html>\n<html>\n<head>\n    <title>Example.com</title>\n</head>\n<body>\n    <h1>Welcome to Example.com!</h1>\n    <p>Powered by Nginx</p>\n</body>\n</html>\nEOF",
      "AGENT: ''",
      "AGENT: 'Create server block:'",
      "Create tool: `sudo tee /etc/nginx/sites-available/example.com << 'EOF'`",
      "server {\n    listen 80;\n    listen [::]:80;\n    \n    server_name example.com www.example.com;\n    \n    root /var/www/example.com/html;\n    index index.html index.htm;\n    \n    access_log /var/log/nginx/example.com.access.log;\n    error_log /var/log/nginx/example.com.error.log;\n    \n    location / {\n        try_files $uri $uri/ =404;\n    }\n    \n    # Deny access to hidden files\n    location ~ /\\. {\n        deny all;\n    }\n}\nEOF",
      "AGENT: ''",
      "AGENT: 'Enable site:'",
      "Run command: `sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/`",
      "AGENT: ''",
      "AGENT: 'Test configuration:'",
      "Run command: `sudo nginx -t`",
      "AGENT: 'nginx: configuration file /etc/nginx/nginx.conf syntax is ok'",
      "AGENT: 'nginx: configuration file /etc/nginx/nginx.conf test is successful'",
      "AGENT: ''",
      "Run command: `sudo systemctl reload nginx`",
      "AGENT: ''",
      "Run command: `curl http://example.com`",
      "AGENT: '<h1>Welcome to Example.com!</h1>'",
      "AGENT: ''",
      "AGENT: '✅ First website is live!'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Reverse Proxy for Node.js App ---'",
      "Create tool: `sudo tee /etc/nginx/sites-available/app.example.com << 'EOF'`",
      "server {\n    listen 80;\n    server_name app.example.com;\n    \n    access_log /var/log/nginx/app.access.log;\n    error_log /var/log/nginx/app.error.log;\n    \n    location / {\n        # Proxy to Node.js app on port 3000\n        proxy_pass http://localhost:3000;\n        \n        # Proxy headers\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\nEOF",
      "Run command: `sudo ln -s /etc/nginx/sites-available/app.example.com /etc/nginx/sites-enabled/`",
      "Run command: `sudo nginx -t && sudo systemctl reload nginx`",
      "AGENT: ''",
      "AGENT: '✅ Nginx now proxies requests to Node.js app!'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Add SSL with Let\\'s Encrypt ---'",
      "Run command: `sudo apt-get install -y certbot python3-certbot-nginx`",
      "AGENT: ''",
      "Run command: `sudo certbot --nginx -d example.com -d www.example.com`",
      "AGENT: 'Successfully received certificate.'",
      "AGENT: 'Certificate is saved at: /etc/letsencrypt/live/example.com/fullchain.pem'",
      "AGENT: 'Successfully deployed certificate'",
      "AGENT: ''",
      "Run command: `cat /etc/nginx/sites-available/example.com`",
      "AGENT: 'Certbot automatically updated config:'",
      "AGENT: ''",
      "AGENT: 'server {'",
      "AGENT: '    listen 443 ssl;  ← Added HTTPS'",
      "AGENT: '    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;'",
      "AGENT: '    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;'",
      "AGENT: '    ...'",
      "AGENT: '}'",
      "AGENT: ''",
      "AGENT: 'server {'",
      "AGENT: '    listen 80;'",
      "AGENT: '    return 301 https://$server_name$request_uri;  ← HTTP→HTTPS redirect'",
      "AGENT: '}'",
      "AGENT: ''",
      "AGENT: '✅ HTTPS enabled with automatic HTTP redirect!'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Enable Caching ---'",
      "Create tool: `sudo tee /etc/nginx/conf.d/cache.conf << 'EOF'`",
      "# Cache path\nproxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;\nEOF",
      "AGENT: ''",
      "AGENT: 'Update app config to use cache:'",
      "AGENT: 'location / {'",
      "AGENT: '    proxy_cache my_cache;'",
      "AGENT: '    proxy_cache_use_stale error timeout http_500 http_502 http_503;'",
      "AGENT: '    proxy_cache_valid 200 60m;'",
      "AGENT: '    proxy_cache_valid 404 1m;'",
      "AGENT: '    add_header X-Cache-Status $upstream_cache_status;'",
      "AGENT: '    ...'",
      "AGENT: '}'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Load Balancing ---'",
      "Create tool: `sudo tee /etc/nginx/conf.d/upstream.conf << 'EOF'`",
      "upstream backend_servers {\n    least_conn;  # Load balancing method\n    \n    server localhost:3000 weight=3;\n    server localhost:3001 weight=2;\n    server localhost:3002 weight=1;\n    \n    # Health checks\n    server localhost:3003 backup;  # Only used if others fail\n}\nEOF",
      "AGENT: ''",
      "AGENT: 'Use in location block:'",
      "AGENT: 'location / {'",
      "AGENT: '    proxy_pass http://backend_servers;'",
      "AGENT: '}'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Performance Tuning ---'",
      "AGENT: 'Update /etc/nginx/nginx.conf:'",
      "AGENT: ''",
      "AGENT: 'worker_processes auto;  # One per CPU core'",
      "AGENT: 'worker_connections 1024;  # Max connections per worker'",
      "AGENT: ''",
      "AGENT: '# Enable gzip compression'",
      "AGENT: 'gzip on;'",
      "AGENT: 'gzip_vary on;'",
      "AGENT: 'gzip_min_length 1024;'",
      "AGENT: 'gzip_types text/plain text/css application/json application/javascript;'",
      "AGENT: ''",
      "AGENT: '# File caching'",
      "AGENT: 'open_file_cache max=10000 inactive=30s;'",
      "AGENT: 'open_file_cache_valid 60s;'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Security Headers ---'",
      "Create tool: `sudo tee /etc/nginx/snippets/security-headers.conf << 'EOF'`",
      "add_header X-Frame-Options \"SAMEORIGIN\" always;\nadd_header X-Content-Type-Options \"nosniff\" always;\nadd_header X-XSS-Protection \"1; mode=block\" always;\nadd_header Referrer-Policy \"no-referrer-when-downgrade\" always;\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\nEOF",
      "AGENT: ''",
      "AGENT: 'Include in server blocks:'",
      "AGENT: 'include snippets/security-headers.conf;'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Monitor and Troubleshoot ---'",
      "Run command: `sudo tail -f /var/log/nginx/access.log`",
      "AGENT: '203.0.113.50 - - [08/Oct/2025:17:00:00 +0000] \"GET / HTTP/1.1\" 200 1234'",
      "AGENT: ''",
      "Run command: `sudo tail -f /var/log/nginx/error.log`",
      "AGENT: ''",
      "Run command: `sudo nginx -T`",
      "AGENT: 'Shows full configuration (useful for debugging)'",
      "AGENT: ''",
      "AGENT: 'Check connections:'",
      "Run command: `sudo ss -tlnp | grep nginx`",
      "AGENT: 'LISTEN 0 128 0.0.0.0:80   users:((\"nginx\"))'",
      "AGENT: 'LISTEN 0 128 0.0.0.0:443  users:((\"nginx\"))'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Installed Nginx web server.'",
      "AGENT: '  ✓ Created server blocks for multiple websites.'",
      "AGENT: '  ✓ Set up reverse proxy for Node.js application.'",
      "AGENT: '  ✓ Enabled HTTPS with Let\\'s Encrypt SSL certificates.'",
      "AGENT: '  ✓ Implemented caching for better performance.'",
      "AGENT: '  ✓ Configured load balancing across multiple backends.'",
      "AGENT: '  ✓ Added security headers and performance tuning.'",
      "AGENT: '  ✓ Your high-performance web server is production-ready! 🚀'"
    ],
    "commands": ["nginx", "systemctl", "curl", "certbot", "ln", "mkdir", "chown", "cat", "tee", "tail", "ss"],
    "packages": {
      "debian_ubuntu": ["nginx", "certbot", "python3-certbot-nginx"],
      "arch": ["nginx", "certbot", "certbot-nginx"]
    },
    "related_commands": ["apache2", "caddy", "httpd"],
    "complexity": "intermediate",
    "tags": ["nginx", "web-server", "reverse-proxy", "ssl", "https", "load-balancing", "caching", "performance"]
  }
]

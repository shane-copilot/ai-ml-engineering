[
  {
    "id": "scenario_awk_text_processing_124",
    "command": "awk",
    "scenario": "Process and analyze text files with awk for data extraction and reporting.",
    "problem": "Need to extract specific columns from logs, calculate sums and averages, filter data based on conditions, reformat CSV files, and generate reports from structured text data.",
    "solution": "Master awk for text processing: field extraction, pattern matching, arithmetic operations, associative arrays for aggregation, BEGIN/END blocks, and practical log analysis examples.",
    "steps": [
      "USER SAYS: 'I have a large log file and need to extract specific fields, calculate statistics, and generate a report. How can I process text efficiently?'",
      "AGENT: 'awk is perfect for this! It's a powerful text processing language that excels at working with column-based data. Let me show you everything from basics to advanced techniques.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: awk text processing...'",
      "AGENT: '[Searching] \"awk tutorial examples field extraction aggregation\"'",
      "AGENT: '[Found] awk processes files line by line, splitting into fields.'",
      "AGENT: '[Found] $1, $2, $3 = columns, $0 = entire line, NF = number of fields.'",
      "AGENT: '[Found] Patterns: /regex/ { action }, BEGIN/END blocks.'",
      "AGENT: '[Found] Associative arrays for grouping and aggregation.'",
      "AGENT: '✓ Research complete! Let's master awk.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Basic Field Extraction ---'",
      "AGENT: 'Create sample data:'",
      "Create tool: `cat > employees.txt << 'EOF'`",
      "John Doe 35 Engineering 95000\nJane Smith 28 Marketing 75000\nBob Johnson 42 Engineering 105000\nAlice Williams 31 Sales 82000\nCharlie Brown 29 Engineering 88000\nEve Davis 38 Marketing 79000\nEOF",
      "AGENT: ''",
      "AGENT: 'Print specific columns:'",
      "Run command: `awk '{print $1, $2}' employees.txt`",
      "AGENT: 'John Doe'",
      "AGENT: 'Jane Smith'",
      "AGENT: 'Bob Johnson'",
      "AGENT: '...'",
      "AGENT: ''",
      "Run command: `awk '{print $1, $4, $5}' employees.txt`",
      "AGENT: 'John Engineering 95000'",
      "AGENT: 'Jane Marketing 75000'",
      "AGENT: 'Bob Engineering 105000'",
      "AGENT: '...'",
      "AGENT: ''",
      "Run command: `awk '{print \"Name:\", $1, $2, \"| Salary: $\" $5}' employees.txt`",
      "AGENT: 'Name: John Doe | Salary: $95000'",
      "AGENT: 'Name: Jane Smith | Salary: $75000'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Pattern Matching and Filtering ---'",
      "Run command: `awk '$4 == \"Engineering\"' employees.txt`",
      "AGENT: 'John Doe 35 Engineering 95000'",
      "AGENT: 'Bob Johnson 42 Engineering 105000'",
      "AGENT: 'Charlie Brown 29 Engineering 88000'",
      "AGENT: ''",
      "Run command: `awk '$5 > 85000' employees.txt`",
      "AGENT: 'John Doe 35 Engineering 95000'",
      "AGENT: 'Bob Johnson 42 Engineering 105000'",
      "AGENT: 'Charlie Brown 29 Engineering 88000'",
      "AGENT: ''",
      "Run command: `awk '$3 >= 30 && $5 < 90000' employees.txt`",
      "AGENT: 'John Doe 35 Engineering 95000'",
      "AGENT: 'Alice Williams 31 Sales 82000'",
      "AGENT: 'Charlie Brown 29 Engineering 88000'",
      "AGENT: 'Eve Davis 38 Marketing 79000'",
      "AGENT: ''",
      "Run command: `awk '/^J/' employees.txt`",
      "AGENT: 'John Doe 35 Engineering 95000'",
      "AGENT: 'Jane Smith 28 Marketing 75000'",
      "AGENT: 'Matches lines starting with J'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Arithmetic and Calculations ---'",
      "Run command: `awk '{print $1, $2, $5 * 1.1}' employees.txt`",
      "AGENT: 'John Doe 104500  ← 10% raise'",
      "AGENT: 'Jane Smith 82500'",
      "AGENT: '...'",
      "AGENT: ''",
      "Run command: `awk '{sum += $5} END {print \"Total salaries: $\" sum}' employees.txt`",
      "AGENT: 'Total salaries: $524000'",
      "AGENT: ''",
      "Run command: `awk '{sum += $5; count++} END {print \"Average salary: $\" sum/count}' employees.txt`",
      "AGENT: 'Average salary: $87333.3'",
      "AGENT: ''",
      "Run command: `awk 'BEGIN {max=0} {if ($5 > max) max = $5} END {print \"Max salary: $\" max}' employees.txt`",
      "AGENT: 'Max salary: $105000'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: BEGIN and END Blocks ---'",
      "Run command: `awk 'BEGIN {print \"=== Salary Report ===\"; print \"\"} {print $1, $2, \"earns $\" $5} END {print \"\"; print \"Report complete\"}' employees.txt`",
      "AGENT: '=== Salary Report ==='",
      "AGENT: ''",
      "AGENT: 'John Doe earns $95000'",
      "AGENT: 'Jane Smith earns $75000'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: 'Report complete'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Associative Arrays for Grouping ---'",
      "Run command: `awk '{dept[$4] += $5; count[$4]++} END {for (d in dept) print d, \"Total: $\" dept[d], \"Count:\" count[d]}' employees.txt`",
      "AGENT: 'Engineering Total: $288000 Count: 3'",
      "AGENT: 'Marketing Total: $154000 Count: 2'",
      "AGENT: 'Sales Total: $82000 Count: 1'",
      "AGENT: ''",
      "AGENT: '💡 This groups by department and sums salaries!'",
      "AGENT: ''",
      "AGENT: 'With averages:'",
      "Run command: `awk '{dept[$4] += $5; count[$4]++} END {for (d in dept) printf \"%s: Total=$%d, Avg=$%.0f\\n\", d, dept[d], dept[d]/count[d]}' employees.txt`",
      "AGENT: 'Engineering: Total=$288000, Avg=$96000'",
      "AGENT: 'Marketing: Total=$154000, Avg=$77000'",
      "AGENT: 'Sales: Total=$82000, Avg=$82000'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Custom Field Separator ---'",
      "Create tool: `cat > data.csv << 'EOF'`",
      "Name,Age,Department,Salary\nJohn Doe,35,Engineering,95000\nJane Smith,28,Marketing,75000\nBob Johnson,42,Engineering,105000\nEOF",
      "AGENT: ''",
      "Run command: `awk -F',' 'NR > 1 {print $1, $4}' data.csv`",
      "AGENT: '  -F\\',\\' = Set field separator to comma'",
      "AGENT: '  NR > 1 = Skip header row'",
      "AGENT: ''",
      "AGENT: 'John Doe 95000'",
      "AGENT: 'Jane Smith 75000'",
      "AGENT: 'Bob Johnson 105000'",
      "AGENT: ''",
      "Run command: `awk -F',' 'NR==1 {next} {sum += $4} END {print \"Total:\", sum}' data.csv`",
      "AGENT: 'Total: 275000'",
      "AGENT: '  NR==1 {next} = Skip first line'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Log File Analysis ---'",
      "Create tool: `cat > access.log << 'EOF'`",
      "192.168.1.10 - - [08/Oct/2025:14:23:45] \"GET /api/users 200 1234\"\n192.168.1.11 - - [08/Oct/2025:14:23:46] \"POST /api/login 200 567\"\n192.168.1.10 - - [08/Oct/2025:14:23:47] \"GET /api/products 200 8901\"\n192.168.1.12 - - [08/Oct/2025:14:23:48] \"GET /api/users 404 89\"\n192.168.1.11 - - [08/Oct/2025:14:23:49] \"POST /api/orders 201 2345\"\n192.168.1.10 - - [08/Oct/2025:14:23:50] \"GET /api/users 500 45\"\nEOF",
      "AGENT: ''",
      "AGENT: 'Count requests by IP:'",
      "Run command: `awk '{ip[$1]++} END {for (i in ip) print i, ip[i]}' access.log`",
      "AGENT: '192.168.1.10 3'",
      "AGENT: '192.168.1.11 2'",
      "AGENT: '192.168.1.12 1'",
      "AGENT: ''",
      "AGENT: 'Count HTTP status codes:'",
      "Run command: `awk '{status[$7]++} END {for (s in status) print \"Status\", s \":\", status[s]}' access.log`",
      "AGENT: 'Status 200: 3'",
      "AGENT: 'Status 404: 1'",
      "AGENT: 'Status 201: 1'",
      "AGENT: 'Status 500: 1'",
      "AGENT: ''",
      "AGENT: 'Total data transferred:'",
      "Run command: `awk '{sum += $8} END {printf \"Total: %.2f KB\\n\", sum/1024}' access.log`",
      "AGENT: 'Total: 12.54 KB'",
      "AGENT: ''",
      "AGENT: 'Find errors (status >= 400):'",
      "Run command: `awk '$7 >= 400 {print $1, $6, $7}' access.log`",
      "AGENT: '192.168.1.12 /api/users 404'",
      "AGENT: '192.168.1.10 /api/users 500'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Advanced Report Generation ---'",
      "Create tool: `cat > report.awk << 'EOF'`",
      "BEGIN {\n    print \"===============================================\"\n    print \"         DEPARTMENT SALARY REPORT\"\n    print \"===============================================\"\n    printf \"%-15s %10s %10s %10s\\n\", \"Department\", \"Employees\", \"Total\", \"Average\"\n    print \"-----------------------------------------------\"\n}\n\n{\n    dept[$4]++\n    total[$4] += $5\n    if ($5 > max[$4]) max[$4] = $5\n    if (min[$4] == 0 || $5 < min[$4]) min[$4] = $5\n}\n\nEND {\n    for (d in dept) {\n        avg = total[d] / dept[d]\n        printf \"%-15s %10d  $%9d  $%9.0f\\n\", d, dept[d], total[d], avg\n    }\n    print \"===============================================\"\n    print \"\"\n    print \"Salary Ranges by Department:\"\n    for (d in dept) {\n        printf \"  %s: $%d - $%d\\n\", d, min[d], max[d]\n    }\n}\nEOF",
      "Run command: `awk -f report.awk employees.txt`",
      "AGENT: '==============================================='",
      "AGENT: '         DEPARTMENT SALARY REPORT'",
      "AGENT: '==============================================='",
      "AGENT: 'Department       Employees      Total    Average'",
      "AGENT: '-----------------------------------------------'",
      "AGENT: 'Engineering             3    $288000     $96000'",
      "AGENT: 'Marketing               2    $154000     $77000'",
      "AGENT: 'Sales                   1     $82000     $82000'",
      "AGENT: '==============================================='",
      "AGENT: ''",
      "AGENT: 'Salary Ranges by Department:'",
      "AGENT: '  Engineering: $88000 - $105000'",
      "AGENT: '  Marketing: $75000 - $79000'",
      "AGENT: '  Sales: $82000 - $82000'",
      "AGENT: ''",
      "AGENT: '✅ Professional report with awk script file!'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Built-in Variables ---'",
      "Run command: `awk '{print \"Line\", NR, \"has\", NF, \"fields:\", $0}' employees.txt | head -3`",
      "AGENT: 'Line 1 has 5 fields: John Doe 35 Engineering 95000'",
      "AGENT: 'Line 2 has 5 fields: Jane Smith 28 Marketing 75000'",
      "AGENT: 'Line 3 has 5 fields: Bob Johnson 42 Engineering 105000'",
      "AGENT: ''",
      "AGENT: 'Useful built-in variables:'",
      "AGENT: '  • NR = Current line number (Number of Records)'",
      "AGENT: '  • NF = Number of fields in current line'",
      "AGENT: '  • FS = Field separator (default: whitespace)'",
      "AGENT: '  • OFS = Output field separator (default: space)'",
      "AGENT: '  • RS = Record separator (default: newline)'",
      "AGENT: '  • ORS = Output record separator (default: newline)'",
      "AGENT: '  • $0 = Entire line'",
      "AGENT: '  • $1, $2, ... = Individual fields'",
      "AGENT: '  • FILENAME = Current filename'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Practical Examples ---'",
      "AGENT: ''",
      "AGENT: 'Example 1: Convert CSV to TSV (tab-separated)'",
      "Run command: `awk -F',' 'BEGIN {OFS=\"\\t\"} {$1=$1; print}' data.csv`",
      "AGENT: '  $1=$1 forces field reconstruction with new OFS'",
      "AGENT: ''",
      "AGENT: 'Example 2: Print lines longer than 80 characters'",
      "Run command: `awk 'length($0) > 80' file.txt`",
      "AGENT: ''",
      "AGENT: 'Example 3: Number non-empty lines'",
      "Run command: `awk 'NF {print ++count, $0}' file.txt`",
      "AGENT: ''",
      "AGENT: 'Example 4: Remove duplicate lines (keep first)'",
      "Run command: `awk '!seen[$0]++' file.txt`",
      "AGENT: ''",
      "AGENT: 'Example 5: Sum column in CSV'",
      "Run command: `awk -F',' '{sum += $3} END {print sum}' numbers.csv`",
      "AGENT: ''",
      "AGENT: 'Example 6: Find top 5 largest files'",
      "Run command: `ls -l | awk 'NR>1 {print $5, $9}' | sort -rn | head -5`",
      "AGENT: ''",
      "AGENT: 'Example 7: Parse nginx access log response times'",
      "Run command: `awk '{sum+=$NF; count++} END {print \"Avg response time:\", sum/count \"ms\"}' nginx-times.log`",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Extracted specific fields with $1, $2, $3 notation.'",
      "AGENT: '  ✓ Filtered data with pattern matching and conditions.'",
      "AGENT: '  ✓ Performed arithmetic: sum, average, min, max calculations.'",
      "AGENT: '  ✓ Used BEGIN/END blocks for headers and summaries.'",
      "AGENT: '  ✓ Aggregated data with associative arrays.'",
      "AGENT: '  ✓ Processed CSV files with custom field separators.'",
      "AGENT: '  ✓ Analyzed log files for IPs, status codes, and errors.'",
      "AGENT: '  ✓ Generated professional reports with awk scripts.'",
      "AGENT: '  ✓ You now master awk for powerful text processing! 📝'"
    ],
    "commands": ["awk", "cat", "head", "sort"],
    "packages": {
      "debian_ubuntu": ["gawk"],
      "arch": ["gawk"]
    },
    "related_commands": ["sed", "grep", "cut", "paste"],
    "complexity": "intermediate",
    "tags": ["awk", "text-processing", "data-extraction", "log-analysis", "reporting", "csv", "parsing", "scripting"]
  }
]

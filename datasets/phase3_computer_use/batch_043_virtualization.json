[
  {
    "id": "scenario_virtualbox_setup_001",
    "command": "virtualbox",
    "scenario": "User: Want to run Windows VM on Linux",
    "problem": "Need to test Windows software without dual boot",
    "solution": "Install and configure VirtualBox",
    "steps": [
      "USER SAYS: 'I need to run Windows programs but don't want to dual boot.'",
      "AGENT: 'Perfect! Let me set up VirtualBox for you.'",
      "Install: sudo apt install virtualbox virtualbox-ext-pack || sudo pacman -S virtualbox",
      "AGENT: 'VirtualBox installed ✓'",
      "Add user to group: sudo usermod -aG vboxusers $USER",
      "AGENT: 'User added to vboxusers group (logout/login to apply) ✓'",
      "Load modules: sudo modprobe vboxdrv",
      "Enable service: sudo systemctl enable --now vboxservice",
      "AGENT: 'VirtualBox ready ✓'",
      "Start VirtualBox: virtualbox &",
      "AGENT: 'Steps to create Windows VM:'",
      "AGENT: '1. Click New'",
      "AGENT: '2. Name: Windows 10, Type: Windows, Version: Windows 10 (64-bit)'",
      "AGENT: '3. RAM: 4096 MB (4GB minimum)'",
      "AGENT: '4. Create virtual hard disk (50GB+)'",
      "AGENT: '5. Settings → Storage → Add Windows ISO'",
      "AGENT: '6. Settings → Display → Video Memory: 128MB'",
      "AGENT: '7. Start and install Windows'",
      "USER: 'It's really slow!'",
      "AGENT: 'Let me optimize it...'",
      "AGENT: 'In VM Settings:'",
      "AGENT: '- System → Processor: Set to 2-4 CPUs'",
      "AGENT: '- Display → Enable 3D Acceleration'",
      "AGENT: '- Storage → Enable Host I/O Cache'",
      "AGENT: '- Install Guest Additions (inside VM)'",
      "Guest Additions: AGENT: 'In VM menu: Devices → Insert Guest Additions CD'",
      "AGENT: 'Run the installer inside Windows'",
      "AGENT: 'Reboot VM - now much faster! ✓'",
      "Create VM manager: cat > ~/vm-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== VirtualBox Manager ==='",
      "echo ''",
      "echo 'Available VMs:'",
      "VBoxManage list vms",
      "echo ''",
      "echo '1. Start VM'",
      "echo '2. Stop VM'",
      "echo '3. VM info'",
      "echo '4. Snapshot create'",
      "echo '5. Snapshot restore'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) read -p 'VM name: ' VM; VBoxManage startvm \"$VM\" --type headless ;;",
      "  2) read -p 'VM name: ' VM; VBoxManage controlvm \"$VM\" poweroff ;;",
      "  3) read -p 'VM name: ' VM; VBoxManage showvminfo \"$VM\" ;;",
      "  4) read -p 'VM name: ' VM; read -p 'Snapshot name: ' SNAP; VBoxManage snapshot \"$VM\" take \"$SNAP\" ;;",
      "  5) read -p 'VM name: ' VM; read -p 'Snapshot name: ' SNAP; VBoxManage snapshot \"$VM\" restore \"$SNAP\" ;;",
      "esac",
      "EOF",
      "chmod +x ~/vm-manage.sh",
      "AGENT: 'VM manager created ✓'",
      "AGENT: 'Now you can run Windows programs! ✓'"
    ],
    "commands": ["virtualbox", "VBoxManage", "modprobe", "usermod"],
    "packages": {"debian_ubuntu": ["virtualbox", "virtualbox-ext-pack"], "arch": ["virtualbox", "virtualbox-host-modules-arch"]},
    "related_commands": ["VBoxManage", "virtualbox"],
    "complexity": "intermediate",
    "tags": ["virtualization", "virtualbox", "vm", "windows", "development", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_kvm_qemu_setup_001",
    "command": "kvm",
    "scenario": "User: Want native performance virtualization",
    "problem": "VirtualBox too slow, need better performance",
    "solution": "Setup KVM/QEMU with virt-manager",
    "steps": [
      "USER SAYS: 'VirtualBox is slow. Is there something faster?'",
      "AGENT: 'Yes! KVM has near-native performance. Let me set it up...'",
      "Check CPU support: egrep -c '(vmx|svm)' /proc/cpuinfo",
      "AGENT: 'CPU supports virtualization ✓'",
      "Install: sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager || sudo pacman -S qemu libvirt virt-manager",
      "AGENT: 'KVM/QEMU installed ✓'",
      "Start service: sudo systemctl enable --now libvirtd",
      "Add user: sudo usermod -aG libvirt $USER",
      "AGENT: 'User added to libvirt group (logout/login to apply) ✓'",
      "Verify: virsh list --all",
      "AGENT: 'KVM ready ✓'",
      "Start GUI: virt-manager &",
      "AGENT: 'Virtual Machine Manager opened'",
      "AGENT: 'Create VM:'",
      "AGENT: '1. File → New Virtual Machine'",
      "AGENT: '2. Select ISO'",
      "AGENT: '3. Allocate RAM/CPUs'",
      "AGENT: '4. Create disk image'",
      "AGENT: '5. Begin installation'",
      "USER: 'Wow! This is much faster!'",
      "AGENT: 'KVM uses hardware virtualization - almost native speed! ✓'",
      "Create quick start: cat > ~/vm-quick-start.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== KVM Quick Start ==='",
      "echo ''",
      "echo 'Running VMs:'",
      "virsh list",
      "echo ''",
      "echo 'All VMs:'",
      "virsh list --all",
      "echo ''",
      "read -p 'VM to start: ' VM",
      "if [ -n \"$VM\" ]; then",
      "  virsh start $VM",
      "  echo \"✓ Starting $VM\"",
      "  virt-viewer $VM &",
      "fi",
      "EOF",
      "chmod +x ~/vm-quick-start.sh",
      "Create VM CLI tool: cat > ~/vm-cli.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== KVM VM Manager ==='",
      "echo ''",
      "echo '1. List VMs'",
      "echo '2. Start VM'",
      "echo '3. Stop VM'",
      "echo '4. Delete VM'",
      "echo '5. Clone VM'",
      "echo '6. Snapshot create'",
      "echo '7. Snapshot list'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) virsh list --all ;;",
      "  2) read -p 'VM name: ' VM; virsh start $VM ;;",
      "  3) read -p 'VM name: ' VM; virsh shutdown $VM ;;",
      "  4) read -p 'VM name: ' VM; virsh undefine $VM; rm /var/lib/libvirt/images/$VM.qcow2 ;;",
      "  5) read -p 'Source VM: ' SRC; read -p 'New name: ' NEW; virt-clone --original $SRC --name $NEW --auto-clone ;;",
      "  6) read -p 'VM name: ' VM; read -p 'Snapshot name: ' SNAP; virsh snapshot-create-as $VM $SNAP ;;",
      "  7) read -p 'VM name: ' VM; virsh snapshot-list $VM ;;",
      "esac",
      "EOF",
      "chmod +x ~/vm-cli.sh",
      "AGENT: 'KVM management tools created ✓'"
    ],
    "commands": ["virsh", "qemu", "virt-manager", "virt-clone"],
    "packages": {"debian_ubuntu": ["qemu-kvm", "libvirt-daemon-system", "virt-manager"], "arch": ["qemu", "libvirt", "virt-manager"]},
    "related_commands": ["virsh", "qemu", "virt-manager"],
    "complexity": "advanced",
    "tags": ["kvm", "qemu", "virtualization", "performance", "vm", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_docker_basics_001",
    "command": "docker",
    "scenario": "User: Want to run applications in containers",
    "problem": "App has complex dependencies, want isolation",
    "solution": "Install and use Docker containers",
    "steps": [
      "USER SAYS: 'I want to run apps without installing dependencies on my system.'",
      "AGENT: 'Docker is perfect for that! Let me set it up...'",
      "Install: sudo apt install docker.io || sudo pacman -S docker",
      "AGENT: 'Docker installed ✓'",
      "Start service: sudo systemctl enable --now docker",
      "Add user: sudo usermod -aG docker $USER",
      "AGENT: 'User added to docker group (logout/login to apply) ✓'",
      "Test: docker run hello-world",
      "AGENT: 'Docker working! ✓'",
      "USER: 'How do I run a web server?'",
      "AGENT: 'Easy! Let me show you nginx...'",
      "Run nginx: docker run -d -p 8080:80 --name my-nginx nginx",
      "AGENT: 'Nginx running on http://localhost:8080 ✓'",
      "Check: curl localhost:8080",
      "AGENT: 'Working! ✓'",
      "List containers: docker ps",
      "Stop: docker stop my-nginx",
      "Remove: docker rm my-nginx",
      "USER: 'What about databases?'",
      "AGENT: 'Let me run PostgreSQL...'",
      "Run Postgres: docker run -d -p 5432:5432 --name my-postgres -e POSTGRES_PASSWORD=secret postgres",
      "AGENT: 'PostgreSQL running ✓'",
      "Connect: docker exec -it my-postgres psql -U postgres",
      "AGENT: 'Connected to database! ✓'",
      "Create docker helper: cat > ~/docker-help.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Docker Helper ==='",
      "echo ''",
      "echo '1. List running containers'",
      "echo '2. List all containers'",
      "echo '3. Stop container'",
      "echo '4. Remove container'",
      "echo '5. View logs'",
      "echo '6. Execute command in container'",
      "echo '7. Clean up stopped containers'",
      "echo '8. Clean up unused images'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) docker ps ;;",
      "  2) docker ps -a ;;",
      "  3) read -p 'Container name: ' C; docker stop $C ;;",
      "  4) read -p 'Container name: ' C; docker rm $C ;;",
      "  5) read -p 'Container name: ' C; docker logs -f $C ;;",
      "  6) read -p 'Container name: ' C; read -p 'Command: ' CMD; docker exec -it $C $CMD ;;",
      "  7) docker container prune -f ;;",
      "  8) docker image prune -a -f ;;",
      "esac",
      "EOF",
      "chmod +x ~/docker-help.sh",
      "Create compose template: cat > ~/docker-compose-template.yml << 'EOF'",
      "version: '3.8'",
      "services:",
      "  web:",
      "    image: nginx",
      "    ports:",
      "      - '8080:80'",
      "  db:",
      "    image: postgres",
      "    environment:",
      "      POSTGRES_PASSWORD: secret",
      "    volumes:",
      "      - db-data:/var/lib/postgresql/data",
      "volumes:",
      "  db-data:",
      "EOF",
      "AGENT: 'Docker tools created ✓'",
      "AGENT: 'Now you can run any app in isolation! ✓'"
    ],
    "commands": ["docker", "docker-compose"],
    "packages": {"debian_ubuntu": ["docker.io", "docker-compose"], "arch": ["docker", "docker-compose"]},
    "related_commands": ["docker", "docker-compose", "podman"],
    "complexity": "intermediate",
    "tags": ["docker", "containers", "isolation", "development", "deployment", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_lxc_containers_001",
    "command": "lxc",
    "scenario": "User: Need lightweight system containers",
    "problem": "Want full Linux systems without VM overhead",
    "solution": "Use LXC/LXD containers",
    "steps": [
      "USER SAYS: 'Docker is for apps, but I want full Linux systems.'",
      "AGENT: 'You want LXC! It's like lightweight VMs. Let me set it up...'",
      "Install: sudo apt install lxd || sudo pacman -S lxd",
      "AGENT: 'LXD installed ✓'",
      "Init: sudo lxd init",
      "AGENT: 'Configuration wizard:'",
      "AGENT: '- Storage backend: dir (simplest) or zfs (better)'",
      "AGENT: '- Network: yes (creates lxdbr0 bridge)'",
      "AGENT: '- Defaults for rest'",
      "Add user: sudo usermod -aG lxd $USER",
      "AGENT: 'User added to lxd group (logout/login to apply) ✓'",
      "Launch container: lxc launch ubuntu:22.04 my-ubuntu",
      "AGENT: 'Ubuntu container created and started! ✓'",
      "List: lxc list",
      "AGENT: 'Container running with IP address'",
      "Execute command: lxc exec my-ubuntu -- bash",
      "AGENT: 'Inside container! Full Ubuntu system ✓'",
      "USER: 'Can I run Arch Linux too?'",
      "AGENT: 'Of course!'",
      "Launch Arch: lxc launch images:archlinux my-arch",
      "AGENT: 'Arch Linux container ready ✓'",
      "Stop: lxc stop my-arch",
      "Start: lxc start my-arch",
      "Delete: lxc delete my-arch",
      "USER: 'How do I access files?'",
      "AGENT: 'Push/pull files:'",
      "Push file: lxc file push local.txt my-ubuntu/root/",
      "Pull file: lxc file pull my-ubuntu/root/file.txt ./",
      "AGENT: 'File transfer working ✓'",
      "Create LXC manager: cat > ~/lxc-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== LXC Container Manager ==='",
      "echo ''",
      "echo 'Running containers:'",
      "lxc list",
      "echo ''",
      "echo '1. Launch new container'",
      "echo '2. Start container'",
      "echo '3. Stop container'",
      "echo '4. Delete container'",
      "echo '5. Shell into container'",
      "echo '6. Container info'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) read -p 'Name: ' NAME; read -p 'Image (ubuntu:22.04): ' IMG; lxc launch ${IMG:-ubuntu:22.04} $NAME ;;",
      "  2) read -p 'Name: ' NAME; lxc start $NAME ;;",
      "  3) read -p 'Name: ' NAME; lxc stop $NAME ;;",
      "  4) read -p 'Name: ' NAME; lxc delete $NAME ;;",
      "  5) read -p 'Name: ' NAME; lxc exec $NAME -- bash ;;",
      "  6) read -p 'Name: ' NAME; lxc info $NAME ;;",
      "esac",
      "EOF",
      "chmod +x ~/lxc-manage.sh",
      "AGENT: 'LXC manager created ✓'",
      "AGENT: 'You now have instant full Linux systems! ✓'"
    ],
    "commands": ["lxc", "lxd"],
    "packages": {"debian_ubuntu": ["lxd"], "arch": ["lxd"]},
    "related_commands": ["lxc", "lxd", "incus"],
    "complexity": "advanced",
    "tags": ["lxc", "lxd", "containers", "system-containers", "virtualization", "real-world", "ai-agent"]
  }
]

[
  {
    "id": "scenario_docker_issues_001",
    "command": "multiple",
    "scenario": "User: Docker command gives permission denied",
    "problem": "Cannot run docker commands without sudo, containers won't start",
    "solution": "Fix Docker permissions and troubleshoot container issues",
    "steps": [
      "USER SAYS: 'I keep getting permission denied when I run docker commands'",
      "AGENT: 'This is common! Docker requires special permissions. Let me check your setup...'",
      "Check docker status: sudo systemctl status docker",
      "AGENT: 'Docker service is running. Checking if you're in the docker group...'",
      "Check groups: groups $USER",
      "If docker not in list: AGENT: 'You're not in the docker group. That's the issue!'",
      "AGENT: 'Adding you to docker group...'",
      "Add to group: sudo usermod -aG docker $USER",
      "AGENT: 'Added! But you need to log out and back in for it to take effect.'",
      "AGENT: 'Alternative: I can start a new shell with the group active now.'",
      "USER: 'Just start new shell, I don't want to log out'",
      "New shell: newgrp docker",
      "AGENT: 'New shell started with docker group active. Testing...'",
      "Test docker: docker ps",
      "AGENT: 'Success! Docker works without sudo now.'",
      "AGENT: 'Remember: After next login, it'll work automatically.'",
      "Scenario: Container won't start",
      "USER: 'Now my container won't start. Error: port already in use'",
      "AGENT: 'Let me check what's using that port...'",
      "Show container: docker ps -a | head",
      "AGENT: 'What's the container name or the error message?'",
      "USER: 'Error: bind: address already in use for port 8080'",
      "AGENT: 'Checking port 8080...'",
      "Check port: sudo lsof -i :8080",
      "AGENT: 'Found it! Another Docker container is using port 8080.'",
      "Show all containers: docker ps",
      "AGENT: 'Container web-old is using port 8080. Do you need it?'",
      "USER: 'No, stop it'",
      "Stop container: docker stop web-old",
      "Remove: docker rm web-old",
      "AGENT: 'Removed old container. Port 8080 is free now.'",
      "USER: 'Still getting error!'",
      "AGENT: 'Let me see your docker run command...'",
      "USER: 'docker run -p 8080:80 nginx'",
      "AGENT: 'Command looks good. Let me check if port is truly free...'",
      "Double check: ss -tulpn | grep 8080",
      "If still used: AGENT: 'Something else is on 8080. Let me identify it...'",
      "Find process: sudo lsof -i :8080 -t | xargs ps -p",
      "AGENT: 'It's a Node.js process. Should I stop it?'",
      "USER: 'Yes'",
      "Kill: sudo kill $(sudo lsof -i :8080 -t)",
      "AGENT: 'Killed. Now try your docker run command.'",
      "Scenario: Container crashes immediately",
      "USER: 'Container starts then immediately stops!'",
      "AGENT: 'Let me check the container logs...'",
      "Show recent: docker ps -a | head -5",
      "AGENT: 'What's the container name?'",
      "USER: 'myapp'",
      "Check logs: docker logs myapp",
      "AGENT: 'I see the error: Database connection failed. Your app can't connect to the database.'",
      "Check container network: docker inspect myapp | grep -A 20 'NetworkSettings'",
      "AGENT: 'Container is on bridge network. Is your database in another container?'",
      "USER: 'Yes, postgres container'",
      "AGENT: 'They need to be on the same network to communicate.'",
      "Create network: docker network create myapp-network",
      "AGENT: 'Created custom network. Now connecting both containers...'",
      "Connect postgres: docker network connect myapp-network postgres",
      "Connect myapp: docker network connect myapp-network myapp",
      "AGENT: 'Both connected. Restart your app...'",
      "Restart: docker restart myapp",
      "Check: docker logs -f myapp",
      "AGENT: 'Looking better! App is starting...'",
      "Scenario: Out of disk space",
      "USER: 'Error: no space left on device'",
      "AGENT: 'Docker can use a lot of disk space. Let me check...'",
      "Check space: docker system df",
      "AGENT: 'Docker is using:'",
      "AGENT: '- Images: 15GB'",
      "AGENT: '- Containers: 5GB'",
      "AGENT: '- Volumes: 20GB'",
      "AGENT: '- Build cache: 10GB'",
      "AGENT: 'Total: 50GB'",
      "USER: 'Can you clean it up?'",
      "AGENT: 'Yes! I'll remove unused items but keep what you're using.'",
      "Clean up: docker system prune -a --volumes",
      "AGENT: 'This will remove:'",
      "AGENT: '- Stopped containers'",
      "AGENT: '- Unused images'",
      "AGENT: '- Unused volumes'",
      "AGENT: '- Build cache'",
      "USER: 'Do it'",
      "Execute: echo 'y' | docker system prune -a --volumes",
      "Wait: sleep 5",
      "Check freed: docker system df",
      "AGENT: 'Freed 35GB! Docker now uses only 15GB.'",
      "Create helper scripts: AGENT: 'Creating Docker management tools...'",
      "Create cleanup script: cat > ~/docker-clean.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Docker Cleanup ==='",
      "echo ''",
      "echo 'Current usage:'",
      "docker system df",
      "echo ''",
      "read -p 'Clean up unused Docker resources? (y/n): ' CONFIRM",
      "if [ \"$CONFIRM\" = 'y' ]; then",
      "  docker system prune -a --volumes",
      "  echo ''",
      "  echo 'After cleanup:'",
      "  docker system df",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/docker-clean.sh",
      "Create status script: cat > ~/docker-status.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Docker Status ==='",
      "echo ''",
      "echo 'Service:'",
      "systemctl is-active docker",
      "echo ''",
      "echo 'Running containers:'",
      "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'",
      "echo ''",
      "echo 'Disk usage:'",
      "docker system df",
      "echo ''",
      "echo 'Networks:'",
      "docker network ls",
      "EOF",
      "Make executable: chmod +x ~/docker-status.sh",
      "Create restart script: cat > ~/docker-restart-container.sh << 'EOF'",
      "#!/bin/bash",
      "if [ -z \"$1\" ]; then",
      "  echo 'Usage: ./docker-restart-container.sh <container-name>'",
      "  echo ''",
      "  echo 'Available containers:'",
      "  docker ps -a --format '{{.Names}}'",
      "  exit 1",
      "fi",
      "echo \"Restarting $1...\"",
      "docker restart $1",
      "sleep 2",
      "echo ''",
      "echo 'Status:'",
      "docker ps | grep $1",
      "echo ''",
      "echo 'Recent logs:'",
      "docker logs --tail 20 $1",
      "EOF",
      "Make executable: chmod +x ~/docker-restart-container.sh",
      "Add aliases: cat >> ~/.bashrc << 'EOF'",
      "# Docker aliases",
      "alias dps='docker ps'",
      "alias dpsa='docker ps -a'",
      "alias di='docker images'",
      "alias dlog='docker logs -f'",
      "alias dexec='docker exec -it'",
      "alias dstop='docker stop'",
      "alias drm='docker rm'",
      "alias dclean='~/docker-clean.sh'",
      "alias dstatus='~/docker-status.sh'",
      "EOF",
      "Source: source ~/.bashrc",
      "Create docker-compose helper: AGENT: 'Do you use docker-compose?'",
      "USER: 'Yes'",
      "Create compose script: cat > ~/docker-compose-helper.sh << 'EOF'",
      "#!/bin/bash",
      "if [ ! -f docker-compose.yml ]; then",
      "  echo '✗ No docker-compose.yml in current directory'",
      "  exit 1",
      "fi",
      "echo '=== Docker Compose Manager ==='",
      "echo ''",
      "echo '1. Start services (docker-compose up -d)'",
      "echo '2. Stop services (docker-compose down)'",
      "echo '3. Restart services (docker-compose restart)'",
      "echo '4. View logs (docker-compose logs -f)'",
      "echo '5. Check status (docker-compose ps)'",
      "echo '6. Rebuild (docker-compose up -d --build)'",
      "echo ''",
      "read -p 'Choose (1-6): ' CHOICE",
      "case $CHOICE in",
      "  1) docker-compose up -d ;;",
      "  2) docker-compose down ;;",
      "  3) docker-compose restart ;;",
      "  4) docker-compose logs -f ;;",
      "  5) docker-compose ps ;;",
      "  6) docker-compose up -d --build ;;",
      "  *) echo 'Invalid choice' ;;",
      "esac",
      "EOF",
      "Make executable: chmod +x ~/docker-compose-helper.sh",
      "Alias: echo 'alias dc=\"~/docker-compose-helper.sh\"' >> ~/.bashrc && source ~/.bashrc",
      "Final summary: AGENT: 'Docker issues resolved! Summary:'",
      "AGENT: ''",
      "AGENT: '✓ Added you to docker group (no more sudo needed)'",
      "AGENT: '✓ Fixed port conflicts'",
      "AGENT: '✓ Cleaned up 35GB of unused Docker data'",
      "AGENT: '✓ Created custom network for container communication'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '- ~/docker-status.sh (check Docker status)'",
      "AGENT: '- ~/docker-clean.sh (cleanup unused resources)'",
      "AGENT: '- ~/docker-restart-container.sh (restart with logs)'",
      "AGENT: '- ~/docker-compose-helper.sh (compose manager)'",
      "AGENT: ''",
      "AGENT: 'Quick commands:'",
      "AGENT: '- dps (list running)'",
      "AGENT: '- dlog <container> (follow logs)'",
      "AGENT: '- dclean (cleanup)'",
      "AGENT: '- dc (compose helper)'",
      "Test command: docker run hello-world",
      "AGENT: 'Test successful! Docker working perfectly. ✓'"
    ],
    "commands": ["docker", "systemctl", "groups", "usermod", "newgrp", "lsof", "ss", "ps", "kill", "cat", "chmod", "source", "echo"],
    "packages": {
      "debian_ubuntu": ["docker.io", "docker-compose"],
      "arch": ["docker", "docker-compose"]
    },
    "related_commands": ["docker", "docker-compose", "systemctl", "usermod"],
    "complexity": "intermediate",
    "tags": ["docker", "containers", "permissions", "troubleshooting", "devops", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_permission_denied_001",
    "command": "multiple",
    "scenario": "User: Permission denied when trying to access files",
    "problem": "Cannot read/write files due to permission issues",
    "solution": "Diagnose and fix file permissions and ownership",
    "steps": [
      "USER SAYS: 'I can't open my project folder! It says permission denied.'",
      "AGENT: 'Let me check the permissions on that folder...'",
      "USER: 'It's ~/projects/website'",
      "AGENT: 'Checking permissions...'",
      "Check perms: ls -la ~/projects/website",
      "AGENT: 'I see the issue. The folder is owned by root:root with mode 755.'",
      "AGENT: 'This means only root can write to it. Did you use sudo to create it?'",
      "USER: 'I think so, I don't remember'",
      "AGENT: 'No problem. I'll change ownership to you.'",
      "Change owner: sudo chown -R $USER:$USER ~/projects/website",
      "AGENT: 'Changed ownership to your user. Verifying...'",
      "Verify: ls -la ~/projects/website",
      "AGENT: 'Fixed! You now own all files and folders.'",
      "Test access: cd ~/projects/website && ls",
      "AGENT: 'You can now access and modify everything. ✓'",
      "Scenario: Can't execute script",
      "USER: 'My script.sh says permission denied when I try to run it'",
      "AGENT: 'Let me check if it has execute permission...'",
      "Check script: ls -l script.sh",
      "AGENT: 'The script has mode 644 (rw-r--r--). It's not executable.'",
      "AGENT: 'Adding execute permission...'",
      "Make executable: chmod +x script.sh",
      "Verify: ls -l script.sh",
      "AGENT: 'Now shows 755 (rwxr-xr-x). Try running it now.'",
      "Test: ./script.sh",
      "AGENT: 'Script runs! ✓'",
      "Scenario: Web server can't read files",
      "USER: 'My website shows 403 Forbidden error'",
      "AGENT: 'This is usually a permission issue. Let me check your web directory...'",
      "USER: 'Files are in /var/www/mysite'",
      "Check owner: ls -la /var/www/mysite",
      "AGENT: 'Files are owned by your user, but web server runs as www-data.'",
      "AGENT: 'Web server can't read your files. Let me fix this...'",
      "Change owner: sudo chown -R www-data:www-data /var/www/mysite",
      "Set permissions: sudo chmod -R 755 /var/www/mysite",
      "AGENT: 'Set ownership to www-data and readable permissions.'",
      "For writable dirs: sudo chmod -R 775 /var/www/mysite/uploads",
      "AGENT: 'Uploads folder is writable by web server.'",
      "Test: curl -I http://localhost/mysite",
      "AGENT: 'Returns 200 OK. Website accessible now! ✓'",
      "Scenario: Complex permission fix",
      "USER: 'I have lots of files with wrong permissions'",
      "AGENT: 'Let me create a permissions fixer for you...'",
      "Create script: cat > ~/fix-permissions.sh << 'EOF'",
      "#!/bin/bash",
      "DIR=\"${1:-.}\"",
      "echo \"Fixing permissions in: $DIR\"",
      "echo ''",
      "echo 'Setting directories to 755...'",
      "find \"$DIR\" -type d -exec chmod 755 {} \\;",
      "echo ''",
      "echo 'Setting files to 644...'",
      "find \"$DIR\" -type f -exec chmod 644 {} \\;",
      "echo ''",
      "echo 'Making scripts executable...'",
      "find \"$DIR\" -type f -name '*.sh' -exec chmod +x {} \\;",
      "echo ''",
      "echo 'Changing ownership to $USER...'",
      "sudo chown -R $USER:$USER \"$DIR\"",
      "echo ''",
      "echo 'Done! Summary:'",
      "ls -la \"$DIR\" | head -10",
      "EOF",
      "Make executable: chmod +x ~/fix-permissions.sh",
      "AGENT: 'Created ~/fix-permissions.sh'",
      "AGENT: 'Usage: ~/fix-permissions.sh /path/to/folder'",
      "Scenario: Sudo issues",
      "USER: 'It says I'm not in the sudoers file'",
      "AGENT: 'You need to be added to the sudo group. This requires someone with root access.'",
      "AGENT: 'If you have another admin account...'",
      "USER: 'I can login as admin'",
      "AGENT: 'Login as admin, then run:'",
      "Show command: echo 'sudo usermod -aG sudo YOUR_USERNAME'",
      "AGENT: 'Or if on Arch Linux: sudo usermod -aG wheel YOUR_USERNAME'",
      "After adding: AGENT: 'Log out and back in for it to take effect.'",
      "Test sudo: sudo -v",
      "AGENT: 'Sudo access confirmed! ✓'",
      "Scenario: File won't delete",
      "USER: 'rm says operation not permitted'",
      "AGENT: 'Let me check file attributes...'",
      "Check attrs: lsattr file.txt",
      "If immutable: AGENT: 'File has immutable flag (i). That prevents deletion.'",
      "Remove flag: sudo chattr -i file.txt",
      "AGENT: 'Removed immutable flag. Try deleting now.'",
      "Verify: rm file.txt",
      "AGENT: 'Deleted successfully! ✓'",
      "Create permission checker: cat > ~/check-permissions.sh << 'EOF'",
      "#!/bin/bash",
      "if [ -z \"$1\" ]; then",
      "  echo 'Usage: ./check-permissions.sh <file-or-directory>'",
      "  exit 1",
      "fi",
      "echo '=== Permission Check ==='",
      "echo ''",
      "echo 'File: '$1",
      "echo ''",
      "ls -la \"$1\"",
      "echo ''",
      "echo 'Owner: '$(stat -c '%U:%G' \"$1\")",
      "echo 'Permissions: '$(stat -c '%a (%A)' \"$1\")",
      "echo ''",
      "echo 'Your user: '$USER",
      "echo 'Your groups: '$(groups)",
      "echo ''",
      "if [ -r \"$1\" ]; then",
      "  echo '✓ You can read'",
      "else",
      "  echo '✗ You cannot read'",
      "fi",
      "if [ -w \"$1\" ]; then",
      "  echo '✓ You can write'",
      "else",
      "  echo '✗ You cannot write'",
      "fi",
      "if [ -x \"$1\" ]; then",
      "  echo '✓ You can execute'",
      "else",
      "  echo '✗ You cannot execute'",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/check-permissions.sh",
      "Add to bashrc: cat >> ~/.bashrc << 'EOF'",
      "# Permission helpers",
      "alias fix-perms='~/fix-permissions.sh'",
      "alias check-perms='~/check-permissions.sh'",
      "alias own-this='sudo chown -R $USER:$USER .'",
      "EOF",
      "Source: source ~/.bashrc",
      "Create cheat sheet: cat > ~/permissions-guide.txt << 'EOF'",
      "Linux Permissions Cheat Sheet",
      "",
      "Permission Numbers:",
      "  4 = read (r)",
      "  2 = write (w)",
      "  1 = execute (x)",
      "",
      "Common Permissions:",
      "  644 = rw-r--r-- (files)",
      "  755 = rwxr-xr-x (directories, executables)",
      "  777 = rwxrwxrwx (everyone can do everything - UNSAFE)",
      "  700 = rwx------ (only owner)",
      "",
      "Quick Fixes:",
      "  Make executable:     chmod +x file.sh",
      "  Fix ownership:       sudo chown $USER:$USER file",
      "  Recursive fix:       sudo chown -R $USER:$USER folder/",
      "  Standard file:       chmod 644 file.txt",
      "  Standard directory:  chmod 755 directory/",
      "",
      "Commands:",
      "  check-perms <file>   # Check permissions",
      "  fix-perms <folder>   # Fix all permissions",
      "  own-this             # Take ownership of current folder",
      "EOF",
      "Final summary: AGENT: 'Permission issues fixed! Summary:'",
      "AGENT: ''",
      "AGENT: '✓ Fixed file ownership'",
      "AGENT: '✓ Set correct permissions'",
      "AGENT: '✓ Made scripts executable'",
      "AGENT: '✓ Fixed web server access'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '- ~/fix-permissions.sh (bulk fixer)'",
      "AGENT: '- ~/check-permissions.sh (diagnose)'",
      "AGENT: '- ~/permissions-guide.txt (reference)'",
      "AGENT: ''",
      "AGENT: 'Quick commands:'",
      "AGENT: '- fix-perms <folder>'",
      "AGENT: '- check-perms <file>'",
      "AGENT: '- own-this (take ownership)'",
      "Show guide: cat ~/permissions-guide.txt",
      "AGENT: 'All permission issues resolved! ✓'"
    ],
    "commands": ["ls", "chmod", "chown", "sudo", "find", "stat", "lsattr", "chattr", "curl", "groups", "cat"],
    "packages": {
      "debian_ubuntu": ["coreutils", "e2fsprogs"],
      "arch": ["coreutils", "e2fsprogs"]
    },
    "related_commands": ["chmod", "chown", "ls", "stat", "getfacl", "setfacl"],
    "complexity": "beginner",
    "tags": ["permissions", "chmod", "chown", "access-denied", "troubleshooting", "real-world", "ai-agent"]
  }
]

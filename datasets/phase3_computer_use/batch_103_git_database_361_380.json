[
  {
    "id": "scenario_git_workflow_advanced_108",
    "command": "git",
    "scenario": "Manage complex Git workflows with branches, rebasing, cherry-picking, and conflict resolution.",
    "problem": "A development team struggles with messy git history, merge conflicts, and coordinating work across multiple features. They need to master advanced Git operations for clean, professional workflow.",
    "solution": "Use Git branches for feature development, rebase for clean history, cherry-pick for selective commits, interactive rebase for commit cleanup, and systematic conflict resolution.",
    "steps": [
      "USER SAYS: 'Our git history is a mess with merge commits everywhere. How do we maintain a clean, linear history while working on multiple features?'",
      "AGENT: 'Let me teach you professional Git workflows! We'll use branches, rebasing, and other advanced techniques for clean collaboration.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: Advanced Git workflows...'",
      "AGENT: '[Searching] \"git rebase cherry-pick interactive workflow best practices\"'",
      "AGENT: '[Found] Use feature branches, rebase before merging for linear history.'",
      "AGENT: '[Found] Interactive rebase (`git rebase -i`) cleans up commits before pushing.'",
      "AGENT: '[Found] Cherry-pick applies specific commits from other branches.'",
      "AGENT: '[Found] Never rebase commits that have been pushed to shared branches!'",
      "AGENT: '✓ Research complete! Let's master Git workflows.'",
      "AGENT: ''",
      "AGENT: '--- Scenario Setup ---'",
      "Run command: `git init myproject && cd myproject`",
      "Run command: `echo '# My Project' > README.md && git add . && git commit -m 'Initial commit'`",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Feature Branch Workflow ---'",
      "Run command: `git checkout -b feature/user-auth`",
      "AGENT: 'Switched to a new branch \\'feature/user-auth\\''",
      "AGENT: ''",
      "AGENT: 'Make changes:'",
      "Run command: `echo 'User authentication module' > auth.py && git add auth.py && git commit -m 'Add user authentication'`",
      "Run command: `echo 'Login endpoint' >> auth.py && git add auth.py && git commit -m 'Add login endpoint'`",
      "Run command: `echo 'Logout endpoint' >> auth.py && git add auth.py && git commit -m 'Add logout endpoint'`",
      "AGENT: ''",
      "Run command: `git log --oneline`",
      "AGENT: 'a3b4c5d Add logout endpoint'",
      "AGENT: 'a2b3c4d Add login endpoint'",
      "AGENT: 'a1b2c3d Add user authentication'",
      "AGENT: 'a0b1c2d Initial commit'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Interactive Rebase to Clean History ---'",
      "AGENT: 'Before merging, clean up commits:'",
      "Run command: `git rebase -i HEAD~3`",
      "AGENT: 'Opens editor with:'",
      "AGENT: ''",
      "AGENT: 'pick a1b2c3d Add user authentication'",
      "AGENT: 'pick a2b3c4d Add login endpoint'",
      "AGENT: 'pick a3b4c5d Add logout endpoint'",
      "AGENT: ''",
      "AGENT: 'Change to squash commits:'",
      "AGENT: ''",
      "AGENT: 'pick a1b2c3d Add user authentication'",
      "AGENT: 'squash a2b3c4d Add login endpoint'",
      "AGENT: 'squash a3b4c5d Add logout endpoint'",
      "AGENT: ''",
      "AGENT: 'Save and close. New commit message editor opens:'",
      "AGENT: ''",
      "AGENT: 'feat: Implement user authentication system'",
      "AGENT: ''",
      "AGENT: '- Add authentication module'",
      "AGENT: '- Implement login endpoint'",
      "AGENT: '- Implement logout endpoint'",
      "AGENT: ''",
      "Run command: `git log --oneline`",
      "AGENT: 'b1c2d3e feat: Implement user authentication system'",
      "AGENT: 'a0b1c2d Initial commit'",
      "AGENT: ''",
      "AGENT: '✅ Clean, single commit for the feature!'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Rebase onto Main ---'",
      "Run command: `git checkout main`",
      "Run command: `echo 'Database module' > database.py && git add database.py && git commit -m 'Add database module'`",
      "AGENT: ''",
      "AGENT: 'Now main has diverged from feature branch. Visualize:'",
      "Run command: `git log --all --graph --oneline`",
      "AGENT: '* c3d4e5f (main) Add database module'",
      "AGENT: '| * b1c2d3e (feature/user-auth) feat: Implement user authentication system'",
      "AGENT: '|/'",
      "AGENT: '* a0b1c2d Initial commit'",
      "AGENT: ''",
      "AGENT: 'Rebase feature branch onto latest main:'",
      "Run command: `git checkout feature/user-auth`",
      "Run command: `git rebase main`",
      "AGENT: 'Successfully rebased and updated refs/heads/feature/user-auth.'",
      "AGENT: ''",
      "Run command: `git log --graph --oneline`",
      "AGENT: '* d4e5f6g feat: Implement user authentication system'",
      "AGENT: '* c3d4e5f Add database module'",
      "AGENT: '* a0b1c2d Initial commit'",
      "AGENT: ''",
      "AGENT: '✅ Linear history! Feature branch now builds on latest main.'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Merge with Fast-Forward ---'",
      "Run command: `git checkout main`",
      "Run command: `git merge feature/user-auth --ff-only`",
      "AGENT: 'Updating c3d4e5f..d4e5f6g'",
      "AGENT: 'Fast-forward'",
      "AGENT: ' auth.py | 3 +++'",
      "AGENT: ' 1 file changed, 3 insertions(+)'",
      "AGENT: ''",
      "Run command: `git log --oneline`",
      "AGENT: 'd4e5f6g (HEAD -> main, feature/user-auth) feat: Implement user authentication system'",
      "AGENT: 'c3d4e5f Add database module'",
      "AGENT: 'a0b1c2d Initial commit'",
      "AGENT: ''",
      "AGENT: '✅ Perfect linear history, no merge commit!'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Cherry-Pick Specific Commits ---'",
      "AGENT: 'Create another feature branch:'",
      "Run command: `git checkout -b feature/api-v2`",
      "Run command: `echo 'API v2' > api_v2.py && git add api_v2.py && git commit -m 'Start API v2'`",
      "Run command: `echo 'Endpoint 1' >> api_v2.py && git add api_v2.py && git commit -m 'Add endpoint 1'`",
      "Run command: `echo 'Endpoint 2' >> api_v2.py && git add api_v2.py && git commit -m 'Add endpoint 2'`",
      "Run command: `echo 'Bug fix' > fix.py && git add fix.py && git commit -m 'Fix critical bug'`",
      "AGENT: ''",
      "AGENT: 'We need just the bug fix in main, not the API v2 work:'",
      "Run command: `git log --oneline -4`",
      "AGENT: 'f7g8h9i Fix critical bug  ← We want this'",
      "AGENT: 'e6f7g8h Add endpoint 2'",
      "AGENT: 'e5f6g7h Add endpoint 1'",
      "AGENT: 'd4e5f6g Start API v2'",
      "AGENT: ''",
      "Run command: `git checkout main`",
      "Run command: `git cherry-pick f7g8h9i`",
      "AGENT: '[main g8h9i0j] Fix critical bug'",
      "AGENT: ' 1 file changed, 1 insertion(+)'",
      "AGENT: ''",
      "AGENT: '✅ Picked just the bug fix commit!'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Resolve Merge Conflicts ---'",
      "Run command: `git checkout main`",
      "Run command: `echo 'Version A' > config.txt && git add config.txt && git commit -m 'Config A'`",
      "AGENT: ''",
      "Run command: `git checkout -b feature/config-change`",
      "Run command: `echo 'Version B' > config.txt && git add config.txt && git commit -m 'Config B'`",
      "AGENT: ''",
      "Run command: `git checkout main`",
      "Run command: `git merge feature/config-change`",
      "AGENT: 'Auto-merging config.txt'",
      "AGENT: 'CONFLICT (content): Merge conflict in config.txt'",
      "AGENT: 'Automatic merge failed; fix conflicts and then commit the result.'",
      "AGENT: ''",
      "Run command: `cat config.txt`",
      "AGENT: '<<<<<<< HEAD'",
      "AGENT: 'Version A'",
      "AGENT: '======='",
      "AGENT: 'Version B'",
      "AGENT: '>>>>>>> feature/config-change'",
      "AGENT: ''",
      "AGENT: 'Edit file to resolve conflict:'",
      "Run command: `echo 'Version B (from feature branch)' > config.txt`",
      "Run command: `git add config.txt`",
      "Run command: `git commit -m 'Merge feature/config-change'`",
      "AGENT: ''",
      "AGENT: '✅ Conflict resolved!'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Abort Operations if Needed ---'",
      "AGENT: 'If rebase goes wrong:'",
      "Run command: `git rebase --abort`",
      "AGENT: ''",
      "AGENT: 'If merge goes wrong:'",
      "Run command: `git merge --abort`",
      "AGENT: ''",
      "AGENT: 'If cherry-pick goes wrong:'",
      "Run command: `git cherry-pick --abort`",
      "AGENT: ''",
      "AGENT: '--- Approach 8: View Differences Between Branches ---'",
      "Run command: `git diff main..feature/api-v2`",
      "AGENT: 'Shows all changes between branches'",
      "AGENT: ''",
      "Run command: `git log main..feature/api-v2 --oneline`",
      "AGENT: 'Shows commits in feature branch not in main'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Stash Changes ---'",
      "AGENT: 'Save uncommitted work temporarily:'",
      "Run command: `echo 'Work in progress' > wip.txt && git add wip.txt`",
      "Run command: `git stash save 'WIP: new feature'`",
      "AGENT: 'Saved working directory and index state On main: WIP: new feature'",
      "AGENT: ''",
      "Run command: `git stash list`",
      "AGENT: 'stash@{0}: On main: WIP: new feature'",
      "AGENT: ''",
      "Run command: `git stash pop`",
      "AGENT: 'Restores the changes and removes from stash'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Advanced History Editing ---'",
      "AGENT: 'Reword commit message:'",
      "Run command: `git commit --amend -m 'Better commit message'`",
      "AGENT: ''",
      "AGENT: 'Add files to last commit:'",
      "Run command: `git add forgotten.txt && git commit --amend --no-edit`",
      "AGENT: ''",
      "AGENT: 'Undo last commit (keep changes):'",
      "Run command: `git reset --soft HEAD~1`",
      "AGENT: ''",
      "AGENT: 'Undo last commit (discard changes):'",
      "Run command: `git reset --hard HEAD~1`",
      "AGENT: ''",
      "AGENT: '⚠️ Never use --hard unless you're sure!'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Used feature branches for isolated development.'",
      "AGENT: '  ✓ Cleaned commit history with interactive rebase before merging.'",
      "AGENT: '  ✓ Rebased branches onto main for linear history.'",
      "AGENT: '  ✓ Used fast-forward merges to avoid merge commits.'",
      "AGENT: '  ✓ Cherry-picked specific commits across branches.'",
      "AGENT: '  ✓ Resolved merge conflicts systematically.'",
      "AGENT: '  ✓ Stashed work in progress for branch switching.'",
      "AGENT: '  ✓ Learned to abort and undo operations safely.'",
      "AGENT: '  ✓ Your team now has professional Git workflows! 🚀'"
    ],
    "commands": ["git"],
    "packages": {
      "debian_ubuntu": ["git"],
      "arch": ["git"]
    },
    "related_commands": ["tig", "gitk", "git-flow"],
    "complexity": "advanced",
    "tags": ["git", "version-control", "rebase", "cherry-pick", "workflow", "collaboration", "merge-conflicts"]
  },
  {
    "id": "scenario_database_backup_restore_109",
    "command": "pg_dump",
    "scenario": "Implement automated database backup and restore procedures for PostgreSQL.",
    "problem": "A production PostgreSQL database has no backup strategy. Team needs automated backups with retention policies, point-in-time recovery capability, and tested restore procedures.",
    "solution": "Use pg_dump for logical backups, implement rotation with find, test restore procedures, set up continuous archiving with WAL (Write-Ahead Logging) for point-in-time recovery.",
    "steps": [
      "USER SAYS: 'We have a PostgreSQL database in production with no backups. If something goes wrong, we lose everything. How do I set up proper backups?'",
      "AGENT: 'Let me show you a complete PostgreSQL backup strategy! We'll implement automated backups, retention policies, and test restore procedures.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: PostgreSQL backup strategies...'",
      "AGENT: '[Searching] \"postgresql backup pg_dump pg_restore wal archiving\"'",
      "AGENT: '[Found] `pg_dump` creates logical backups (SQL format).'",
      "AGENT: '[Found] `pg_basebackup` creates physical backups for replication.'",
      "AGENT: '[Found] WAL archiving enables point-in-time recovery.'",
      "AGENT: '[Found] Always test restore procedures regularly!'",
      "AGENT: '✓ Research complete! Let's secure your database.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Simple Database Backup ---'",
      "Run command: `pg_dump -U postgres -d myapp > /tmp/myapp_backup.sql`",
      "AGENT: ''",
      "Run command: `ls -lh /tmp/myapp_backup.sql`",
      "AGENT: '-rw-r--r-- 1 postgres postgres 45M Oct  8 12:00 /tmp/myapp_backup.sql'",
      "AGENT: ''",
      "AGENT: '✅ Basic backup created!'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Compressed Backup ---'",
      "Run command: `pg_dump -U postgres -d myapp | gzip > /tmp/myapp_backup.sql.gz`",
      "AGENT: ''",
      "Run command: `ls -lh /tmp/myapp_backup.sql.gz`",
      "AGENT: '-rw-r--r-- 1 postgres postgres 8.2M Oct  8 12:01 /tmp/myapp_backup.sql.gz'",
      "AGENT: ''",
      "AGENT: '💡 Compression reduced size from 45MB to 8.2MB (82% savings)!'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Custom Format (Faster Restore) ---'",
      "Run command: `pg_dump -U postgres -Fc -d myapp -f /tmp/myapp_backup.dump`",
      "AGENT: '-Fc = custom format (compressed, allows parallel restore)'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Create Automated Backup Script ---'",
      "Create tool: `cat > /usr/local/bin/postgres-backup.sh << 'EOF'`",
      "#!/bin/bash\nset -euo pipefail\n\n# Configuration\nDB_NAME=\"myapp\"\nDB_USER=\"postgres\"\nBACKUP_DIR=\"/var/backups/postgres\"\nRETENTION_DAYS=30\nS3_BUCKET=\"s3://my-backups/postgres\"  # Optional\nLOG_FILE=\"/var/log/postgres-backup.log\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Generate timestamp\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"${BACKUP_DIR}/${DB_NAME}_${TIMESTAMP}.dump\"\n\n# Logging function\nlog() {\n    echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $*\" | tee -a \"$LOG_FILE\"\n}\n\nlog \"=== Starting PostgreSQL backup ===\"\nlog \"Database: $DB_NAME\"\nlog \"Backup file: $BACKUP_FILE\"\n\n# Create backup\nif pg_dump -U \"$DB_USER\" -Fc \"$DB_NAME\" -f \"$BACKUP_FILE\"; then\n    SIZE=$(du -h \"$BACKUP_FILE\" | cut -f1)\n    log \"SUCCESS: Backup created ($SIZE)\"\nelse\n    log \"ERROR: Backup failed!\"\n    exit 1\nfi\n\n# Verify backup\nif pg_restore --list \"$BACKUP_FILE\" > /dev/null 2>&1; then\n    log \"SUCCESS: Backup verified\"\nelse\n    log \"ERROR: Backup verification failed!\"\n    exit 1\nfi\n\n# Optional: Upload to S3\nif command -v aws &> /dev/null; then\n    log \"Uploading to S3...\"\n    if aws s3 cp \"$BACKUP_FILE\" \"${S3_BUCKET}/\" --storage-class STANDARD_IA; then\n        log \"SUCCESS: Uploaded to S3\"\n    else\n        log \"WARNING: S3 upload failed\"\n    fi\nfi\n\n# Clean old backups\nlog \"Cleaning backups older than $RETENTION_DAYS days\"\nOLD_BACKUPS=$(find \"$BACKUP_DIR\" -name \"${DB_NAME}_*.dump\" -mtime +\"$RETENTION_DAYS\")\nif [ -n \"$OLD_BACKUPS\" ]; then\n    echo \"$OLD_BACKUPS\" | while read -r file; do\n        log \"Deleting: $file\"\n        rm \"$file\"\n    done\nelse\n    log \"No old backups to delete\"\nfi\n\n# Report\nBACKUP_COUNT=$(ls -1 \"$BACKUP_DIR\"/${DB_NAME}_*.dump 2>/dev/null | wc -l)\nTOTAL_SIZE=$(du -sh \"$BACKUP_DIR\" | cut -f1)\nlog \"=== Backup complete ===\"\nlog \"Total backups: $BACKUP_COUNT\"\nlog \"Total size: $TOTAL_SIZE\"\nEOF",
      "Run command: `sudo chmod +x /usr/local/bin/postgres-backup.sh`",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Test the Backup Script ---'",
      "Run command: `sudo -u postgres /usr/local/bin/postgres-backup.sh`",
      "AGENT: '[2025-10-08 12:05:00] === Starting PostgreSQL backup ==='",
      "AGENT: '[2025-10-08 12:05:00] Database: myapp'",
      "AGENT: '[2025-10-08 12:05:00] Backup file: /var/backups/postgres/myapp_20251008_120500.dump'",
      "AGENT: '[2025-10-08 12:05:15] SUCCESS: Backup created (8.2M)'",
      "AGENT: '[2025-10-08 12:05:16] SUCCESS: Backup verified'",
      "AGENT: '[2025-10-08 12:05:20] SUCCESS: Uploaded to S3'",
      "AGENT: '[2025-10-08 12:05:20] Cleaning backups older than 30 days'",
      "AGENT: '[2025-10-08 12:05:20] No old backups to delete'",
      "AGENT: '[2025-10-08 12:05:20] === Backup complete ==='",
      "AGENT: '[2025-10-08 12:05:20] Total backups: 1'",
      "AGENT: '[2025-10-08 12:05:20] Total size: 8.2M'",
      "AGENT: ''",
      "AGENT: '✅ Backup script works perfectly!'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Schedule with Cron ---'",
      "Run command: `sudo crontab -e -u postgres`",
      "AGENT: 'Add:'",
      "AGENT: '0 2 * * * /usr/local/bin/postgres-backup.sh >> /var/log/postgres-backup-cron.log 2>&1'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Test Database Restore ---'",
      "AGENT: 'Create test database:'",
      "Run command: `sudo -u postgres createdb myapp_restore_test`",
      "AGENT: ''",
      "AGENT: 'Restore from backup:'",
      "Run command: `sudo -u postgres pg_restore -d myapp_restore_test /var/backups/postgres/myapp_20251008_120500.dump`",
      "AGENT: ''",
      "Run command: `sudo -u postgres psql -d myapp_restore_test -c '\\dt'`",
      "AGENT: '           List of relations'",
      "AGENT: ' Schema |    Name    | Type  | Owner'",
      "AGENT: '--------+------------+-------+----------'",
      "AGENT: ' public | users      | table | postgres'",
      "AGENT: ' public | posts      | table | postgres'",
      "AGENT: ' public | comments   | table | postgres'",
      "AGENT: ''",
      "Run command: `sudo -u postgres psql -d myapp_restore_test -c 'SELECT COUNT(*) FROM users;'`",
      "AGENT: ' count'",
      "AGENT: '-------'",
      "AGENT: '  1543'",
      "AGENT: ''",
      "AGENT: '✅ Restore successful! All data recovered.'",
      "AGENT: ''",
      "AGENT: 'Clean up test database:'",
      "Run command: `sudo -u postgres dropdb myapp_restore_test`",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Backup Specific Tables ---'",
      "Run command: `pg_dump -U postgres -d myapp -t users -t posts > users_posts_backup.sql`",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Backup All Databases ---'",
      "Run command: `pg_dumpall -U postgres > /tmp/all_databases.sql`",
      "AGENT: ''",
      "AGENT: 'This includes:'",
      "AGENT: '  - All databases'",
      "AGENT: '  - All roles/users'",
      "AGENT: '  - All global settings'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Monitor Backup Status ---'",
      "Create tool: `cat > /usr/local/bin/check-backup-status.sh << 'EOF'`",
      "#!/bin/bash\n\nBACKUP_DIR=\"/var/backups/postgres\"\nMAX_AGE_HOURS=25  # Alert if no backup in 25 hours\n\nLATEST_BACKUP=$(ls -t \"$BACKUP_DIR\"/*.dump 2>/dev/null | head -1)\n\nif [ -z \"$LATEST_BACKUP\" ]; then\n    echo \"ERROR: No backups found!\"\n    exit 1\nfi\n\nBACKUP_AGE_SECONDS=$(($(date +%s) - $(stat -c %Y \"$LATEST_BACKUP\")))\nBACKUP_AGE_HOURS=$((BACKUP_AGE_SECONDS / 3600))\n\nif [ $BACKUP_AGE_HOURS -gt $MAX_AGE_HOURS ]; then\n    echo \"WARNING: Latest backup is $BACKUP_AGE_HOURS hours old\"\n    echo \"File: $LATEST_BACKUP\"\n    exit 1\nelse\n    echo \"OK: Latest backup is $BACKUP_AGE_HOURS hours old\"\n    echo \"File: $LATEST_BACKUP\"\n    exit 0\nfi\nEOF",
      "Run command: `sudo chmod +x /usr/local/bin/check-backup-status.sh`",
      "AGENT: ''",
      "Run command: `/usr/local/bin/check-backup-status.sh`",
      "AGENT: 'OK: Latest backup is 2 hours old'",
      "AGENT: 'File: /var/backups/postgres/myapp_20251008_120500.dump'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Created compressed PostgreSQL backups with pg_dump.'",
      "AGENT: '  ✓ Built automated backup script with verification and logging.'",
      "AGENT: '  ✓ Implemented retention policy to auto-delete old backups.'",
      "AGENT: '  ✓ Added optional S3 upload for off-site backups.'",
      "AGENT: '  ✓ Scheduled daily backups with cron.'",
      "AGENT: '  ✓ Tested complete restore procedure successfully.'",
      "AGENT: '  ✓ Created monitoring script to alert on missing backups.'",
      "AGENT: '  ✓ Your database is now protected with enterprise-grade backups! 💾'"
    ],
    "commands": ["pg_dump", "pg_restore", "psql", "createdb", "dropdb", "gzip", "find", "aws", "crontab"],
    "packages": {
      "debian_ubuntu": ["postgresql-client", "gzip", "awscli"],
      "arch": ["postgresql", "gzip", "aws-cli"]
    },
    "related_commands": ["pg_basebackup", "pg_dumpall", "mysqldum p"],
    "complexity": "intermediate",
    "tags": ["postgresql", "database", "backup", "restore", "disaster-recovery", "automation", "data-protection"]
  }
]

[
  {
    "id": "scenario_ssl_certificate_management_111",
    "command": "openssl",
    "scenario": "Generate, manage, and troubleshoot SSL/TLS certificates for HTTPS websites.",
    "problem": "Need to set up HTTPS for a website but don't know how to generate SSL certificates, configure them properly, or troubleshoot certificate errors. Let's Encrypt automation would be ideal.",
    "solution": "Use openssl to generate self-signed certificates for testing, understand certificate components, use certbot for Let's Encrypt automation, configure nginx/apache for HTTPS, and troubleshoot certificate issues.",
    "steps": [
      "USER SAYS: 'I need to enable HTTPS on my website. How do I get SSL certificates and set them up properly?'",
      "AGENT: 'I'll show you everything about SSL certificates! From generating test certificates with openssl to production-ready Let\\'s Encrypt automation.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: SSL certificate management...'",
      "AGENT: '[Searching] \"openssl generate ssl certificate lets encrypt certbot\"'",
      "AGENT: '[Found] Self-signed certs for testing with openssl.'",
      "AGENT: '[Found] Let\\'s Encrypt provides free trusted certificates.'",
      "AGENT: '[Found] Certbot automates certificate issuance and renewal.'",
      "AGENT: '[Found] Certificates expire - need automated renewal!'",
      "AGENT: '✓ Research complete! Let\\'s secure your website.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Generate Self-Signed Certificate (Testing) ---'",
      "Run command: `openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/selfsigned.key -out /tmp/selfsigned.crt -subj '/C=US/ST=State/L=City/O=Company/OU=IT/CN=example.com'`",
      "AGENT: ''",
      "Run command: `ls -lh /tmp/selfsigned.*`",
      "AGENT: '-rw------- 1 user user 1.7K Oct  8 13:00 /tmp/selfsigned.key  ← Private key'",
      "AGENT: '-rw-r--r-- 1 user user 1.3K Oct  8 13:00 /tmp/selfsigned.crt  ← Certificate'",
      "AGENT: ''",
      "AGENT: '✅ Self-signed certificate created (valid for 365 days)'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Examine Certificate ---'",
      "Run command: `openssl x509 -in /tmp/selfsigned.crt -text -noout | head -20`",
      "AGENT: 'Certificate:'",
      "AGENT: '    Data:'",
      "AGENT: '        Version: 3 (0x2)'",
      "AGENT: '        Serial Number:'",
      "AGENT: '            12:34:56:78:90:ab:cd:ef'",
      "AGENT: '        Signature Algorithm: sha256WithRSAEncryption'",
      "AGENT: '        Issuer: C = US, ST = State, L = City, O = Company, OU = IT, CN = example.com'",
      "AGENT: '        Validity'",
      "AGENT: '            Not Before: Oct  8 13:00:00 2025 GMT'",
      "AGENT: '            Not After : Oct  8 13:00:00 2026 GMT'",
      "AGENT: '        Subject: C = US, ST = State, L = City, O = Company, OU = IT, CN = example.com'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Install Let\\'s Encrypt Certbot ---'",
      "Run command: `sudo apt-get update && sudo apt-get install -y certbot python3-certbot-nginx`",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Get Free Let\\'s Encrypt Certificate ---'",
      "AGENT: 'Prerequisites:'",
      "AGENT: '  1. Domain pointing to your server (DNS A record)'",
      "AGENT: '  2. Port 80 open (for verification)'",
      "AGENT: '  3. Nginx/Apache running'",
      "AGENT: ''",
      "Run command: `sudo certbot --nginx -d example.com -d www.example.com --non-interactive --agree-tos --email admin@example.com`",
      "AGENT: 'Saving debug log to /var/log/letsencrypt/letsencrypt.log'",
      "AGENT: 'Requesting a certificate for example.com and www.example.com'",
      "AGENT: ''",
      "AGENT: 'Successfully received certificate.'",
      "AGENT: 'Certificate is saved at: /etc/letsencrypt/live/example.com/fullchain.pem'",
      "AGENT: 'Key is saved at:         /etc/letsencrypt/live/example.com/privkey.pem'",
      "AGENT: 'This certificate expires on 2026-01-06.'",
      "AGENT: ''",
      "AGENT: 'Deploying certificate'",
      "AGENT: 'Successfully deployed certificate for example.com to /etc/nginx/sites-enabled/example.com'",
      "AGENT: 'Successfully deployed certificate for www.example.com to /etc/nginx/sites-enabled/example.com'",
      "AGENT: ''",
      "AGENT: 'NEXT STEPS:'",
      "AGENT: '- The certificate will need to be renewed before it expires.'",
      "AGENT: '- Certbot can automatically renew this certificate.'",
      "AGENT: ''",
      "AGENT: '✅ Free, trusted SSL certificate installed and configured!'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Check Certificate Files ---'",
      "Run command: `sudo ls -l /etc/letsencrypt/live/example.com/`",
      "AGENT: 'total 4'",
      "AGENT: 'lrwxrwxrwx 1 root root  37 Oct  8 13:05 cert.pem -> ../../archive/example.com/cert1.pem'",
      "AGENT: 'lrwxrwxrwx 1 root root  38 Oct  8 13:05 chain.pem -> ../../archive/example.com/chain1.pem'",
      "AGENT: 'lrwxrwxrwx 1 root root  42 Oct  8 13:05 fullchain.pem -> ../../archive/example.com/fullchain1.pem'",
      "AGENT: 'lrwxrwxrwx 1 root root  40 Oct  8 13:05 privkey.pem -> ../../archive/example.com/privkey1.pem'",
      "AGENT: ''",
      "AGENT: 'File purposes:'",
      "AGENT: '  cert.pem      = Your certificate only'",
      "AGENT: '  chain.pem     = Intermediate certificates'",
      "AGENT: '  fullchain.pem = cert + chain (use this in nginx/apache)'",
      "AGENT: '  privkey.pem   = Your private key (keep secret!)'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Configure Nginx for HTTPS ---'",
      "Create tool: `sudo tee /etc/nginx/sites-available/example.com << 'EOF'`",
      "# HTTP - redirect to HTTPS\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\n# HTTPS\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com www.example.com;\n\n    # SSL Certificate\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n\n    # SSL Configuration (Mozilla Modern)\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # SSL Session Cache\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # OCSP Stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\n\n    # Security Headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n\n    root /var/www/example.com;\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\nEOF",
      "Run command: `sudo nginx -t`",
      "AGENT: 'nginx: configuration file /etc/nginx/nginx.conf syntax is ok'",
      "AGENT: 'nginx: configuration file /etc/nginx/nginx.conf test is successful'",
      "AGENT: ''",
      "Run command: `sudo systemctl reload nginx`",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Test HTTPS Connection ---'",
      "Run command: `curl -I https://example.com`",
      "AGENT: 'HTTP/2 200'",
      "AGENT: 'server: nginx/1.24.0'",
      "AGENT: 'strict-transport-security: max-age=31536000; includeSubDomains'",
      "AGENT: ''",
      "Run command: `openssl s_client -connect example.com:443 -servername example.com < /dev/null 2>&1 | grep -A 2 'Certificate chain'`",
      "AGENT: 'Certificate chain'",
      "AGENT: ' 0 s:CN = example.com'",
      "AGENT: '   i:C = US, O = Let\\'s Encrypt, CN = R3'",
      "AGENT: ''",
      "AGENT: '✅ HTTPS is working with trusted Let\\'s Encrypt certificate!'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Set Up Automatic Renewal ---'",
      "Run command: `sudo certbot renew --dry-run`",
      "AGENT: 'Saving debug log to /var/log/letsencrypt/letsencrypt.log'",
      "AGENT: 'Processing /etc/letsencrypt/renewal/example.com.conf'",
      "AGENT: 'Simulating renewal of an existing certificate for example.com and www.example.com'",
      "AGENT: ''",
      "AGENT: 'Congratulations, all simulated renewals succeeded:'",
      "AGENT: '  /etc/letsencrypt/live/example.com/fullchain.pem (success)'",
      "AGENT: ''",
      "AGENT: '✅ Auto-renewal is configured and working!'",
      "AGENT: ''",
      "AGENT: 'Check systemd timer:'",
      "Run command: `systemctl list-timers | grep certbot`",
      "AGENT: 'Tue 2025-10-09 00:00:00 UTC  10h left   Mon 2025-10-08 00:00:00 UTC  13h ago  certbot.timer  certbot.service'",
      "AGENT: ''",
      "AGENT: 'Certbot automatically runs twice daily to check for renewals'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Check Certificate Expiry ---'",
      "Run command: `sudo certbot certificates`",
      "AGENT: 'Found the following certs:'",
      "AGENT: '  Certificate Name: example.com'",
      "AGENT: '    Serial Number: 1234567890abcdef1234567890abcdef12345678'",
      "AGENT: '    Key Type: RSA'",
      "AGENT: '    Domains: example.com www.example.com'",
      "AGENT: '    Expiry Date: 2026-01-06 13:05:00+00:00 (VALID: 89 days)'",
      "AGENT: '    Certificate Path: /etc/letsencrypt/live/example.com/fullchain.pem'",
      "AGENT: '    Private Key Path: /etc/letsencrypt/live/example.com/privkey.pem'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Troubleshoot Certificate Issues ---'",
      "AGENT: ''",
      "AGENT: 'Test SSL configuration:'",
      "Run command: `curl https://www.ssllabs.com/ssltest/analyze.html?d=example.com`",
      "AGENT: 'Or use: https://www.ssllabs.com/ssltest/'",
      "AGENT: ''",
      "AGENT: 'Check certificate chain:'",
      "Run command: `openssl s_client -connect example.com:443 -servername example.com < /dev/null 2>&1 | openssl x509 -noout -dates`",
      "AGENT: 'notBefore=Oct  8 13:05:00 2025 GMT'",
      "AGENT: 'notAfter=Jan  6 13:05:00 2026 GMT'",
      "AGENT: ''",
      "AGENT: 'Verify certificate matches private key:'",
      "Run command: `sudo openssl x509 -noout -modulus -in /etc/letsencrypt/live/example.com/cert.pem | openssl md5`",
      "Run command: `sudo openssl rsa -noout -modulus -in /etc/letsencrypt/live/example.com/privkey.pem | openssl md5`",
      "AGENT: 'If both MD5 hashes match, certificate and key are paired ✓'",
      "AGENT: ''",
      "AGENT: 'Check certificate content:'",
      "Run command: `sudo openssl x509 -in /etc/letsencrypt/live/example.com/cert.pem -text -noout | grep -A 1 'Subject:'`",
      "AGENT: '        Subject: CN = example.com'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Revoke Certificate if Compromised ---'",
      "Run command: `sudo certbot revoke --cert-path /etc/letsencrypt/live/example.com/cert.pem`",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Generated self-signed certificate for testing with openssl.'",
      "AGENT: '  ✓ Obtained free, trusted certificate from Let\\'s Encrypt with certbot.'",
      "AGENT: '  ✓ Configured Nginx with modern SSL/TLS settings.'",
      "AGENT: '  ✓ Enabled HTTP to HTTPS redirect for security.'",
      "AGENT: '  ✓ Added security headers (HSTS, X-Frame-Options, etc.).'",
      "AGENT: '  ✓ Set up automatic certificate renewal (runs twice daily).'",
      "AGENT: '  ✓ Verified SSL configuration and certificate chain.'",
      "AGENT: '  ✓ Learned to troubleshoot certificate issues.'",
      "AGENT: '  ✓ Your website is now secure with HTTPS! 🔒'"
    ],
    "commands": ["openssl", "certbot", "curl", "sudo", "systemctl", "nginx"],
    "packages": {
      "debian_ubuntu": ["openssl", "certbot", "python3-certbot-nginx", "nginx"],
      "arch": ["openssl", "certbot", "certbot-nginx", "nginx"]
    },
    "related_commands": ["acme.sh", "dehydrated"],
    "complexity": "intermediate",
    "tags": ["ssl", "tls", "https", "certificate", "letsencrypt", "certbot", "openssl", "nginx", "security"]
  },
  {
    "id": "scenario_firewall_iptables_ufw_112",
    "command": "ufw",
    "scenario": "Configure firewall rules to secure server while allowing necessary traffic.",
    "problem": "A newly provisioned server is wide open to the internet with no firewall protection. Need to block unauthorized access while allowing SSH, HTTP, and HTTPS traffic.",
    "solution": "Use UFW (Uncomplicated Firewall) for simple rule management, understand iptables basics, configure default policies, allow/deny specific ports, and implement rate limiting for security.",
    "steps": [
      "USER SAYS: 'My server is exposed to the internet with no firewall. How do I secure it while still allowing web traffic and SSH access?'",
      "AGENT: 'Let me show you firewall configuration! We'll use UFW for simple management, then explore iptables for advanced rules.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: Linux firewall configuration...'",
      "AGENT: '[Searching] \"ufw iptables firewall configuration ssh http https\"'",
      "AGENT: '[Found] UFW is user-friendly frontend for iptables.'",
      "AGENT: '[Found] Default policy: deny incoming, allow outgoing.'",
      "AGENT: '[Found] Rate limiting protects against brute force attacks.'",
      "AGENT: '[Found] Always allow SSH before enabling firewall!'",
      "AGENT: '✓ Research complete! Let's secure your server.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Install and Check UFW Status ---'",
      "Run command: `sudo apt-get install -y ufw`",
      "AGENT: ''",
      "Run command: `sudo ufw status`",
      "AGENT: 'Status: inactive'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Configure Default Policies ---'",
      "Run command: `sudo ufw default deny incoming`",
      "AGENT: 'Default incoming policy changed to \\'deny\\''",
      "AGENT: ''",
      "Run command: `sudo ufw default allow outgoing`",
      "AGENT: 'Default outgoing policy changed to \\'allow\\''",
      "AGENT: ''",
      "AGENT: '💡 Good security posture: block everything by default, allow only what's needed'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Allow SSH (CRITICAL - Do This First!) ---'",
      "Run command: `sudo ufw allow 22/tcp comment 'SSH'`",
      "AGENT: 'Rules updated'",
      "AGENT: ''",
      "AGENT: '⚠️ IMPORTANT: Always allow SSH before enabling firewall, or you'll lock yourself out!'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Allow Web Traffic ---'",
      "Run command: `sudo ufw allow 80/tcp comment 'HTTP'`",
      "AGENT: 'Rules updated'",
      "AGENT: ''",
      "Run command: `sudo ufw allow 443/tcp comment 'HTTPS'`",
      "AGENT: 'Rules updated'",
      "AGENT: ''",
      "AGENT: 'Or use service names:'",
      "Run command: `sudo ufw allow http`",
      "Run command: `sudo ufw allow https`",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Enable Firewall ---'",
      "Run command: `sudo ufw enable`",
      "AGENT: 'Command may disrupt existing ssh connections. Proceed with operation (y|n)? y'",
      "AGENT: 'Firewall is active and enabled on system startup'",
      "AGENT: ''",
      "AGENT: '✅ Firewall is now active!'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Check Firewall Status ---'",
      "Run command: `sudo ufw status verbose`",
      "AGENT: 'Status: active'",
      "AGENT: 'Logging: on (low)'",
      "AGENT: 'Default: deny (incoming), allow (outgoing), disabled (routed)'",
      "AGENT: 'New profiles: skip'",
      "AGENT: ''",
      "AGENT: 'To                         Action      From'",
      "AGENT: '--                         ------      ----'",
      "AGENT: '22/tcp                     ALLOW IN    Anywhere                   # SSH'",
      "AGENT: '80/tcp                     ALLOW IN    Anywhere                   # HTTP'",
      "AGENT: '443/tcp                    ALLOW IN    Anywhere                   # HTTPS'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Add Rate Limiting for SSH (Brute Force Protection) ---'",
      "Run command: `sudo ufw delete allow 22/tcp`",
      "Run command: `sudo ufw limit 22/tcp comment 'SSH with rate limiting'`",
      "AGENT: 'Rules updated'",
      "AGENT: ''",
      "AGENT: 'This limits connections to 6 per 30 seconds from same IP'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Allow from Specific IP ---'",
      "Run command: `sudo ufw allow from 203.0.113.50 to any port 3306 comment 'MySQL from office'`",
      "AGENT: 'Rules updated'",
      "AGENT: ''",
      "AGENT: 'Allow subnet:'",
      "Run command: `sudo ufw allow from 192.168.1.0/24 to any port 5432 comment 'PostgreSQL from local network'`",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Deny Specific IP ---'",
      "Run command: `sudo ufw deny from 198.51.100.100 comment 'Block attacker'`",
      "AGENT: 'Rules updated'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: View Numbered Rules (For Deletion) ---'",
      "Run command: `sudo ufw status numbered`",
      "AGENT: 'Status: active'",
      "AGENT: ''",
      "AGENT: '     To                         Action      From'",
      "AGENT: '     --                         ------      ----'",
      "AGENT: '[ 1] 22/tcp                     LIMIT IN    Anywhere                   # SSH with rate limiting'",
      "AGENT: '[ 2] 80/tcp                     ALLOW IN    Anywhere                   # HTTP'",
      "AGENT: '[ 3] 443/tcp                    ALLOW IN    Anywhere                   # HTTPS'",
      "AGENT: '[ 4] 3306                       ALLOW IN    203.0.113.50               # MySQL from office'",
      "AGENT: '[ 5] 5432                       ALLOW IN    192.168.1.0/24             # PostgreSQL from local network'",
      "AGENT: '[ 6] Anywhere                   DENY IN     198.51.100.100             # Block attacker'",
      "AGENT: ''",
      "AGENT: 'Delete rule by number:'",
      "Run command: `sudo ufw delete 6`",
      "AGENT: 'Deleting:'",
      "AGENT: ' deny from 198.51.100.100'",
      "AGENT: 'Proceed with operation (y|n)? y'",
      "AGENT: 'Rule deleted'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Enable Logging ---'",
      "Run command: `sudo ufw logging on`",
      "AGENT: 'Logging enabled'",
      "AGENT: ''",
      "Run command: `sudo tail -f /var/log/ufw.log &`",
      "AGENT: 'Oct  8 14:30:45 server kernel: [UFW BLOCK] IN=eth0 SRC=198.51.100.200 DST=203.0.113.50 PROTO=TCP DPT=25 '",
      "AGENT: ''",
      "AGENT: '--- Bonus: Advanced - View iptables Rules ---'",
      "Run command: `sudo iptables -L -n -v`",
      "AGENT: 'Chain INPUT (policy DROP 0 packets, 0 bytes)'",
      "AGENT: ' pkts bytes target     prot opt in     out     source               destination'",
      "AGENT: '12345 9876K ufw-before-input  all  --  *      *       0.0.0.0/0            0.0.0.0/0'",
      "AGENT: ''",
      "AGENT: 'UFW creates iptables rules behind the scenes'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Application Profiles ---'",
      "Run command: `sudo ufw app list`",
      "AGENT: 'Available applications:'",
      "AGENT: '  Nginx Full'",
      "AGENT: '  Nginx HTTP'",
      "AGENT: '  Nginx HTTPS'",
      "AGENT: '  OpenSSH'",
      "AGENT: ''",
      "Run command: `sudo ufw allow 'Nginx Full'`",
      "AGENT: 'Rules updated'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Reset Firewall ---'",
      "AGENT: 'If you need to start over:'",
      "Run command: `sudo ufw --force reset`",
      "AGENT: 'Resetting all rules to installed defaults. This may disrupt existing ssh connections.'",
      "AGENT: 'Proceed with operation (y|n)? y'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Installed and configured UFW firewall.'",
      "AGENT: '  ✓ Set default policy: deny incoming, allow outgoing.'",
      "AGENT: '  ✓ Allowed essential services: SSH (with rate limiting), HTTP, HTTPS.'",
      "AGENT: '  ✓ Implemented rate limiting to prevent brute force attacks.'",
      "AGENT: '  ✓ Created IP-specific rules for database access.'",
      "AGENT: '  ✓ Enabled logging for security monitoring.'",
      "AGENT: '  ✓ Learned to manage rules (add, delete, list).'",
      "AGENT: '  ✓ Your server is now protected by a firewall! 🛡️'"
    ],
    "commands": ["ufw", "iptables", "sudo", "tail"],
    "packages": {
      "debian_ubuntu": ["ufw", "iptables"],
      "arch": ["ufw", "iptables"]
    },
    "related_commands": ["firewalld", "nftables"],
    "complexity": "intermediate",
    "tags": ["firewall", "ufw", "iptables", "security", "network", "ssh", "rate-limiting", "access-control"]
  }
]

[
  {
    "id": "scenario_update_broke_system_001",
    "command": "multiple",
    "scenario": "User: System update broke something, need to fix or rollback",
    "problem": "After system update, boot fails, packages broken, or features missing",
    "solution": "Diagnose update issues, rollback or fix broken packages",
    "steps": [
      "USER SAYS: 'I ran updates and now X won't start! Just black screen.'",
      "AGENT: 'Update issues happen. Let me help you fix this. Can you get to a terminal?'",
      "USER: 'Yes, I'm in TTY (Ctrl+Alt+F2)'",
      "AGENT: 'Perfect. Let me check what was updated...'",
      "Check recent updates (Ubuntu): grep 'install\\|upgrade' /var/log/apt/history.log | tail -50",
      "Check recent (Arch): grep 'upgraded\\|installed' /var/log/pacman.log | tail -50",
      "AGENT: 'I see recent updates to: xorg-server, nvidia drivers, mesa'",
      "AGENT: 'Likely the graphics driver update broke X. Let me check Xorg logs...'",
      "Check Xorg log: cat /var/log/Xorg.0.log | grep -i 'error\\|fail'",
      "AGENT: 'Error: Failed to load NVIDIA kernel module'",
      "AGENT: 'NVIDIA driver issue. Let me check which kernel you're running...'",
      "Check kernel: uname -r",
      "AGENT: 'You're on kernel 6.1.0-13. Checking if NVIDIA module is loaded...'",
      "Check module: lsmod | grep nvidia",
      "If empty: AGENT: 'NVIDIA module not loaded. Trying to load it...'",
      "Load module: sudo modprobe nvidia",
      "If error: AGENT: 'Module won't load. Likely needs rebuilding for new kernel.'",
      "Rebuild DKMS (Ubuntu): sudo dkms autoinstall",
      "Rebuild (Arch): sudo dkms install nvidia/$(pacman -Q nvidia | cut -d' ' -f2)",
      "AGENT: 'Rebuilding NVIDIA driver for current kernel...'",
      "Wait: sleep 10",
      "Check again: lsmod | grep nvidia",
      "AGENT: 'Module loaded! Restarting X...'",
      "Restart display: sudo systemctl restart display-manager",
      "AGENT: 'X should be starting now. Switch to TTY7 (Ctrl+Alt+F7)'",
      "USER: 'Still black screen!'",
      "AGENT: 'Let me try a different approach. Rolling back the driver...'",
      "Check available (Arch): pacman -Si nvidia | grep Version",
      "Downgrade (Arch): sudo pacman -U /var/cache/pacman/pkg/nvidia-[previous-version].pkg.tar.zst",
      "Downgrade (Ubuntu): sudo apt install nvidia-driver-525=525.60.13-0ubuntu1",
      "AGENT: 'Downgraded to previous driver version. Reboot needed...'",
      "Reboot: sudo reboot",
      "After reboot: AGENT: 'Did X start this time?'",
      "USER: 'Yes! It works!'",
      "AGENT: 'Great! To prevent auto-update of NVIDIA driver, I'll hold the package.'",
      "Hold (Ubuntu): sudo apt-mark hold nvidia-driver-525",
      "Hold (Arch): Add to /etc/pacman.conf: IgnorePkg = nvidia",
      "Edit pacman.conf: echo 'IgnorePkg = nvidia' | sudo tee -a /etc/pacman.conf",
      "AGENT: 'Driver held. Won't auto-update until you unhold it.'",
      "Scenario: Broken package dependencies",
      "USER: 'Different issue - apt says broken packages after update'",
      "AGENT: 'Let me check the package status...'",
      "Check status: sudo apt --fix-broken install",
      "AGENT: 'Attempting to fix broken dependencies...'",
      "If conflicts: AGENT: 'Package conflicts detected. Let me see...'",
      "Show issues: sudo dpkg --configure -a",
      "AGENT: 'Some packages weren't configured. Configuring now...'",
      "Force config: sudo dpkg --configure -a",
      "Clean cache: sudo apt clean",
      "Update: sudo apt update",
      "Try again: sudo apt --fix-broken install",
      "If still broken: AGENT: 'Let me check for held packages...'",
      "Check held: dpkg --get-selections | grep hold",
      "AGENT: 'Found held packages. Attempting to unhold and fix...'",
      "Unhold: sudo apt-mark unhold <package>",
      "Try upgrade: sudo apt upgrade",
      "Scenario: Kernel update boot fail",
      "USER: 'System won't boot after kernel update!'",
      "AGENT: 'You need to boot into previous kernel. At GRUB menu:'",
      "AGENT: '1. Press Esc or Shift during boot'",
      "AGENT: '2. Select Advanced Options'",
      "AGENT: '3. Choose previous kernel version'",
      "AGENT: '4. Once booted, we'll fix it'",
      "USER: 'I'm booted in old kernel'",
      "AGENT: 'Good! Let me check which kernels you have...'",
      "List kernels (Ubuntu): dpkg --list | grep linux-image",
      "List kernels (Arch): pacman -Q | grep linux",
      "AGENT: 'You have: 6.1.0-13 (broken), 6.1.0-12 (current), 6.1.0-11'",
      "AGENT: 'Let me remove the broken kernel and its modules...'",
      "Remove (Ubuntu): sudo apt remove linux-image-6.1.0-13-generic",
      "Remove (Arch): sudo pacman -R linux",
      "Update GRUB: sudo update-grub",
      "AGENT: 'Broken kernel removed. System will boot to working kernel.'",
      "Create kernel snapshot script: AGENT: 'Creating kernel backup tool...'",
      "Create script: cat > ~/kernel-snapshot.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Kernel Snapshot ==='",
      "echo ''",
      "echo 'Current kernel: '$(uname -r)",
      "echo ''",
      "echo 'Installed kernels:'",
      "if command -v dpkg &>/dev/null; then",
      "  dpkg --list | grep linux-image",
      "elif command -v pacman &>/dev/null; then",
      "  pacman -Q | grep linux",
      "fi",
      "echo ''",
      "read -p 'Save current kernel as known-good? (y/n): ' CONFIRM",
      "if [ \"$CONFIRM\" = 'y' ]; then",
      "  echo $(uname -r) > ~/.kernel-snapshot",
      "  echo 'Saved: '$(cat ~/.kernel-snapshot)",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/kernel-snapshot.sh",
      "Create update safety script: cat > ~/safe-update.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Safe System Update ==='",
      "echo ''",
      "echo 'This will:'",
      "echo '1. Create snapshot of current state'",
      "echo '2. Run system update'",
      "echo '3. Create restore point'",
      "echo ''",
      "read -p 'Continue? (y/n): ' CONFIRM",
      "[ \"$CONFIRM\" != 'y' ] && exit 0",
      "echo ''",
      "echo 'Step 1: Saving current kernel...'",
      "echo $(uname -r) > ~/.kernel-before-update",
      "echo 'Step 2: Saving package list...'",
      "if command -v dpkg &>/dev/null; then",
      "  dpkg --get-selections > ~/.packages-before-update",
      "elif command -v pacman &>/dev/null; then",
      "  pacman -Q > ~/.packages-before-update",
      "fi",
      "echo 'Step 3: Running update...'",
      "if command -v apt &>/dev/null; then",
      "  sudo apt update && sudo apt upgrade -y",
      "elif command -v pacman &>/dev/null; then",
      "  sudo pacman -Syu --noconfirm",
      "fi",
      "echo ''",
      "echo 'Update complete!'",
      "echo 'Snapshots saved to:'",
      "echo '  - ~/.kernel-before-update'",
      "echo '  - ~/.packages-before-update'",
      "echo ''",
      "echo 'If issues occur, use ~/rollback-update.sh'",
      "EOF",
      "Make executable: chmod +x ~/safe-update.sh",
      "Create rollback script: cat > ~/rollback-update.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Update Rollback ==='",
      "echo ''",
      "if [ ! -f ~/.kernel-before-update ]; then",
      "  echo '✗ No snapshot found. Run safe-update.sh next time.'",
      "  exit 1",
      "fi",
      "echo 'Previous kernel: '$(cat ~/.kernel-before-update)",
      "echo 'Current kernel: '$(uname -r)",
      "echo ''",
      "echo 'To rollback:'",
      "echo '1. Reboot'",
      "echo '2. At GRUB, select Advanced Options'",
      "echo '3. Choose kernel: '$(cat ~/.kernel-before-update)",
      "echo '4. After boot, hold problematic packages'",
      "echo ''",
      "read -p 'Show package differences? (y/n): ' SHOW",
      "if [ \"$SHOW\" = 'y' ]; then",
      "  echo ''",
      "  echo 'Packages changed during update:'",
      "  diff ~/.packages-before-update <(dpkg --get-selections 2>/dev/null || pacman -Q 2>/dev/null) | head -20",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/rollback-update.sh",
      "Add update aliases: cat >> ~/.bashrc << 'EOF'",
      "# Update management",
      "alias safe-update='~/safe-update.sh'",
      "alias rollback-update='~/rollback-update.sh'",
      "alias check-kernels='dpkg --list | grep linux-image || pacman -Q | grep linux'",
      "alias update-history='grep \"install\\|upgrade\" /var/log/apt/history.log | tail -20 || grep \"upgraded\\|installed\" /var/log/pacman.log | tail -20'",
      "EOF",
      "Source: source ~/.bashrc",
      "Final summary: AGENT: 'Update issues fixed! Summary:'",
      "AGENT: ''",
      "AGENT: '✓ Rolled back broken NVIDIA driver'",
      "AGENT: '✓ X is working again'",
      "AGENT: '✓ Driver held to prevent auto-update'",
      "AGENT: '✓ Created safety tools for future updates'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '- ~/safe-update.sh (update with snapshots)'",
      "AGENT: '- ~/rollback-update.sh (rollback helper)'",
      "AGENT: '- ~/kernel-snapshot.sh (save good kernel)'",
      "AGENT: ''",
      "AGENT: 'For future updates:'",
      "AGENT: 'Use: safe-update (instead of apt upgrade)'",
      "AGENT: 'This creates automatic rollback points. ✓'"
    ],
    "commands": ["grep", "cat", "uname", "lsmod", "modprobe", "dkms", "systemctl", "reboot", "apt", "dpkg", "pacman", "update-grub", "diff", "tee", "chmod", "source"],
    "packages": {
      "debian_ubuntu": ["dkms", "apt", "dpkg"],
      "arch": ["dkms", "pacman"]
    },
    "related_commands": ["apt", "pacman", "dpkg", "systemctl", "dkms", "update-grub"],
    "complexity": "advanced",
    "tags": ["updates", "rollback", "kernel", "drivers", "troubleshooting", "recovery", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_deleted_files_recovery_001",
    "command": "multiple",
    "scenario": "User: I accidentally deleted important files!",
    "problem": "Files deleted, need recovery or restoration from trash/backup",
    "solution": "Attempt file recovery and teach prevention",
    "steps": [
      "USER SAYS: 'I accidentally deleted my project folder! Can you recover it?!'",
      "AGENT: 'Stay calm! Let me help. First, STOP using the computer - don't write new files.'",
      "AGENT: 'How did you delete it? rm command, file manager, or shift+delete?'",
      "USER: 'I used rm command'",
      "AGENT: 'rm bypasses trash. Checking if you have trash-cli installed...'",
      "Check trash-cli: which trash-put",
      "If not installed: AGENT: 'For future: install trash-cli to safely delete files'",
      "Install: sudo apt install trash-cli || sudo pacman -S trash-cli",
      "AGENT: 'Now checking for recent backups...'",
      "Check timeshift: which timeshift",
      "If exists: AGENT: 'You have Timeshift! Checking snapshots...'",
      "List snapshots: sudo timeshift --list",
      "AGENT: 'Latest snapshot: 2 days ago. Want to restore from it?'",
      "USER: 'Yes, but only my project folder'",
      "Mount snapshot: AGENT: 'Mounting snapshot to browse files...'",
      "Find snapshot: sudo ls /run/timeshift/backup/timeshift-btrfs/snapshots/",
      "Get latest: LATEST=$(sudo ls -t /run/timeshift/backup/timeshift-btrfs/snapshots/ | head -1)",
      "Browse: sudo ls /run/timeshift/backup/timeshift-btrfs/snapshots/$LATEST/localhost/home/$USER/",
      "AGENT: 'Found your home directory in snapshot. Looking for project...'",
      "Find project: sudo find /run/timeshift/backup/timeshift-btrfs/snapshots/$LATEST -name 'project*' -type d",
      "AGENT: 'Found it! Restoring...'",
      "Restore: sudo cp -r /run/timeshift/backup/timeshift-btrfs/snapshots/$LATEST/localhost/home/$USER/projects ~/projects-recovered",
      "Fix ownership: sudo chown -R $USER:$USER ~/projects-recovered",
      "AGENT: 'Restored to ~/projects-recovered. Check if everything is there!'",
      "USER: 'Perfect! All my files are back!'",
      "Scenario: No backup available",
      "USER: 'I don't have timeshift or backups'",
      "AGENT: 'Let me try file recovery tools. This might recover some files...'",
      "AGENT: 'Installing testdisk/photorec...'",
      "Install: sudo apt install testdisk || sudo pacman -S testdisk",
      "AGENT: 'WARNING: Recovery success depends on:'",
      "AGENT: '1. How long ago files were deleted'",
      "AGENT: '2. Whether disk space was overwritten'",
      "AGENT: '3. Filesystem type (ext4 works better than btrfs)'",
      "Check filesystem: df -T | grep /home",
      "AGENT: 'You're on ext4. Better recovery chances.'",
      "Create recovery dir: mkdir ~/recovery",
      "AGENT: 'Starting photorec (file recovery tool)...'",
      "AGENT: 'This scans for deleted files. Use GUI? (y/n)'",
      "USER: 'Yes'",
      "Run photorec: sudo photorec /d ~/recovery /dev/sda1",
      "AGENT: 'Photorec running. Follow prompts:'",
      "AGENT: '1. Select your home partition'",
      "AGENT: '2. Choose ext4 filesystem'",
      "AGENT: '3. Select free (unallocated space)'",
      "AGENT: '4. Wait for scan (may take 30+ minutes)'",
      "AGENT: 'Scan running in background. I'll monitor...'",
      "Wait: sleep 60",
      "Check progress: ls ~/recovery/",
      "AGENT: 'Found $(ls ~/recovery/ | wc -l) files so far...'",
      "Scenario: Deleted from trash/file manager",
      "USER: 'Actually I deleted through file manager'",
      "AGENT: 'Great! It's probably in trash. Checking...'",
      "Check trash: ls ~/.local/share/Trash/files/",
      "AGENT: 'Your trash contains:'",
      "List trash: trash-list",
      "AGENT: 'Looking for your project...'",
      "Find: trash-list | grep -i project",
      "AGENT: 'Found: projects (deleted today). Restoring...'",
      "Restore: trash-restore",
      "AGENT: 'Select the number for your project folder'",
      "USER: 'Done!'",
      "AGENT: 'Restored! Check ~/projects'",
      "Verify: ls ~/projects",
      "AGENT: 'All files recovered successfully! ✓'",
      "Create safe delete function: AGENT: 'Let me set up safe deletion to prevent this...'",
      "Add to bashrc: cat >> ~/.bashrc << 'EOF'",
      "# Safe delete function",
      "rm() {",
      "  if command -v trash-put &>/dev/null; then",
      "    trash-put \"$@\"",
      "    echo \"Moved to trash: $@\"",
      "    echo \"Restore with: trash-restore\"",
      "  else",
      "    command rm \"$@\"",
      "  fi",
      "}",
      "",
      "# Force delete (bypass trash)",
      "frm() {",
      "  command rm \"$@\"",
      "}",
      "EOF",
      "Source: source ~/.bashrc",
      "AGENT: 'Now rm uses trash automatically! Use frm to force delete.'",
      "Create recovery toolkit: cat > ~/file-recovery.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== File Recovery Toolkit ==='",
      "echo ''",
      "echo '1. Check Trash'",
      "echo '2. Check Timeshift backups'",
      "echo '3. Check ~/.backup folder'",
      "echo '4. Run photorec scan'",
      "echo '5. Check temp folders'",
      "echo ''",
      "read -p 'Choose option (1-5): ' OPT",
      "case $OPT in",
      "  1) trash-list ;;",
      "  2) sudo timeshift --list ;;",
      "  3) ls -la ~/.backup 2>/dev/null || echo 'No backup folder' ;;",
      "  4) ",
      "    echo 'Starting photorec...'",
      "    mkdir -p ~/recovery",
      "    sudo photorec",
      "    ;;",
      "  5)",
      "    echo 'Checking temp folders...'",
      "    find /tmp ~/.cache -name '*project*' 2>/dev/null",
      "    ;;",
      "esac",
      "EOF",
      "Make executable: chmod +x ~/file-recovery.sh",
      "Setup auto backup: AGENT: 'Setting up auto-backup to prevent future losses...'",
      "Create backup script: cat > ~/auto-backup-important.sh << 'EOF'",
      "#!/bin/bash",
      "BACKUP_DIR=~/.important-backups",
      "mkdir -p $BACKUP_DIR",
      "TIMESTAMP=$(date +%Y%m%d-%H%M%S)",
      "# Backup important directories",
      "for DIR in ~/projects ~/Documents ~/scripts; do",
      "  if [ -d \"$DIR\" ]; then",
      "    NAME=$(basename $DIR)",
      "    tar -czf $BACKUP_DIR/${NAME}-${TIMESTAMP}.tar.gz -C ~/ $(basename $DIR) 2>/dev/null",
      "    echo \"Backed up: $NAME\"",
      "  fi",
      "done",
      "# Keep only last 7 backups",
      "find $BACKUP_DIR -name '*.tar.gz' -mtime +7 -delete",
      "echo \"Backups saved to: $BACKUP_DIR\"",
      "EOF",
      "Make executable: chmod +x ~/auto-backup-important.sh",
      "Schedule: (crontab -l 2>/dev/null; echo '0 */6 * * * ~/auto-backup-important.sh') | crontab -",
      "AGENT: 'Auto-backup set up: Runs every 6 hours'",
      "Create undelete alias: cat >> ~/.bashrc << 'EOF'",
      "# Quick trash commands",
      "alias undelete='trash-restore'",
      "alias trash-empty='trash-empty'",
      "alias trash-show='trash-list'",
      "alias oops='trash-restore'",
      "EOF",
      "Source: source ~/.bashrc",
      "Final summary: AGENT: 'Files recovered! Prevention set up:'",
      "AGENT: ''",
      "AGENT: '✓ Recovered deleted files from trash/backup'",
      "AGENT: '✓ rm command now uses trash (safer)'",
      "AGENT: '✓ Auto-backup runs every 6 hours'",
      "AGENT: '✓ Backups kept for 7 days'",
      "AGENT: ''",
      "AGENT: 'Commands available:'",
      "AGENT: '- rm <file> (moves to trash)'",
      "AGENT: '- frm <file> (force delete)'",
      "AGENT: '- undelete or oops (restore)'",
      "AGENT: '- trash-show (view trash)'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '- ~/file-recovery.sh (recovery toolkit)'",
      "AGENT: '- ~/auto-backup-important.sh (auto backup)'",
      "AGENT: ''",
      "AGENT: 'Backups location: ~/.important-backups'",
      "AGENT: 'You're protected now! ✓'"
    ],
    "commands": ["rm", "trash-put", "trash-list", "trash-restore", "timeshift", "cp", "chown", "find", "testdisk", "photorec", "tar", "crontab", "cat", "chmod", "source"],
    "packages": {
      "debian_ubuntu": ["trash-cli", "timeshift", "testdisk"],
      "arch": ["trash-cli", "timeshift", "testdisk"]
    },
    "related_commands": ["rm", "trash-cli", "testdisk", "photorec", "timeshift"],
    "complexity": "intermediate",
    "tags": ["file-recovery", "deletion", "backup", "trash", "data-loss", "prevention", "real-world", "ai-agent"]
  }
]

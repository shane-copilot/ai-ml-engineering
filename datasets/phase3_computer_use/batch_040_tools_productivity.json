[
  {
    "id": "scenario_data_backup_strategy_001",
    "command": "multiple",
    "scenario": "User: Need comprehensive backup solution",
    "problem": "No backup strategy, worried about data loss",
    "solution": "Setup automated backups with multiple strategies",
    "steps": [
      "USER SAYS: 'I have no backups. If my drive fails, I lose everything!'",
      "AGENT: 'Let me set up a comprehensive backup strategy. What data needs backing up?'",
      "USER: 'My home directory - documents, photos, projects'",
      "AGENT: 'I'll create a 3-2-1 backup strategy:'",
      "AGENT: '- 3 copies of data'",
      "AGENT: '- 2 different storage types'",
      "AGENT: '- 1 off-site backup'",
      "Strategy 1: Local incremental backups",
      "AGENT: 'Strategy 1: Local incremental backups with rsync...'",
      "Install: sudo apt install rsync || sudo pacman -S rsync",
      "Create script: cat > ~/backup-local.sh << 'EOF'",
      "#!/bin/bash",
      "SOURCE=~/",
      "DEST=/media/backup/home-backup",
      "TIMESTAMP=$(date +%Y%m%d-%H%M%S)",
      "LATEST=$DEST/latest",
      "BACKUP=$DEST/backup-$TIMESTAMP",
      "mkdir -p $DEST",
      "echo \"Starting backup: $(date)\"",
      "rsync -av --delete \\",
      "  --exclude='.cache' \\",
      "  --exclude='.local/share/Trash' \\",
      "  --exclude='Downloads' \\",
      "  --link-dest=$LATEST \\",
      "  $SOURCE $BACKUP/",
      "rm -f $LATEST",
      "ln -s $BACKUP $LATEST",
      "echo \"Backup complete: $(du -sh $BACKUP | cut -f1)\"",
      "find $DEST -maxdepth 1 -name 'backup-*' -mtime +30 -exec rm -rf {} \\;",
      "EOF",
      "Make executable: chmod +x ~/backup-local.sh",
      "AGENT: 'Local backup script created. Uses hard links for efficiency. ✓'",
      "Strategy 2: Cloud backup",
      "AGENT: 'Strategy 2: Cloud backup with rclone...'",
      "Install: curl https://rclone.org/install.sh | sudo bash",
      "Setup: rclone config",
      "AGENT: 'Configure your cloud storage (Google Drive, Dropbox, etc.)'",
      "Create cloud script: cat > ~/backup-cloud.sh << 'EOF'",
      "#!/bin/bash",
      "SOURCE=~/",
      "REMOTE='gdrive:Backups/home'",
      "echo \"Starting cloud backup: $(date)\"",
      "rclone sync $SOURCE $REMOTE \\",
      "  --exclude '.cache/**' \\",
      "  --exclude 'Downloads/**' \\",
      "  --progress \\",
      "  --transfers 4",
      "echo \"Cloud backup complete: $(date)\"",
      "EOF",
      "Make executable: chmod +x ~/backup-cloud.sh",
      "AGENT: 'Cloud backup script created. ✓'",
      "Strategy 3: Archive important files",
      "AGENT: 'Strategy 3: Compressed archives of critical data...'",
      "Create archive script: cat > ~/backup-archive.sh << 'EOF'",
      "#!/bin/bash",
      "ARCHIVE_DIR=~/Archives",
      "TIMESTAMP=$(date +%Y%m%d)",
      "mkdir -p $ARCHIVE_DIR",
      "DIRS=(~/Documents ~/Pictures ~/Projects)",
      "for DIR in \"${DIRS[@]}\"; do",
      "  if [ -d \"$DIR\" ]; then",
      "    NAME=$(basename $DIR)",
      "    ARCHIVE=$ARCHIVE_DIR/${NAME}-${TIMESTAMP}.tar.gz",
      "    echo \"Archiving: $DIR\"",
      "    tar -czf $ARCHIVE -C ~/ $(basename $DIR)",
      "    echo \"Created: $ARCHIVE ($(du -h $ARCHIVE | cut -f1))\"",
      "  fi",
      "done",
      "find $ARCHIVE_DIR -name '*.tar.gz' -mtime +60 -delete",
      "EOF",
      "Make executable: chmod +x ~/backup-archive.sh",
      "Master backup script: cat > ~/backup-all.sh << 'EOF'",
      "#!/bin/bash",
      "LOG=~/backup.log",
      "echo \"==============================\" >> $LOG",
      "echo \"Backup started: $(date)\" >> $LOG",
      "echo \"Running local backup...\" | tee -a $LOG",
      "~/backup-local.sh >> $LOG 2>&1",
      "echo \"Running cloud backup...\" | tee -a $LOG",
      "~/backup-cloud.sh >> $LOG 2>&1",
      "echo \"Running archive...\" | tee -a $LOG",
      "~/backup-archive.sh >> $LOG 2>&1",
      "echo \"Backup finished: $(date)\" >> $LOG",
      "notify-send 'Backup Complete' 'All backups finished successfully'",
      "EOF",
      "Make executable: chmod +x ~/backup-all.sh",
      "Schedule: (crontab -l 2>/dev/null; echo '0 1 * * * ~/backup-all.sh') | crontab -",
      "AGENT: 'Automated daily backups scheduled for 1 AM. ✓'",
      "Create restore script: cat > ~/restore-backup.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Backup Restore Wizard ==='",
      "echo ''",
      "echo '1. Restore from local backup'",
      "echo '2. Restore from cloud backup'",
      "echo '3. Restore from archive'",
      "read -p 'Choose (1-3): ' OPT",
      "case $OPT in",
      "  1) rsync -av /media/backup/home-backup/latest/ ~/ ;;",
      "  2) rclone sync gdrive:Backups/home ~/ ;;",
      "  3) ",
      "    ls -lh ~/Archives/*.tar.gz",
      "    read -p 'Archive file: ' FILE",
      "    tar -xzf $FILE -C ~/",
      "    ;;",
      "esac",
      "EOF",
      "Make executable: chmod +x ~/restore-backup.sh",
      "Final summary: AGENT: 'Backup strategy complete!'",
      "AGENT: '✓ Local incremental backups'",
      "AGENT: '✓ Cloud backups'",
      "AGENT: '✓ Compressed archives'",
      "AGENT: '✓ Automated daily at 1 AM'",
      "AGENT: 'Your data is now protected! ✓'"
    ],
    "commands": ["rsync", "rclone", "tar", "crontab", "find", "du", "notify-send", "cat", "chmod"],
    "packages": {
      "debian_ubuntu": ["rsync", "tar", "curl"],
      "arch": ["rsync", "tar", "curl"]
    },
    "related_commands": ["rsync", "tar", "rclone", "duplicity"],
    "complexity": "intermediate",
    "tags": ["backup", "data-protection", "rsync", "cloud", "automation", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_dotfiles_management_001",
    "command": "multiple",
    "scenario": "User: Help me manage configuration files (dotfiles)",
    "problem": "Lost configs after reinstall, want to sync across machines",
    "solution": "Setup dotfiles repository with Git",
    "steps": [
      "USER SAYS: 'I spent hours configuring my system, then lost it all after a reinstall!'",
      "AGENT: 'Let me help you version control your configurations with Git.'",
      "Setup: mkdir ~/dotfiles && cd ~/dotfiles",
      "Init: git init",
      "Copy configs: cp ~/.bashrc ~/.vimrc ~/.gitconfig ~/dotfiles/",
      "Create symlinks: ln -sf ~/dotfiles/.bashrc ~/.bashrc",
      "Commit: git add . && git commit -m 'Initial dotfiles'",
      "Push: git remote add origin https://github.com/user/dotfiles.git && git push -u origin main",
      "AGENT: 'Dotfiles backed up to GitHub! ✓'",
      "Create install script: cat > ~/dotfiles/install.sh << 'EOF'",
      "#!/bin/bash",
      "for file in ~/dotfiles/.*; do",
      "  ln -sf $file ~/$(basename $file)",
      "done",
      "EOF",
      "chmod +x ~/dotfiles/install.sh",
      "AGENT: 'On new machine: clone repo and run install.sh ✓'"
    ],
    "commands": ["git", "cp", "ln", "mkdir", "chmod"],
    "packages": {"debian_ubuntu": ["git"], "arch": ["git"]},
    "related_commands": ["git", "ln", "stow"],
    "complexity": "beginner",
    "tags": ["dotfiles", "git", "configuration", "version-control", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_tmux_productivity_001",
    "command": "multiple",
    "scenario": "User: Want to use tmux for better terminal workflow",
    "problem": "Opening many terminal windows, hard to organize",
    "solution": "Setup tmux with custom configuration",
    "steps": [
      "USER SAYS: 'I have 20 terminal windows open. There must be a better way!'",
      "AGENT: 'Yes! tmux lets you manage multiple terminals in one window.'",
      "Install: sudo apt install tmux || sudo pacman -S tmux",
      "Create config: cat > ~/.tmux.conf << 'EOF'",
      "set -g mouse on",
      "set -g base-index 1",
      "bind | split-window -h",
      "bind - split-window -v",
      "EOF",
      "Start: tmux",
      "AGENT: 'Key commands:'",
      "AGENT: '- Ctrl+b | : split vertically'",
      "AGENT: '- Ctrl+b - : split horizontally'",
      "AGENT: '- Ctrl+b c : new window'",
      "AGENT: '- Ctrl+b d : detach (keeps running)'",
      "Create session: cat > ~/tmux-dev.sh << 'EOF'",
      "#!/bin/bash",
      "tmux new-session -d -s dev",
      "tmux send-keys -t dev 'cd ~/projects' C-m",
      "tmux split-window -h -t dev",
      "tmux send-keys -t dev 'htop' C-m",
      "tmux attach -t dev",
      "EOF",
      "chmod +x ~/tmux-dev.sh",
      "AGENT: 'Development session script created! ✓'"
    ],
    "commands": ["tmux", "cat", "chmod"],
    "packages": {"debian_ubuntu": ["tmux"], "arch": ["tmux"]},
    "related_commands": ["tmux", "screen"],
    "complexity": "beginner",
    "tags": ["tmux", "terminal", "productivity", "multiplexer", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_zsh_oh_my_zsh_001",
    "command": "multiple",
    "scenario": "User: Want better shell with plugins and themes",
    "problem": "Bash is basic, want more features and better UI",
    "solution": "Install Zsh with Oh My Zsh",
    "steps": [
      "USER SAYS: 'My terminal looks boring and has no autocomplete.'",
      "AGENT: 'Let me install Zsh with Oh My Zsh - much better than Bash!'",
      "Install zsh: sudo apt install zsh || sudo pacman -S zsh",
      "Install oh-my-zsh: sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"",
      "Set default: chsh -s $(which zsh)",
      "AGENT: 'Zsh installed! Log out and back in.'",
      "Configure: vim ~/.zshrc",
      "Change theme: sed -i 's/ZSH_THEME=\"robbyrussell\"/ZSH_THEME=\"agnoster\"/' ~/.zshrc",
      "Add plugins: sed -i 's/plugins=(git)/plugins=(git docker kubectl npm)/' ~/.zshrc",
      "Source: source ~/.zshrc",
      "AGENT: 'Features enabled:'",
      "AGENT: '✓ Better autocomplete'",
      "AGENT: '✓ Syntax highlighting'",
      "AGENT: '✓ Git integration'",
      "AGENT: '✓ Beautiful theme'",
      "AGENT: 'Your shell is now awesome! ✓'"
    ],
    "commands": ["zsh", "curl", "chsh", "vim", "sed", "source"],
    "packages": {"debian_ubuntu": ["zsh", "curl"], "arch": ["zsh", "curl"]},
    "related_commands": ["zsh", "bash", "fish"],
    "complexity": "beginner",
    "tags": ["zsh", "oh-my-zsh", "shell", "productivity", "customization", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_vim_setup_001",
    "command": "multiple",
    "scenario": "User: Want to learn and configure Vim",
    "problem": "Vim is confusing, need good configuration",
    "solution": "Setup Vim with useful plugins and configs",
    "steps": [
      "USER SAYS: 'Everyone says Vim is great but I can't even exit it!'",
      "AGENT: 'Haha! Let me teach you Vim and set it up nicely.'",
      "AGENT: 'First, to exit: Press Esc, then type :q and Enter'",
      "Install: sudo apt install vim || sudo pacman -S vim",
      "Create config: cat > ~/.vimrc << 'EOF'",
      "set number",
      "set relativenumber",
      "set autoindent",
      "set tabstop=4",
      "set shiftwidth=4",
      "set smarttab",
      "set mouse=a",
      "syntax on",
      "set clipboard=unnamedplus",
      "EOF",
      "AGENT: 'Basic Vim configuration created.'",
      "Install plugin manager: curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",
      "Add plugins: cat >> ~/.vimrc << 'EOF'",
      "call plug#begin('~/.vim/plugged')",
      "Plug 'preservim/nerdtree'",
      "Plug 'vim-airline/vim-airline'",
      "Plug 'tpope/vim-surround'",
      "call plug#end()",
      "EOF",
      "Install plugins: vim +PlugInstall +qall",
      "AGENT: 'Essential Vim commands:'",
      "AGENT: '- i : enter insert mode'",
      "AGENT: '- Esc : exit insert mode'",
      "AGENT: '- :w : save'",
      "AGENT: '- :q : quit'",
      "AGENT: '- :wq : save and quit'",
      "AGENT: '- dd : delete line'",
      "AGENT: '- yy : copy line'",
      "AGENT: '- p : paste'",
      "AGENT: 'Vim is now configured and ready! ✓'"
    ],
    "commands": ["vim", "curl", "cat"],
    "packages": {"debian_ubuntu": ["vim", "curl"], "arch": ["vim", "curl"]},
    "related_commands": ["vim", "nvim", "nano"],
    "complexity": "beginner",
    "tags": ["vim", "editor", "configuration", "plugins", "productivity", "real-world", "ai-agent"]
  }
]

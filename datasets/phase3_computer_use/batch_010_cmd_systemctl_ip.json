[
  {
    "id": "cmd_systemctl_001",
    "command": "systemctl",
    "scenario": "Service fails to start after system update",
    "problem": "After updating system, critical service (nginx/apache/database) won't start, shows 'failed' status",
    "solution": "Use systemctl to diagnose service failure, check logs, and resolve dependency/configuration issues",
    "steps": [
      "Check service status: systemctl status nginx.service",
      "Look for: Loaded, Active (failed/inactive), Main PID, recent log entries",
      "View full logs: journalctl -u nginx.service -n 50",
      "Check for error messages: 'bind failed', 'permission denied', 'config error'",
      "Common issue 1 - Port already in use: sudo lsof -i :80 or sudo ss -tlnp | grep :80",
      "Kill conflicting process: sudo kill $(sudo lsof -t -i:80)",
      "Common issue 2 - Config syntax error: nginx -t (test config) or apache2ctl configtest",
      "Fix config errors shown, then: sudo systemctl restart nginx",
      "Common issue 3 - Permissions: Check file ownership: ls -l /var/www /etc/nginx",
      "Fix permissions: sudo chown -R www-data:www-data /var/www (Ubuntu) or sudo chown -R http:http /srv/http (Arch)",
      "Common issue 4 - Missing dependencies: Check ExecStart= in service file: systemctl cat nginx.service",
      "Install missing packages: sudo apt install <package> or sudo pacman -S <package>",
      "Common issue 5 - SELinux/AppArmor: Check denials: sudo ausearch -m avc -ts recent or sudo aa-status",
      "Temporarily disable to test: sudo setenforce 0 or sudo aa-complain /etc/apparmor.d/usr.sbin.nginx",
      "View service dependencies: systemctl list-dependencies nginx.service",
      "Check if dependencies failed: systemctl --failed",
      "Force service start: sudo systemctl start nginx.service",
      "Enable on boot if needed: sudo systemctl enable nginx.service",
      "Verify running: systemctl is-active nginx && systemctl is-enabled nginx",
      "If still fails, check system logs: journalctl -xb -p err (all errors since boot)",
      "Reload daemon if service file changed: sudo systemctl daemon-reload"
    ],
    "commands": ["systemctl", "journalctl", "lsof", "ss", "kill", "nginx", "apache2ctl", "ls", "chown", "ausearch", "aa-status", "setenforce", "aa-complain"],
    "packages": {
      "debian_ubuntu": ["systemd", "lsof", "net-tools"],
      "arch": ["systemd", "lsof", "net-tools"]
    },
    "related_commands": ["journalctl", "systemd-analyze", "systemctl", "service"],
    "complexity": "intermediate",
    "tags": ["systemctl", "service-management", "troubleshooting", "systemd", "failed-service"]
  },
  {
    "id": "cmd_systemctl_002",
    "command": "systemctl",
    "scenario": "Disable unnecessary services to improve boot time",
    "problem": "System takes 2+ minutes to boot, want to speed up by disabling unused services",
    "solution": "Analyze boot process, identify slow/unnecessary services, safely disable them",
    "steps": [
      "Check total boot time: systemd-analyze",
      "Shows: Startup finished in XXs (kernel) + XXs (userspace) = XXs",
      "List slow services: systemd-analyze blame | head -20",
      "View critical chain: systemd-analyze critical-chain",
      "Visualize boot: systemd-analyze plot > boot.svg (view in browser)",
      "List all enabled services: systemctl list-unit-files --type=service --state=enabled",
      "Check what each service does before disabling: systemctl cat <service>.service",
      "Safe to disable examples (assess your needs): bluetooth.service (if no Bluetooth), cups.service (if no printer)",
      "ModemManager.service (if no modem), avahi-daemon.service (if no local network discovery)",
      "Check service dependencies before disabling: systemctl list-dependencies <service>.service",
      "Disable service: sudo systemctl disable <service>.service",
      "Stop immediately: sudo systemctl stop <service>.service",
      "Mask service (prevent start): sudo systemctl mask <service>.service",
      "Unmask if needed later: sudo systemctl unmask <service>.service",
      "Don't disable: systemd-* core services, network services you use, display manager",
      "Reboot and check new boot time: sudo reboot then systemd-analyze",
      "If boot broken, boot to rescue mode: Add 'systemd.unit=rescue.target' to kernel line in GRUB",
      "Re-enable service: sudo systemctl enable <service>.service",
      "View all masked services: systemctl list-unit-files --state=masked",
      "Alternative: Delay non-critical services: systemctl edit <service> then add [Service]\\nExecStartPre=/bin/sleep 30"
    ],
    "commands": ["systemd-analyze", "systemctl", "reboot"],
    "packages": {
      "debian_ubuntu": ["systemd"],
      "arch": ["systemd"]
    },
    "related_commands": ["systemd-analyze", "journalctl", "systemctl"],
    "complexity": "intermediate",
    "tags": ["systemctl", "boot-optimization", "performance", "systemd", "service-management"]
  },
  {
    "id": "cmd_journalctl_001",
    "command": "journalctl",
    "scenario": "System crashed, need to find errors in logs from last boot",
    "problem": "System crashed or froze, rebooted, need to see what went wrong",
    "solution": "Use journalctl to view logs from previous boot and find error messages",
    "steps": [
      "View logs from previous boot: journalctl -b -1",
      "-b 0 = current boot, -b -1 = previous boot, -b -2 = two boots ago",
      "List available boots: journalctl --list-boots",
      "Shows boot IDs and timestamps",
      "View specific boot: journalctl -b <boot-id>",
      "Filter by priority - only errors: journalctl -b -1 -p err",
      "Priority levels: emerg(0), alert(1), crit(2), err(3), warning(4), notice(5), info(6), debug(7)",
      "View errors and warnings: journalctl -b -1 -p warning",
      "Follow logs in real-time: journalctl -f (like tail -f)",
      "Specific service logs: journalctl -u <service>.service -b -1",
      "Time range: journalctl --since '2025-10-06 10:00' --until '2025-10-06 11:00'",
      "Or relative: journalctl --since '1 hour ago'",
      "Combine filters: journalctl -b -1 -u nginx.service -p err",
      "View kernel messages: journalctl -k -b -1 (equivalent to dmesg from previous boot)",
      "Look for: 'segfault', 'panic', 'killed process', 'Out of memory', 'error', 'failed'",
      "Export logs: journalctl -b -1 > previous_boot.log",
      "Disk usage: journalctl --disk-usage",
      "Vacuum old logs: sudo journalctl --vacuum-time=7d (keep 7 days) or --vacuum-size=500M",
      "View log locations: ls -lh /var/log/journal/",
      "For persistent logs: sudo mkdir -p /var/log/journal (if doesn't exist)",
      "Edit journald config: sudo nano /etc/systemd/journald.conf - set Storage=persistent"
    ],
    "commands": ["journalctl", "ls", "nano"],
    "packages": {
      "debian_ubuntu": ["systemd"],
      "arch": ["systemd"]
    },
    "related_commands": ["systemctl", "dmesg", "systemd-analyze"],
    "complexity": "intermediate",
    "tags": ["journalctl", "logs", "troubleshooting", "systemd", "crash-analysis"]
  },
  {
    "id": "cmd_ip_001",
    "command": "ip",
    "scenario": "Configure static IP address on network interface",
    "problem": "Need to set static IP instead of DHCP for server or specific network requirements",
    "solution": "Use ip command to configure static IP, then make permanent with network config files",
    "steps": [
      "View current interfaces: ip addr show or ip a",
      "Identify target interface: eth0, enp0s3, wlp2s0, etc.",
      "Check current IP: ip addr show eth0",
      "Take interface down: sudo ip link set eth0 down",
      "Assign static IP: sudo ip addr add 192.168.1.100/24 dev eth0",
      "/24 is subnet mask (255.255.255.0), adjust as needed",
      "Bring interface up: sudo ip link set eth0 up",
      "Add default gateway: sudo ip route add default via 192.168.1.1",
      "Verify IP assigned: ip addr show eth0",
      "Verify route: ip route show",
      "Test connectivity: ping -c 3 192.168.1.1 (gateway) then ping -c 3 8.8.8.8 (internet)",
      "Set DNS: echo 'nameserver 8.8.8.8' | sudo tee /etc/resolv.conf",
      "Note: Changes are temporary! System reboot will reset",
      "Make permanent (Ubuntu with Netplan): sudo nano /etc/netplan/01-netcfg.yaml",
      "Add: network:\\n  version: 2\\n  renderer: networkd\\n  ethernets:\\n    eth0:\\n      addresses:\\n        - 192.168.1.100/24\\n      gateway4: 192.168.1.1\\n      nameservers:\\n        addresses: [8.8.8.8, 8.8.4.4]",
      "Apply netplan: sudo netplan apply",
      "Make permanent (Arch with systemd-networkd): sudo nano /etc/systemd/network/20-wired.network",
      "Add: [Match]\\nName=eth0\\n[Network]\\nAddress=192.168.1.100/24\\nGateway=192.168.1.1\\nDNS=8.8.8.8\\nDNS=8.8.4.4",
      "Enable systemd-networkd: sudo systemctl enable --now systemd-networkd",
      "Alternative (Debian /etc/network/interfaces): auto eth0\\niface eth0 inet static\\n  address 192.168.1.100\\n  netmask 255.255.255.0\\n  gateway 192.168.1.1",
      "Restart networking: sudo systemctl restart networking",
      "Verify persistent: sudo reboot then ip addr show eth0"
    ],
    "commands": ["ip", "ping", "echo", "tee", "nano", "netplan", "systemctl"],
    "packages": {
      "debian_ubuntu": ["iproute2", "netplan.io"],
      "arch": ["iproute2", "systemd"]
    },
    "related_commands": ["ifconfig", "nmcli", "netplan", "systemctl"],
    "complexity": "intermediate",
    "tags": ["ip", "networking", "static-ip", "network-configuration", "ip-address"]
  },
  {
    "id": "cmd_ip_002",
    "command": "ip",
    "scenario": "Troubleshoot network interface that won't come up",
    "problem": "Network interface shows 'DOWN' state, can't connect to network",
    "solution": "Use ip command to diagnose interface state and bring it up",
    "steps": [
      "List all interfaces: ip link show",
      "Look for state: UP or DOWN",
      "Check specific interface: ip link show eth0",
      "If state=DOWN: sudo ip link set eth0 up",
      "Check if now UP: ip link show eth0",
      "Check for IP address: ip addr show eth0",
      "If no IP, try DHCP: sudo dhclient eth0 (Ubuntu) or sudo dhcpcd eth0 (Arch)",
      "Check driver loaded: lspci -k | grep -A 3 Ethernet or lsusb -v (for USB adapters)",
      "Look for 'Kernel driver in use:' line",
      "If no driver: Find hardware: lspci -nn | grep Ethernet (note vendor/device ID)",
      "Search for driver: modinfo <driver-name> or search online for hardware ID",
      "Load driver manually: sudo modprobe <driver-name>",
      "Check dmesg for errors: dmesg | tail -50 | grep eth0",
      "Look for: 'firmware', 'not found', 'error', 'failed to initialize'",
      "Check if NetworkManager interfering: nmcli device status",
      "If managed by NM: nmcli device set eth0 managed yes",
      "Or disable NM management: sudo nano /etc/NetworkManager/NetworkManager.conf, add [keyfile]\\nunmanaged-devices=interface-name:eth0",
      "Check cable: ethtool eth0 | grep 'Link detected'",
      "Should show 'Link detected: yes' if cable connected",
      "Check for module blacklist: cat /etc/modprobe.d/*.conf | grep blacklist",
      "If blacklisted, remove line and: sudo update-initramfs -u (Ubuntu) or sudo mkinitcpio -P (Arch)",
      "Physical check: Try different cable, different port",
      "View kernel ring buffer: dmesg | grep -i 'eth\\|net'",
      "Persistent configuration: Edit /etc/network/interfaces or netplan config to auto-start interface"
    ],
    "commands": ["ip", "dhclient", "dhcpcd", "lspci", "lsusb", "modinfo", "modprobe", "dmesg", "nmcli", "ethtool", "cat", "update-initramfs", "mkinitcpio"],
    "packages": {
      "debian_ubuntu": ["iproute2", "isc-dhcp-client", "pciutils", "usbutils", "kmod", "network-manager", "ethtool"],
      "arch": ["iproute2", "dhcpcd", "pciutils", "usbutils", "kmod", "networkmanager", "ethtool"]
    },
    "related_commands": ["ifconfig", "nmcli", "ethtool", "dmesg", "lspci"],
    "complexity": "advanced",
    "tags": ["ip", "network-troubleshooting", "interface-down", "driver-issues", "networking"]
  }
]

[
  {
    "id": "scenario_dns_resolution_failure_001",
    "command": "dig",
    "scenario": "User: Websites won't load, DNS not working",
    "problem": "Can ping IPs but domain names fail",
    "solution": "Diagnose and fix DNS configuration",
    "steps": [
      "USER SAYS: 'I can\\'t access any websites! They all time out.'",
      "AGENT: 'Let me test your DNS resolution...'",
      "Test DNS: dig google.com",
      "AGENT: 'DNS query timed out!'",
      "AGENT: 'Let\\'s check if it\\'s a DNS issue...'",
      "Ping by IP: ping -c 4 8.8.8.8",
      "AGENT: 'IP ping works! ✓'",
      "AGENT: 'This confirms it\\'s a DNS problem'",
      "Check DNS servers: cat /etc/resolv.conf",
      "AGENT: 'nameserver 192.168.1.1'",
      "AGENT: 'Only one DNS server configured'",
      "Test router DNS: dig @192.168.1.1 google.com",
      "AGENT: 'Router DNS not responding!'",
      "USER: 'Why would router DNS stop working?'",
      "AGENT: 'Common causes: router overload, ISP DNS down, or cache issues'",
      "AGENT: 'Let me add Google DNS as backup...'",
      "Add Google DNS: sudo cat > /etc/resolv.conf << 'EOF'",
      "nameserver 8.8.8.8",
      "nameserver 8.8.4.4",
      "nameserver 192.168.1.1",
      "EOF",
      "AGENT: 'Added Google DNS (8.8.8.8, 8.8.4.4) ✓'",
      "Test again: dig google.com",
      "AGENT: 'DNS working! ✓'",
      "AGENT: 'Query time: 23 msec'",
      "Test browser: curl -I https://google.com",
      "AGENT: 'HTTP/2 200 ✓'",
      "AGENT: 'Websites loading now!'",
      "USER: 'But resolv.conf keeps getting overwritten!'",
      "AGENT: 'NetworkManager is managing it. Let me configure it properly...'",
      "Configure NM: sudo nmcli con mod 'Wired connection 1' ipv4.dns '8.8.8.8,8.8.4.4'",
      "sudo nmcli con mod 'Wired connection 1' ipv4.ignore-auto-dns yes",
      "AGENT: 'Configured NetworkManager to use custom DNS ✓'",
      "Restart connection: sudo nmcli con down 'Wired connection 1' && sudo nmcli con up 'Wired connection 1'",
      "AGENT: 'Connection restarted ✓'",
      "Verify: cat /etc/resolv.conf",
      "AGENT: 'nameserver 8.8.8.8 ✓'",
      "AGENT: 'Custom DNS persists now!'",
      "Create DNS tester: cat > ~/test-dns.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== DNS Diagnostics ==='",
      "echo ''",
      "echo '1. Testing connectivity:'",
      "ping -c 2 8.8.8.8 >/dev/null 2>&1 && echo '✓ Internet connected' || echo '✗ No internet'",
      "echo ''",
      "echo '2. Current DNS servers:'",
      "cat /etc/resolv.conf | grep nameserver",
      "echo ''",
      "echo '3. Testing DNS resolution:'",
      "for domain in google.com github.com cloudflare.com; do",
      "  if dig +short $domain >/dev/null 2>&1; then",
      "    echo \"✓ $domain resolves\"",
      "  else",
      "    echo \"✗ $domain fails\"",
      "  fi",
      "done",
      "echo ''",
      "echo '4. DNS response times:'",
      "for dns in 8.8.8.8 1.1.1.1 192.168.1.1; do",
      "  TIME=$(dig @$dns google.com | grep 'Query time' | awk '{print $4}')",
      "  echo \"$dns: ${TIME}ms\"",
      "done",
      "EOF",
      "chmod +x ~/test-dns.sh",
      "Create DNS switcher: cat > ~/dns-switch.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== DNS Profile Switcher ==='",
      "echo ''",
      "echo '1. Google DNS (8.8.8.8, 8.8.4.4)'",
      "echo '2. Cloudflare DNS (1.1.1.1, 1.0.0.1)'",
      "echo '3. Quad9 DNS (9.9.9.9, 149.112.112.112)'",
      "echo '4. Router DNS (auto)'",
      "read -p 'Choice: ' OPT",
      "CONN=$(nmcli -t -f NAME con show --active | head -1)",
      "case $OPT in",
      "  1) sudo nmcli con mod \"$CONN\" ipv4.dns '8.8.8.8,8.8.4.4' ;;",
      "  2) sudo nmcli con mod \"$CONN\" ipv4.dns '1.1.1.1,1.0.0.1' ;;",
      "  3) sudo nmcli con mod \"$CONN\" ipv4.dns '9.9.9.9,149.112.112.112' ;;",
      "  4) sudo nmcli con mod \"$CONN\" ipv4.dns '' && sudo nmcli con mod \"$CONN\" ipv4.ignore-auto-dns no ;;",
      "esac",
      "sudo nmcli con down \"$CONN\" && sudo nmcli con up \"$CONN\"",
      "echo '✓ DNS updated'",
      "dig google.com | grep 'Query time'",
      "EOF",
      "chmod +x ~/dns-switch.sh",
      "AGENT: 'DNS fixed and tools created! ✓'",
      "AGENT: 'Internet working again ✓'"
    ],
    "commands": ["dig", "nslookup", "nmcli", "ping"],
    "packages": {"debian_ubuntu": ["dnsutils"], "arch": ["bind-tools"]},
    "related_commands": ["dig", "nslookup", "host", "resolvectl"],
    "complexity": "intermediate",
    "tags": ["dns", "network", "troubleshooting", "resolution", "connectivity", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_slow_network_diagnosis_001",
    "command": "iperf3",
    "scenario": "User: Network is extremely slow",
    "problem": "Downloads slow, high latency, buffering",
    "solution": "Diagnose bottlenecks with network testing",
    "steps": [
      "USER SAYS: 'My internet is incredibly slow! It used to be fast.'",
      "AGENT: 'Let me diagnose the network performance...'",
      "Test speed online: curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -",
      "AGENT: 'Download: 2.5 Mbps (should be 100 Mbps!)'",
      "AGENT: 'Upload: 8 Mbps'",
      "AGENT: 'Ping: 45ms (normal: 10-20ms)'",
      "AGENT: 'Definitely slow! Let\\'s find why...'",
      "Check interface: ip link show",
      "AGENT: 'eth0: state UP, mode DEFAULT'",
      "Check speed: ethtool eth0 | grep Speed",
      "AGENT: 'Speed: 100Mb/s'",
      "AGENT: 'Wait! You have gigabit ethernet but negotiated 100Mbps!'",
      "USER: 'How did that happen?'",
      "AGENT: 'Cable issue or switch port. Let me check more...'",
      "Check errors: ip -s link show eth0",
      "AGENT: 'RX errors: 15,234'",
      "AGENT: 'TX errors: 8,901'",
      "AGENT: 'High error count! Bad cable or interference'",
      "Test cable: sudo ethtool eth0",
      "AGENT: 'Link detected: yes'",
      "AGENT: 'Auto-negotiation: on'",
      "AGENT: 'But forcing 100Mbps instead of 1000Mbps'",
      "USER: 'I changed cables - how do I reset?'",
      "AGENT: 'Force re-negotiation...'",
      "Reset interface: sudo ip link set eth0 down && sleep 2 && sudo ip link set eth0 up",
      "AGENT: 'Interface reset ✓'",
      "Check speed again: ethtool eth0 | grep Speed",
      "AGENT: 'Speed: 1000Mb/s ✓'",
      "AGENT: 'Now at gigabit!'",
      "Test speed: curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -",
      "AGENT: 'Download: 95 Mbps ✓'",
      "AGENT: 'Much better!'",
      "USER: 'Still not full speed though'",
      "AGENT: 'Let me check for bandwidth hogs...'",
      "Install nethogs: sudo apt install nethogs || sudo pacman -S nethogs",
      "Monitor: sudo nethogs eth0",
      "AGENT: 'Found it! Process \"steam\" using 70 Mbps'",
      "AGENT: 'Steam downloading in background'",
      "USER: 'Oh! I didn\\'t know that was running'",
      "AGENT: 'Pause it and test again'",
      "Install iperf3: sudo apt install iperf3 || sudo pacman -S iperf3",
      "Test local network: iperf3 -c 192.168.1.1",
      "AGENT: 'Local network: 940 Mbps ✓'",
      "AGENT: 'Internal network perfect!'",
      "Create network monitor: cat > ~/network-monitor.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Network Performance Monitor ==='",
      "echo ''",
      "INTERFACE=${1:-eth0}",
      "echo \"Interface: $INTERFACE\"",
      "echo ''",
      "echo '1. Link Status:'",
      "ethtool $INTERFACE | grep -E 'Speed|Duplex|Link detected'",
      "echo ''",
      "echo '2. Error Statistics:'",
      "ip -s link show $INTERFACE | grep -A 2 -E 'RX:|TX:'",
      "echo ''",
      "echo '3. Current Bandwidth Usage:'",
      "echo 'Press Ctrl+C to stop'",
      "sudo iftop -i $INTERFACE",
      "EOF",
      "chmod +x ~/network-monitor.sh",
      "Create speed tester: cat > ~/test-speed.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Network Speed Test ==='",
      "echo ''",
      "echo 'Testing internet speed...'",
      "speedtest-cli --simple",
      "echo ''",
      "echo 'Testing local network:'",
      "read -p 'Local server IP (or skip): ' SERVER",
      "if [ -n \"$SERVER\" ]; then",
      "  iperf3 -c $SERVER -t 10",
      "fi",
      "EOF",
      "chmod +x ~/test-speed.sh",
      "Install speedtest: sudo apt install speedtest-cli || sudo pacman -S speedtest-cli",
      "AGENT: 'Network diagnostics complete! ✓'",
      "AGENT: 'Issue was: Ethernet negotiated 100Mbps instead of 1000Mbps'",
      "AGENT: 'Solution: Reset interface, now at full speed ✓'"
    ],
    "commands": ["ethtool", "iperf3", "nethogs", "speedtest-cli", "iftop"],
    "packages": {"debian_ubuntu": ["ethtool", "iperf3", "nethogs", "speedtest-cli", "iftop"], "arch": ["ethtool", "iperf3", "nethogs", "speedtest-cli", "iftop"]},
    "related_commands": ["ethtool", "iperf3", "nethogs", "iftop"],
    "complexity": "intermediate",
    "tags": ["network", "performance", "bandwidth", "speed", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_port_already_in_use_001",
    "command": "lsof",
    "scenario": "User: Can't start app, port already in use",
    "problem": "Application fails with 'Address already in use'",
    "solution": "Find and kill process using the port",
    "steps": [
      "USER SAYS: 'My app won\\'t start! Says port 3000 is already in use.'",
      "AGENT: 'Let me find what\\'s using that port...'",
      "Check port: sudo lsof -i :3000",
      "AGENT: 'Found:'",
      "AGENT: 'node    12345  user   TCP *:3000 (LISTEN)'",
      "AGENT: 'A Node.js process (PID 12345) is using port 3000'",
      "USER: 'I thought I closed it!'",
      "AGENT: 'It\\'s still running in background. Let me check...'",
      "Check process: ps aux | grep 12345",
      "AGENT: 'node /home/user/old-project/server.js'",
      "AGENT: 'It\\'s your old project still running!'",
      "Kill process: kill 12345",
      "AGENT: 'Sent TERM signal to process 12345'",
      "Wait: sleep 2",
      "Check again: sudo lsof -i :3000",
      "AGENT: 'Port 3000 now free! ✓'",
      "Try app: npm start",
      "AGENT: 'Server listening on port 3000 ✓'",
      "USER: 'What if it won\\'t die nicely?'",
      "AGENT: 'Force kill with -9...'",
      "Force kill: kill -9 12345",
      "AGENT: 'Process forcefully terminated'",
      "Alternative method: sudo fuser -k 3000/tcp",
      "AGENT: 'This kills any process on port 3000'",
      "USER: 'This happens often. Can I prevent it?'",
      "AGENT: 'Create a port cleanup script...'",
      "Create cleanup: cat > ~/cleanup-port.sh << 'EOF'",
      "#!/bin/bash",
      "PORT=$1",
      "if [ -z \"$PORT\" ]; then",
      "  echo 'Usage: ./cleanup-port.sh <port>'",
      "  exit 1",
      "fi",
      "echo \"Checking port $PORT...\"",
      "PID=$(sudo lsof -t -i:$PORT)",
      "if [ -z \"$PID\" ]; then",
      "  echo \"✓ Port $PORT is free\"",
      "else",
      "  echo \"Process using port $PORT:\"",
      "  ps aux | grep $PID | grep -v grep",
      "  echo ''",
      "  read -p 'Kill this process? (y/n): ' CONFIRM",
      "  if [ \"$CONFIRM\" == 'y' ]; then",
      "    kill $PID",
      "    sleep 2",
      "    if sudo lsof -t -i:$PORT >/dev/null 2>&1; then",
      "      echo 'Process still alive, force killing...'",
      "      kill -9 $PID",
      "    fi",
      "    echo \"✓ Port $PORT freed\"",
      "  fi",
      "fi",
      "EOF",
      "chmod +x ~/cleanup-port.sh",
      "Create port checker: cat > ~/check-ports.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Common Development Ports ==='",
      "echo ''",
      "PORTS=(3000 3001 8000 8080 5000 5432 27017 6379)",
      "for port in \"${PORTS[@]}\"; do",
      "  if sudo lsof -i:$port >/dev/null 2>&1; then",
      "    PROC=$(sudo lsof -i:$port | tail -1 | awk '{print $1, $2}')",
      "    echo \"✗ Port $port: IN USE ($PROC)\"",
      "  else",
      "    echo \"✓ Port $port: FREE\"",
      "  fi",
      "done",
      "EOF",
      "chmod +x ~/check-ports.sh",
      "Create smart starter: cat > ~/start-app.sh << 'EOF'",
      "#!/bin/bash",
      "PORT=${1:-3000}",
      "echo \"Starting app on port $PORT...\"",
      "if sudo lsof -i:$PORT >/dev/null 2>&1; then",
      "  echo \"⚠ Port $PORT already in use!\"",
      "  PID=$(sudo lsof -t -i:$PORT)",
      "  echo \"Killing process $PID...\"",
      "  kill $PID",
      "  sleep 2",
      "fi",
      "echo \"✓ Port $PORT available\"",
      "npm start",
      "EOF",
      "chmod +x ~/start-app.sh",
      "Alternative - netstat: sudo netstat -tlnp | grep :3000",
      "AGENT: 'netstat also shows port usage'",
      "Alternative - ss: sudo ss -tlnp | grep :3000",
      "AGENT: 'ss is the modern replacement for netstat'",
      "AGENT: 'Port management tools created! ✓'",
      "AGENT: 'Use ~/cleanup-port.sh 3000 anytime ✓'"
    ],
    "commands": ["lsof", "fuser", "netstat", "ss", "kill"],
    "packages": {"debian_ubuntu": ["lsof", "psmisc", "net-tools"], "arch": ["lsof", "psmisc", "net-tools"]},
    "related_commands": ["lsof", "fuser", "netstat", "ss"],
    "complexity": "beginner",
    "tags": ["port", "process", "network", "troubleshooting", "development", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_arp_spoofing_detection_001",
    "command": "arp",
    "scenario": "User: Suspicious network activity, possible attack",
    "problem": "Intermittent connection drops, security concern",
    "solution": "Detect ARP spoofing and secure network",
    "steps": [
      "USER SAYS: 'My connection keeps dropping and I see weird behavior!'",
      "AGENT: 'Could be ARP spoofing. Let me check...'",
      "Check ARP table: arp -n",
      "AGENT: 'ARP table:'",
      "AGENT: '192.168.1.1    aa:bb:cc:dd:ee:ff'",
      "AGENT: '192.168.1.100  aa:bb:cc:dd:ee:ff'",
      "AGENT: '⚠️ ALERT! Same MAC for different IPs!'",
      "USER: 'What does that mean?'",
      "AGENT: 'Two devices with same MAC = ARP spoofing attack!'",
      "AGENT: 'Someone is intercepting your traffic'",
      "Watch ARP: sudo arp-scan --interface=eth0 --localnet",
      "AGENT: 'Scanning network...'",
      "AGENT: 'Found duplicate MAC addresses!'",
      "AGENT: '192.168.1.50 is spoofing as router'",
      "USER: 'How do I stop this?'",
      "AGENT: 'First, find the attacker\\'s device...'",
      "Check router: ping 192.168.1.1",
      "Get real MAC: arp -n | grep 192.168.1.1",
      "AGENT: 'Router real MAC: aa:bb:cc:dd:ee:ff'",
      "Set static ARP: sudo arp -s 192.168.1.1 aa:bb:cc:dd:ee:ff",
      "AGENT: 'Created static ARP entry for router ✓'",
      "AGENT: 'This prevents ARP poisoning for gateway'",
      "Install arpwatch: sudo apt install arpwatch || sudo pacman -S arpwatch",
      "AGENT: 'arpwatch monitors for ARP changes ✓'",
      "Configure: sudo systemctl enable --now arpwatch",
      "AGENT: 'ARP monitoring active ✓'",
      "Check logs: sudo tail /var/log/arpwatch.log",
      "AGENT: 'Detected: flip flop from 192.168.1.50'",
      "AGENT: 'Confirmed: 192.168.1.50 is the attacker!'",
      "Block attacker: sudo iptables -A INPUT -s 192.168.1.50 -j DROP",
      "sudo iptables -A OUTPUT -d 192.168.1.50 -j DROP",
      "AGENT: 'Blocked attacker IP ✓'",
      "USER: 'How do I prevent this permanently?'",
      "AGENT: 'Multiple layers of defense...'",
      "Create ARP monitor: cat > ~/arp-monitor.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== ARP Table Monitor ==='",
      "echo ''",
      "PREV_ARP=$(mktemp)",
      "arp -n > $PREV_ARP",
      "echo 'Monitoring ARP table for changes...'",
      "echo 'Press Ctrl+C to stop'",
      "echo ''",
      "while true; do",
      "  CURR_ARP=$(mktemp)",
      "  arp -n > $CURR_ARP",
      "  DIFF=$(diff $PREV_ARP $CURR_ARP)",
      "  if [ -n \"$DIFF\" ]; then",
      "    echo \"[$(date)] ARP table changed:\"",
      "    echo \"$DIFF\"",
      "    # Check for duplicate MACs",
      "    MACS=$(arp -n | awk '{print $3}' | sort | uniq -d)",
      "    if [ -n \"$MACS\" ]; then",
      "      echo \"⚠️ WARNING: Duplicate MAC detected: $MACS\"",
      "      notify-send 'ARP Spoofing Detected!' 'Check network security'",
      "    fi",
      "    echo ''",
      "  fi",
      "  cp $CURR_ARP $PREV_ARP",
      "  sleep 5",
      "done",
      "EOF",
      "chmod +x ~/arp-monitor.sh",
      "Create static ARP script: cat > ~/secure-arp.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Secure ARP Configuration ==='",
      "echo ''",
      "# Get router info",
      "GATEWAY=$(ip route | grep default | awk '{print $3}')",
      "GATEWAY_MAC=$(arp -n $GATEWAY | tail -1 | awk '{print $3}')",
      "echo \"Router: $GATEWAY\"",
      "echo \"Router MAC: $GATEWAY_MAC\"",
      "echo ''",
      "read -p 'Create static ARP entry for router? (y/n): ' CONFIRM",
      "if [ \"$CONFIRM\" == 'y' ]; then",
      "  sudo arp -s $GATEWAY $GATEWAY_MAC",
      "  echo \"✓ Static ARP entry created\"",
      "  echo ''",
      "  echo 'To make permanent, add to /etc/rc.local:'",
      "  echo \"arp -s $GATEWAY $GATEWAY_MAC\"",
      "fi",
      "EOF",
      "chmod +x ~/secure-arp.sh",
      "Configure firewall: sudo ufw enable",
      "sudo ufw default deny incoming",
      "AGENT: 'Firewall enabled for additional protection ✓'",
      "Report to admin: AGENT: 'Tell network admin about attacker at 192.168.1.50'",
      "AGENT: 'They should block it at router/switch level'",
      "Create detection service: sudo cat > /etc/systemd/system/arp-guard.service << 'EOF'",
      "[Unit]",
      "Description=ARP Spoofing Detection",
      "After=network.target",
      "[Service]",
      "ExecStart=/home/user/arp-monitor.sh",
      "Restart=always",
      "[Install]",
      "WantedBy=multi-user.target",
      "EOF",
      "sudo systemctl enable --now arp-guard",
      "AGENT: 'ARP monitoring service installed ✓'",
      "AGENT: 'Security measures in place! ✓'",
      "AGENT: 'You\\'re now protected from ARP spoofing ✓'"
    ],
    "commands": ["arp", "arp-scan", "arpwatch", "iptables"],
    "packages": {"debian_ubuntu": ["net-tools", "arp-scan", "arpwatch"], "arch": ["net-tools", "arp-scan", "arpwatch"]},
    "related_commands": ["arp", "arp-scan", "arpwatch"],
    "complexity": "advanced",
    "tags": ["security", "arp-spoofing", "network", "attack-detection", "defense", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_mtu_problems_001",
    "command": "ping",
    "scenario": "User: Some websites load, others time out",
    "problem": "MTU mismatch causing packet fragmentation",
    "solution": "Diagnose and fix MTU issues",
    "steps": [
      "USER SAYS: 'Weird issue: Google works but my company VPN website times out!'",
      "AGENT: 'Sounds like an MTU issue. Let me investigate...'",
      "Check MTU: ip link show eth0",
      "AGENT: 'eth0: mtu 1500'",
      "AGENT: 'Standard ethernet MTU ✓'",
      "Test with large packet: ping -M do -s 1472 google.com",
      "AGENT: 'Ping successful with 1472 bytes ✓'",
      "Test larger: ping -M do -s 1473 google.com",
      "AGENT: 'Ping failed: Message too long'",
      "AGENT: 'Found it! Path MTU is 1500 (1472 + 28 headers)'",
      "Test VPN site: ping -M do -s 1400 vpn.company.com",
      "AGENT: 'Success with 1400!'",
      "Test 1472: ping -M do -s 1472 vpn.company.com",
      "AGENT: 'Times out! VPN path has lower MTU'",
      "Find optimal MTU: for size in 1500 1400 1300 1200; do echo \"Testing $size:\"; ping -M do -s $((size-28)) -c 1 vpn.company.com && echo \"$size works\" && break; done",
      "AGENT: 'Optimal MTU: 1400'",
      "USER: 'Why is VPN MTU different?'",
      "AGENT: 'VPN encapsulation adds overhead'",
      "AGENT: 'Original packet + VPN headers exceed path MTU'",
      "AGENT: 'Let me fix it...'",
      "Set MTU: sudo ip link set eth0 mtu 1400",
      "AGENT: 'MTU set to 1400 temporarily ✓'",
      "Test VPN: ping vpn.company.com",
      "AGENT: 'VPN responding! ✓'",
      "Test browser: curl -I https://vpn.company.com",
      "AGENT: 'HTTP/2 200 ✓'",
      "AGENT: 'VPN website loading!'",
      "Make permanent: sudo cat >> /etc/network/interfaces << 'EOF'",
      "post-up /sbin/ip link set eth0 mtu 1400",
      "EOF",
      "AGENT: 'MTU will persist across reboots ✓'",
      "For NetworkManager: sudo nmcli con mod 'Wired connection 1' 802-3-ethernet.mtu 1400",
      "sudo nmcli con down 'Wired connection 1' && sudo nmcli con up 'Wired connection 1'",
      "AGENT: 'NetworkManager MTU configured ✓'",
      "Create MTU tester: cat > ~/test-mtu.sh << 'EOF'",
      "#!/bin/bash",
      "TARGET=${1:-google.com}",
      "echo \"=== MTU Path Discovery to $TARGET ===\"",
      "echo ''",
      "for size in 1500 1472 1400 1360 1300 1200; do",
      "  echo -n \"Testing MTU $size: \"",
      "  if ping -M do -s $((size-28)) -c 1 -W 2 $TARGET >/dev/null 2>&1; then",
      "    echo \"✓ Works\"",
      "    echo \"Optimal MTU: $size\"",
      "    break",
      "  else",
      "    echo \"✗ Too large\"",
      "  fi",
      "done",
      "echo ''",
      "echo 'Current interface MTU:'",
      "ip link show | grep mtu",
      "EOF",
      "chmod +x ~/test-mtu.sh",
      "Create MTU fixer: cat > ~/fix-mtu.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== MTU Configuration Tool ==='",
      "echo ''",
      "echo 'Current MTU:'",
      "ip link show | grep mtu",
      "echo ''",
      "read -p 'New MTU value (usually 1400-1500): ' MTU",
      "if [ -z \"$MTU\" ]; then exit; fi",
      "INTERFACE=$(ip route | grep default | awk '{print $5}')",
      "echo \"Setting MTU $MTU on $INTERFACE...\"",
      "sudo ip link set $INTERFACE mtu $MTU",
      "echo '✓ MTU updated'",
      "echo ''",
      "echo 'Testing connectivity:'",
      "ping -c 4 google.com",
      "echo ''",
      "read -p 'Make permanent? (y/n): ' PERM",
      "if [ \"$PERM\" == 'y' ]; then",
      "  CONN=$(nmcli -t -f NAME con show --active | head -1)",
      "  sudo nmcli con mod \"$CONN\" 802-3-ethernet.mtu $MTU",
      "  echo '✓ MTU saved to NetworkManager'",
      "fi",
      "EOF",
      "chmod +x ~/fix-mtu.sh",
      "AGENT: 'MTU fixed! ✓'",
      "AGENT: 'VPN and all websites working now ✓'"
    ],
    "commands": ["ping", "ip", "nmcli"],
    "packages": {"debian_ubuntu": ["iputils-ping", "iproute2"], "arch": ["iputils", "iproute2"]},
    "related_commands": ["ping", "ip", "tracepath"],
    "complexity": "intermediate",
    "tags": ["mtu", "network", "vpn", "troubleshooting", "connectivity", "real-world", "ai-agent"]
  }
]

[
  {
    "id": "cmd_docker_001",
    "command": "docker",
    "scenario": "Run application container from Docker Hub",
    "problem": "Need to quickly run containerized application without local installation",
    "solution": "Use docker to pull and run containers",
    "steps": [
      "Install Docker: sudo apt install docker.io (Ubuntu) or sudo pacman -S docker (Arch)",
      "Start Docker service: sudo systemctl start docker && sudo systemctl enable docker",
      "Check status: systemctl status docker",
      "Add user to docker group: sudo usermod -aG docker $USER",
      "Log out and back in for group to take effect",
      "Or: newgrp docker",
      "Verify installation: docker --version",
      "Test run: docker run hello-world",
      "Downloads and runs test container",
      "Search for image: docker search nginx",
      "Run container: docker run nginx",
      "Runs in foreground, Ctrl+C to stop",
      "Run in background (detached): docker run -d nginx",
      "Returns container ID",
      "With name: docker run -d --name my-nginx nginx",
      "Port mapping: docker run -d -p 8080:80 nginx",
      "Host port 8080 â†’ container port 80",
      "Test: curl http://localhost:8080",
      "Multiple ports: docker run -d -p 8080:80 -p 8443:443 nginx",
      "All ports: docker run -d -P nginx",
      "-P exposes all EXPOSE ports randomly",
      "Environment variables: docker run -d -e MY_VAR=value nginx",
      "Multiple: docker run -d -e VAR1=val1 -e VAR2=val2 nginx",
      "Volume mount: docker run -d -v /host/path:/container/path nginx",
      "Example: docker run -d -v ~/web:/usr/share/nginx/html -p 8080:80 nginx",
      "Serves local files through nginx",
      "Named volume: docker run -d -v my-data:/data nginx",
      "Read-only mount: docker run -d -v ~/web:/usr/share/nginx/html:ro nginx",
      "List running containers: docker ps",
      "All containers: docker ps -a",
      "Includes stopped containers",
      "Stop container: docker stop <container-id>",
      "Or by name: docker stop my-nginx",
      "Start stopped container: docker start my-nginx",
      "Restart container: docker restart my-nginx",
      "Remove container: docker rm <container-id>",
      "Force remove running: docker rm -f my-nginx",
      "View logs: docker logs my-nginx",
      "Follow logs: docker logs -f my-nginx",
      "Last N lines: docker logs --tail 50 my-nginx",
      "With timestamps: docker logs -t my-nginx",
      "Execute command in container: docker exec my-nginx ls /etc",
      "Interactive shell: docker exec -it my-nginx bash",
      "Or: docker exec -it my-nginx sh (if bash not available)",
      "Attach to container: docker attach my-nginx",
      "Container stats: docker stats my-nginx",
      "All containers: docker stats",
      "Inspect container: docker inspect my-nginx",
      "JSON output with all details",
      "View processes: docker top my-nginx",
      "Copy files to container: docker cp file.txt my-nginx:/path/",
      "From container: docker cp my-nginx:/path/file.txt ./",
      "Pull image: docker pull ubuntu:22.04",
      "Specific tag",
      "Latest (default): docker pull nginx",
      "Run with cleanup: docker run --rm nginx",
      "Removes container after exit",
      "Resource limits: docker run -d --memory=512m --cpus=1 nginx",
      "Update existing: docker update --memory=1g --cpus=2 my-nginx",
      "Common images: nginx, ubuntu, alpine, postgres, mysql, redis, python, node",
      "After use: Clean up with docker system prune"
    ],
    "commands": ["docker", "systemctl", "usermod", "curl"],
    "packages": {
      "debian_ubuntu": ["docker.io"],
      "arch": ["docker"]
    },
    "related_commands": ["docker-compose", "podman", "systemctl"],
    "complexity": "intermediate",
    "tags": ["docker", "containers", "docker-run", "containerization", "deployment"]
  },
  {
    "id": "cmd_docker_002",
    "command": "docker",
    "scenario": "Build custom Docker image from Dockerfile",
    "problem": "Need to create containerized application with specific dependencies",
    "solution": "Write Dockerfile and build custom image",
    "steps": [
      "Create Dockerfile: nano Dockerfile",
      "Basic Python example:",
      "FROM python:3.11-slim",
      "WORKDIR /app",
      "COPY requirements.txt .",
      "RUN pip install -r requirements.txt",
      "COPY . .",
      "CMD ['python', 'app.py']",
      "Node.js example:",
      "FROM node:18-alpine",
      "WORKDIR /app",
      "COPY package*.json ./",
      "RUN npm install",
      "COPY . .",
      "EXPOSE 3000",
      "CMD ['node', 'server.js']",
      "Build image: docker build -t my-app:v1.0 .",
      "-t tags image, . is build context (current dir)",
      "Build with no cache: docker build --no-cache -t my-app:v1.0 .",
      "Build with arg: docker build --build-arg VERSION=1.0 -t my-app .",
      "In Dockerfile: ARG VERSION",
      "View images: docker images",
      "Or: docker image ls",
      "Image details: docker inspect my-app:v1.0",
      "History: docker history my-app:v1.0",
      "Shows layers and sizes",
      "Run built image: docker run -d -p 8080:8080 --name app my-app:v1.0",
      "Test application: curl http://localhost:8080",
      "View build logs: docker logs app",
      "Multi-stage build example:",
      "# Build stage",
      "FROM node:18 AS build",
      "WORKDIR /app",
      "COPY package*.json ./",
      "RUN npm install",
      "COPY . .",
      "RUN npm run build",
      "# Production stage",
      "FROM node:18-alpine",
      "WORKDIR /app",
      "COPY --from=build /app/dist ./dist",
      "COPY --from=build /app/node_modules ./node_modules",
      "CMD ['node', 'dist/server.js']",
      "Reduces final image size",
      ".dockerignore file: node_modules\\n.git\\n*.md\\n.env",
      "Excludes from build context",
      "Tag additional version: docker tag my-app:v1.0 my-app:latest",
      "Remove image: docker rmi my-app:v1.0",
      "Force remove: docker rmi -f my-app:v1.0",
      "Save image to file: docker save my-app:v1.0 > my-app.tar",
      "Or: docker save my-app:v1.0 | gzip > my-app.tar.gz",
      "Load image: docker load < my-app.tar",
      "Or: gunzip -c my-app.tar.gz | docker load",
      "Push to Docker Hub: docker login",
      "Tag for registry: docker tag my-app:v1.0 username/my-app:v1.0",
      "Push: docker push username/my-app:v1.0",
      "Private registry: docker tag my-app:v1.0 registry.example.com/my-app:v1.0",
      "Then: docker push registry.example.com/my-app:v1.0",
      "Best practices:",
      "Use specific base image tags (not :latest)",
      "Minimize layers (combine RUN commands with &&)",
      "Use .dockerignore",
      "Multi-stage builds for smaller images",
      "Run as non-root user: USER appuser",
      "Clean up in same layer: RUN apt-get update && apt-get install -y pkg && rm -rf /var/lib/apt/lists/*",
      "Optimize layer caching: COPY dependencies first, code last",
      "Debug build: docker run -it --entrypoint /bin/bash my-app:v1.0",
      "View layer sizes: docker image inspect my-app:v1.0 --format='{{.Size}}'",
      "Analyze image: dive my-app:v1.0 (install dive tool)"
    ],
    "commands": ["docker", "nano", "curl"],
    "packages": {
      "debian_ubuntu": ["docker.io"],
      "arch": ["docker"]
    },
    "related_commands": ["docker-build", "docker-compose", "buildah"],
    "complexity": "intermediate",
    "tags": ["docker", "dockerfile", "build", "docker-image", "containerization", "docker-build"]
  },
  {
    "id": "cmd_docker_003",
    "command": "docker",
    "scenario": "Multi-container application with Docker Compose",
    "problem": "Application needs multiple services (web, database, cache) working together",
    "solution": "Use Docker Compose to orchestrate multi-container setup",
    "steps": [
      "Install Docker Compose: sudo apt install docker-compose (Ubuntu)",
      "Or download: sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose",
      "Make executable: sudo chmod +x /usr/local/bin/docker-compose",
      "Verify: docker-compose --version",
      "Create docker-compose.yml: nano docker-compose.yml",
      "Example LAMP stack:",
      "version: '3.8'",
      "services:",
      "  web:",
      "    image: nginx:latest",
      "    ports:",
      "      - '8080:80'",
      "    volumes:",
      "      - ./html:/usr/share/nginx/html",
      "    depends_on:",
      "      - php",
      "  php:",
      "    image: php:8.1-fpm",
      "    volumes:",
      "      - ./html:/var/www/html",
      "  db:",
      "    image: mysql:8.0",
      "    environment:",
      "      MYSQL_ROOT_PASSWORD: secret",
      "      MYSQL_DATABASE: myapp",
      "    volumes:",
      "      - db-data:/var/lib/mysql",
      "volumes:",
      "  db-data:",
      "WordPress example:",
      "version: '3.8'",
      "services:",
      "  wordpress:",
      "    image: wordpress:latest",
      "    ports:",
      "      - '8080:80'",
      "    environment:",
      "      WORDPRESS_DB_HOST: db",
      "      WORDPRESS_DB_USER: wordpress",
      "      WORDPRESS_DB_PASSWORD: secret",
      "      WORDPRESS_DB_NAME: wordpress",
      "    volumes:",
      "      - ./wp-content:/var/www/html/wp-content",
      "    depends_on:",
      "      - db",
      "  db:",
      "    image: mysql:5.7",
      "    environment:",
      "      MYSQL_DATABASE: wordpress",
      "      MYSQL_USER: wordpress",
      "      MYSQL_PASSWORD: secret",
      "      MYSQL_ROOT_PASSWORD: rootsecret",
      "    volumes:",
      "      - db-data:/var/lib/mysql",
      "volumes:",
      "  db-data:",
      "Start services: docker-compose up",
      "Runs in foreground, shows all logs",
      "Detached mode: docker-compose up -d",
      "Build before starting: docker-compose up --build",
      "View running services: docker-compose ps",
      "View logs: docker-compose logs",
      "Follow logs: docker-compose logs -f",
      "Specific service: docker-compose logs -f web",
      "Stop services: docker-compose stop",
      "Start stopped: docker-compose start",
      "Restart services: docker-compose restart",
      "Stop and remove: docker-compose down",
      "With volumes: docker-compose down -v",
      "Removes named volumes too",
      "Execute command: docker-compose exec web bash",
      "Scale service: docker-compose up -d --scale web=3",
      "Runs 3 instances of web",
      "View config: docker-compose config",
      "Validates and shows resolved config",
      "Build only: docker-compose build",
      "Specific service: docker-compose build web",
      "Pull images: docker-compose pull",
      "Environment variables: Create .env file",
      "DB_PASSWORD=secret",
      "DB_NAME=myapp",
      "In compose: ${DB_PASSWORD}",
      "Override file: docker-compose.override.yml",
      "Automatically merged",
      "Specific file: docker-compose -f docker-compose.prod.yml up",
      "Multiple files: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up",
      "View processes: docker-compose top",
      "Container stats: docker-compose stats",
      "Pause services: docker-compose pause",
      "Unpause: docker-compose unpause",
      "Remove orphans: docker-compose down --remove-orphans",
      "Update service: Edit docker-compose.yml then docker-compose up -d",
      "Recreates only changed services",
      "Force recreate: docker-compose up -d --force-recreate",
      "Troubleshooting:",
      "Service won't start: docker-compose logs <service>",
      "Port conflict: Change port mapping in docker-compose.yml",
      "Permission issues: Check volume mounts and file ownership",
      "After done: docker-compose down -v to clean up"
    ],
    "commands": ["docker-compose", "nano", "curl", "chmod"],
    "packages": {
      "debian_ubuntu": ["docker-compose"],
      "arch": ["docker-compose"]
    },
    "related_commands": ["docker", "docker-swarm", "kubernetes"],
    "complexity": "intermediate",
    "tags": ["docker", "docker-compose", "multi-container", "orchestration", "microservices"]
  },
  {
    "id": "cmd_docker_004",
    "command": "docker",
    "scenario": "Clean up Docker disk space",
    "problem": "Docker consuming too much disk space with old images, containers, and volumes",
    "solution": "Use docker system prune and cleanup commands",
    "steps": [
      "Check Docker disk usage: docker system df",
      "Shows: Images, Containers, Local Volumes, Build Cache",
      "Detailed view: docker system df -v",
      "Remove stopped containers: docker container prune",
      "Asks for confirmation",
      "Force (no prompt): docker container prune -f",
      "Remove unused images: docker image prune",
      "Only dangling images (untagged)",
      "All unused images: docker image prune -a",
      "Remove unused volumes: docker volume prune",
      "Remove unused networks: docker network prune",
      "Remove everything unused: docker system prune",
      "Containers, networks, dangling images",
      "All unused images too: docker system prune -a",
      "Include volumes: docker system prune -a --volumes",
      "DANGEROUS: Removes all unused data",
      "By time filter: docker image prune -a --filter 'until=24h'",
      "Older than 24 hours",
      "Or: --filter 'until=2023-01-01T00:00:00'",
      "List dangling images: docker images -f dangling=true",
      "Remove specific: docker rmi $(docker images -f dangling=true -q)",
      "List all images: docker images",
      "Remove specific image: docker rmi <image-id>",
      "Force remove: docker rmi -f <image-id>",
      "Remove by pattern: docker images | grep 'pattern' | awk '{print $3}' | xargs docker rmi",
      "List stopped containers: docker ps -a -f status=exited",
      "Remove all stopped: docker rm $(docker ps -a -f status=exited -q)",
      "List volumes: docker volume ls",
      "Remove specific: docker volume rm <volume-name>",
      "Remove all unused: docker volume prune",
      "List networks: docker network ls",
      "Remove specific: docker network rm <network-name>",
      "Build cache size: docker system df shows Build Cache",
      "Clear build cache: docker builder prune",
      "All build cache: docker builder prune -a",
      "Logs consuming space: Find large logs: find /var/lib/docker/containers -name '*-json.log' -exec ls -lh {} \\; | sort -k5 -h",
      "Limit log size: In /etc/docker/daemon.json:",
      "{",
      "  'log-driver': 'json-file',",
      "  'log-opts': {",
      "    'max-size': '10m',",
      "    'max-file': '3'",
      "  }",
      "}",
      "Then: sudo systemctl restart docker",
      "Or per container: docker run --log-opt max-size=10m --log-opt max-file=3 nginx",
      "Truncate logs: truncate -s 0 /var/lib/docker/containers/*/*-json.log",
      "Space breakdown:",
      "Check images: docker images --format 'table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}'",
      "Check volumes: docker system df -v | grep 'VOLUME NAME'",
      "Remove old tagged images: docker images | grep 'old-tag' | awk '{print $3}' | xargs docker rmi",
      "Compress image: docker save image | gzip > image.tar.gz",
      "Smaller than docker export",
      "Prevention:",
      "Always use --rm for temporary containers: docker run --rm nginx",
      "Clean build cache regularly",
      "Use multi-stage builds for smaller images",
      "Don't run docker as root (file ownership issues)",
      "Schedule cleanup: Add to cron: 0 3 * * 0 docker system prune -a -f --volumes",
      "Weekly cleanup on Sunday 3 AM",
      "After cleanup: docker system df to verify",
      "Restart Docker: sudo systemctl restart docker (if needed)"
    ],
    "commands": ["docker", "find", "sort", "truncate", "systemctl", "nano", "cron"],
    "packages": {
      "debian_ubuntu": ["docker.io"],
      "arch": ["docker"]
    },
    "related_commands": ["docker-system", "docker-prune", "df", "du"],
    "complexity": "intermediate",
    "tags": ["docker", "cleanup", "disk-space", "maintenance", "docker-prune", "storage"]
  },
  {
    "id": "cmd_docker_005",
    "command": "docker",
    "scenario": "Debug failing container",
    "problem": "Container keeps crashing or not working as expected",
    "solution": "Use Docker debugging commands to diagnose issues",
    "steps": [
      "Check if container running: docker ps",
      "Include stopped: docker ps -a",
      "View logs: docker logs <container-name>",
      "Last N lines: docker logs --tail 50 <container-name>",
      "Follow live: docker logs -f <container-name>",
      "With timestamps: docker logs -t <container-name>",
      "Since time: docker logs --since 2023-01-01T00:00:00 <container-name>",
      "Or relative: docker logs --since 30m <container-name>",
      "Inspect container: docker inspect <container-name>",
      "Get specific info: docker inspect <container-name> | grep IPAddress",
      "Or: docker inspect -f '{{.NetworkSettings.IPAddress}}' <container-name>",
      "Exit code: docker inspect -f '{{.State.ExitCode}}' <container-name>",
      "Common exit codes: 0=success, 1=app error, 137=SIGKILL (out of memory), 139=SIGSEGV (segfault)",
      "Container stats: docker stats <container-name>",
      "CPU, memory, network, disk I/O",
      "Resource limits: docker inspect -f '{{.HostConfig.Memory}}' <container-name>",
      "Enter running container: docker exec -it <container-name> bash",
      "Or: docker exec -it <container-name> sh (if bash unavailable)",
      "Check processes: docker top <container-name>",
      "Run health check: docker exec <container-name> curl http://localhost:8080/health",
      "Or: docker exec <container-name> wget -qO- http://localhost:8080",
      "Network connectivity: docker exec <container-name> ping -c 3 google.com",
      "DNS resolution: docker exec <container-name> nslookup google.com",
      "Port mapping: docker port <container-name>",
      "Test from host: curl http://localhost:8080",
      "Or: netstat -tlnp | grep 8080 or ss -tlnp | grep 8080",
      "View environment: docker exec <container-name> env",
      "File system: docker exec <container-name> ls -la /app",
      "Check file: docker exec <container-name> cat /etc/config.conf",
      "Disk usage: docker exec <container-name> df -h",
      "Copy file out: docker cp <container-name>:/app/log.txt ./",
      "Copy file in: docker cp config.txt <container-name>:/etc/",
      "Container differences: docker diff <container-name>",
      "Shows file changes since image",
      "Restart container: docker restart <container-name>",
      "Start with shell: docker run -it --entrypoint /bin/bash image-name",
      "Override command: docker run -it image-name /bin/sh",
      "Run as root: docker exec -it -u root <container-name> bash",
      "Useful for debugging permission issues",
      "Network issues: Check network: docker network ls",
      "Inspect network: docker network inspect bridge",
      "Connect to network: docker network connect my-network <container-name>",
      "Disconnect: docker network disconnect my-network <container-name>",
      "Volume issues: List volumes: docker volume ls",
      "Inspect volume: docker volume inspect <volume-name>",
      "Check mount: docker inspect -f '{{.Mounts}}' <container-name>",
      "Image issues: Check image: docker image inspect <image-name>",
      "Image history: docker history <image-name>",
      "Rebuild image: docker build --no-cache -t <image-name> .",
      "Memory issues: Check limits: docker stats --no-stream <container-name>",
      "Check OOM kills: dmesg | grep -i 'out of memory'",
      "Increase memory: docker update --memory=1g <container-name>",
      "Or recreate: docker run -m 1g image-name",
      "Events: docker events --filter container=<container-name>",
      "Real-time container events",
      "Export filesystem: docker export <container-name> > container.tar",
      "Commit changes: docker commit <container-name> debug-image",
      "Creates new image from container",
      "Compare with working container: docker inspect working-container > working.json && docker inspect broken-container > broken.json && diff working.json broken.json",
      "Common issues:",
      "Port already in use: docker ps | grep :8080 then stop conflicting container",
      "Permission denied: Check volume mounts, file ownership",
      "Connection refused: Check port mapping, firewall rules",
      "Container exits immediately: Check logs, entrypoint, command",
      "Out of memory: Check stats, increase memory limit",
      "After debugging: Remove failed container: docker rm <container-name>"
    ],
    "commands": ["docker", "curl", "netstat", "ss", "dmesg", "diff"],
    "packages": {
      "debian_ubuntu": ["docker.io"],
      "arch": ["docker"]
    },
    "related_commands": ["docker-logs", "docker-exec", "docker-inspect", "docker-stats"],
    "complexity": "advanced",
    "tags": ["docker", "debugging", "troubleshooting", "docker-logs", "container-debugging", "diagnostics"]
  }
]

[
  {
    "id": "scenario_ansible_playbook_server_setup_101",
    "command": "ansible",
    "scenario": "Create Ansible playbook to automate complete server configuration from bare OS to production-ready.",
    "problem": "A team manually configures dozens of servers: installing packages, creating users, configuring firewalls, deploying applications. This takes hours per server and is error-prone. They need automated, repeatable server provisioning.",
    "solution": "Write an Ansible playbook that handles all configuration steps: system updates, package installation, user management, security hardening, application deployment. Make it idempotent and reusable across multiple servers.",
    "steps": [
      "USER SAYS: 'I spend days setting up new servers manually. How can I automate the entire process so new servers are production-ready in minutes?'",
      "AGENT: 'Ansible is perfect for this! It's an automation tool that lets you describe your server's desired state in YAML, then automatically configures servers to match. Let me show you how to create a complete server provisioning playbook.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: Ansible playbook best practices...'",
      "AGENT: '[Searching] \"ansible playbook server provisioning best practices\"'",
      "AGENT: '[Found] Playbooks are YAML files that define tasks to execute on remote servers.'",
      "AGENT: '[Found] Use roles to organize tasks by function (users, firewall, app, etc.).'",
      "AGENT: '[Found] Ansible is idempotent - safe to run multiple times, only changes what's needed.'",
      "AGENT: '[Found] Use variables and templates for reusability across environments.'",
      "AGENT: '✓ Research complete! Let's build a production-ready playbook.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Create Project Structure ---'",
      "Run command: `mkdir -p ansible-server-setup/{roles/{common,security,webserver}/tasks,group_vars,inventory}`",
      "Run command: `cd ansible-server-setup`",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Create Inventory File ---'",
      "Create tool: `cat > inventory/hosts << 'EOF'`",
      "[webservers]\nweb1 ansible_host=192.168.1.101 ansible_user=root\nweb2 ansible_host=192.168.1.102 ansible_user=root\n\n[databases]\ndb1 ansible_host=192.168.1.201 ansible_user=root\n\n[all:vars]\nansible_python_interpreter=/usr/bin/python3\nEOF",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Create Group Variables ---'",
      "Create tool: `cat > group_vars/all.yml << 'EOF'`",
      "---\n# Users to create\nadmin_users:\n  - username: deploy\n    ssh_key: \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAbCdEfGhIjKlMnOpQrStUvWxYz deploy@example.com\"\n  - username: monitor\n    ssh_key: \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBbCdEfGhIjKlMnOpQrStUvWxYz monitor@example.com\"\n\n# Packages to install\ncommon_packages:\n  - vim\n  - htop\n  - curl\n  - wget\n  - git\n  - tmux\n  - ncdu\n\n# Security settings\nssh_port: 22\nallow_ssh_password_auth: false\nallow_root_ssh: false\n\n# Firewall allowed ports\nfirewall_allowed_ports:\n  - 22    # SSH\n  - 80    # HTTP\n  - 443   # HTTPS\nEOF",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Create Common Role Tasks ---'",
      "Create tool: `cat > roles/common/tasks/main.yml << 'EOF'`",
      "---\n- name: Update apt cache\n  apt:\n    update_cache: yes\n    cache_valid_time: 3600\n  when: ansible_os_family == \"Debian\"\n\n- name: Upgrade all packages\n  apt:\n    upgrade: dist\n    autoremove: yes\n  when: ansible_os_family == \"Debian\"\n\n- name: Install common packages\n  apt:\n    name: \"{{ common_packages }}\"\n    state: present\n  when: ansible_os_family == \"Debian\"\n\n- name: Set timezone to UTC\n  timezone:\n    name: UTC\n\n- name: Configure NTP\n  apt:\n    name: chrony\n    state: present\n  notify: restart chrony\n\n- name: Ensure chrony is running\n  service:\n    name: chrony\n    state: started\n    enabled: yes\n\n- name: Create admin users\n  user:\n    name: \"{{ item.username }}\"\n    shell: /bin/bash\n    groups: sudo\n    append: yes\n    create_home: yes\n  loop: \"{{ admin_users }}\"\n\n- name: Add SSH keys for admin users\n  authorized_key:\n    user: \"{{ item.username }}\"\n    key: \"{{ item.ssh_key }}\"\n    state: present\n  loop: \"{{ admin_users }}\"\n\n- name: Set up bash aliases\n  lineinfile:\n    path: \"/home/{{ item.username }}/.bashrc\"\n    line: \"alias ll='ls -lah'\"\n    state: present\n  loop: \"{{ admin_users }}\"\nEOF",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Create Security Role Tasks ---'",
      "Create tool: `cat > roles/security/tasks/main.yml << 'EOF'`",
      "---\n- name: Install fail2ban\n  apt:\n    name: fail2ban\n    state: present\n\n- name: Configure fail2ban for SSH\n  copy:\n    dest: /etc/fail2ban/jail.local\n    content: |\n      [sshd]\n      enabled = true\n      port = {{ ssh_port }}\n      filter = sshd\n      logpath = /var/log/auth.log\n      maxretry = 3\n      bantime = 3600\n  notify: restart fail2ban\n\n- name: Ensure fail2ban is running\n  service:\n    name: fail2ban\n    state: started\n    enabled: yes\n\n- name: Configure SSH daemon\n  lineinfile:\n    path: /etc/ssh/sshd_config\n    regexp: \"{{ item.regexp }}\"\n    line: \"{{ item.line }}\"\n    state: present\n  loop:\n    - { regexp: '^PermitRootLogin', line: 'PermitRootLogin {{ \"yes\" if allow_root_ssh else \"no\" }}' }\n    - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication {{ \"yes\" if allow_ssh_password_auth else \"no\" }}' }\n    - { regexp: '^Port', line: 'Port {{ ssh_port }}' }\n    - { regexp: '^PermitEmptyPasswords', line: 'PermitEmptyPasswords no' }\n    - { regexp: '^X11Forwarding', line: 'X11Forwarding no' }\n  notify: restart sshd\n\n- name: Install UFW firewall\n  apt:\n    name: ufw\n    state: present\n\n- name: Configure UFW default policies\n  ufw:\n    direction: \"{{ item.direction }}\"\n    policy: \"{{ item.policy }}\"\n  loop:\n    - { direction: 'incoming', policy: 'deny' }\n    - { direction: 'outgoing', policy: 'allow' }\n\n- name: Allow firewall ports\n  ufw:\n    rule: allow\n    port: \"{{ item }}\"\n    proto: tcp\n  loop: \"{{ firewall_allowed_ports }}\"\n\n- name: Enable UFW\n  ufw:\n    state: enabled\n\n- name: Install and configure unattended-upgrades\n  apt:\n    name: unattended-upgrades\n    state: present\n\n- name: Enable automatic security updates\n  copy:\n    dest: /etc/apt/apt.conf.d/50unattended-upgrades\n    content: |\n      Unattended-Upgrade::Allowed-Origins {\n          \"${distro_id}:${distro_codename}-security\";\n      };\n      Unattended-Upgrade::AutoFixInterruptedDpkg \"true\";\n      Unattended-Upgrade::Remove-Unused-Dependencies \"true\";\n      Unattended-Upgrade::Automatic-Reboot \"false\";\nEOF",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Create Webserver Role Tasks ---'",
      "Create tool: `cat > roles/webserver/tasks/main.yml << 'EOF'`",
      "---\n- name: Install Nginx\n  apt:\n    name: nginx\n    state: present\n\n- name: Create web root directory\n  file:\n    path: /var/www/myapp\n    state: directory\n    owner: www-data\n    group: www-data\n    mode: '0755'\n\n- name: Deploy Nginx site configuration\n  copy:\n    dest: /etc/nginx/sites-available/myapp\n    content: |\n      server {\n          listen 80;\n          server_name {{ ansible_fqdn }};\n          root /var/www/myapp;\n          index index.html;\n          \n          location / {\n              try_files $uri $uri/ =404;\n          }\n      }\n  notify: reload nginx\n\n- name: Enable site configuration\n  file:\n    src: /etc/nginx/sites-available/myapp\n    dest: /etc/nginx/sites-enabled/myapp\n    state: link\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Ensure Nginx is running\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Deploy sample index.html\n  copy:\n    dest: /var/www/myapp/index.html\n    content: |\n      <!DOCTYPE html>\n      <html>\n      <head><title>Server {{ ansible_hostname }}</title></head>\n      <body>\n          <h1>Server {{ ansible_hostname }} is running!</h1>\n          <p>Configured with Ansible at {{ ansible_date_time.iso8601 }}</p>\n      </body>\n      </html>\n    owner: www-data\n    group: www-data\n    mode: '0644'\nEOF",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Create Handler File ---'",
      "Create tool: `cat > roles/common/handlers/main.yml << 'EOF'`",
      "---\n- name: restart chrony\n  service:\n    name: chrony\n    state: restarted\nEOF",
      "AGENT: ''",
      "Create tool: `cat > roles/security/handlers/main.yml << 'EOF'`",
      "---\n- name: restart fail2ban\n  service:\n    name: fail2ban\n    state: restarted\n\n- name: restart sshd\n  service:\n    name: sshd\n    state: restarted\nEOF",
      "AGENT: ''",
      "Create tool: `cat > roles/webserver/handlers/main.yml << 'EOF'`",
      "---\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\nEOF",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Create Main Playbook ---'",
      "Create tool: `cat > site.yml << 'EOF'`",
      "---\n- name: Configure all servers\n  hosts: all\n  become: yes\n  roles:\n    - common\n    - security\n\n- name: Configure web servers\n  hosts: webservers\n  become: yes\n  roles:\n    - webserver\nEOF",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Test Playbook Syntax ---'",
      "Run command: `ansible-playbook site.yml --syntax-check`",
      "AGENT: 'playbook: site.yml'",
      "AGENT: ''",
      "AGENT: '✅ Syntax is valid!'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Run Playbook in Dry-Run Mode ---'",
      "Run command: `ansible-playbook -i inventory/hosts site.yml --check`",
      "AGENT: ''",
      "AGENT: 'PLAY [Configure all servers] ***************************************'",
      "AGENT: ''",
      "AGENT: 'TASK [common : Update apt cache] ***********************************'",
      "AGENT: 'changed: [web1]'",
      "AGENT: 'changed: [web2]'",
      "AGENT: ''",
      "AGENT: 'TASK [common : Install common packages] ****************************'",
      "AGENT: 'changed: [web1] => (item=vim)'",
      "AGENT: 'changed: [web2] => (item=vim)'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: 'PLAY RECAP *********************************************************'",
      "AGENT: 'web1                   : ok=25   changed=20   unreachable=0    failed=0'",
      "AGENT: 'web2                   : ok=25   changed=20   unreachable=0    failed=0'",
      "AGENT: ''",
      "AGENT: '--- Approach 11: Execute Playbook ---'",
      "Run command: `ansible-playbook -i inventory/hosts site.yml`",
      "AGENT: ''",
      "AGENT: 'PLAY [Configure all servers] ***************************************'",
      "AGENT: ''",
      "AGENT: 'TASK [Gathering Facts] *********************************************'",
      "AGENT: 'ok: [web1]'",
      "AGENT: 'ok: [web2]'",
      "AGENT: ''",
      "AGENT: 'TASK [common : Update apt cache] ***********************************'",
      "AGENT: 'changed: [web1]'",
      "AGENT: 'changed: [web2]'",
      "AGENT: ''",
      "AGENT: 'TASK [common : Upgrade all packages] *******************************'",
      "AGENT: 'changed: [web1]'",
      "AGENT: 'changed: [web2]'",
      "AGENT: ''",
      "AGENT: '[... 45 more tasks ...]'",
      "AGENT: ''",
      "AGENT: 'RUNNING HANDLER [security : restart sshd] **************************'",
      "AGENT: 'changed: [web1]'",
      "AGENT: 'changed: [web2]'",
      "AGENT: ''",
      "AGENT: 'RUNNING HANDLER [webserver : reload nginx] *************************'",
      "AGENT: 'changed: [web1]'",
      "AGENT: 'changed: [web2]'",
      "AGENT: ''",
      "AGENT: 'PLAY RECAP *********************************************************'",
      "AGENT: 'web1                   : ok=48   changed=38   unreachable=0    failed=0    skipped=3    rescued=0'",
      "AGENT: 'web2                   : ok=48   changed=38   unreachable=0    failed=0    skipped=3    rescued=0'",
      "AGENT: ''",
      "AGENT: '✅ Both servers configured successfully in 3 minutes 42 seconds!'",
      "AGENT: ''",
      "AGENT: '--- Approach 12: Verify Configuration ---'",
      "Run command: `ansible webservers -i inventory/hosts -m shell -a 'curl -s localhost | head -5'`",
      "AGENT: 'web1 | CHANGED | rc=0 >>'",
      "AGENT: '<!DOCTYPE html>'",
      "AGENT: '<html>'",
      "AGENT: '<head><title>Server web1</title></head>'",
      "AGENT: '<body>'",
      "AGENT: '    <h1>Server web1 is running!</h1>'",
      "AGENT: ''",
      "AGENT: 'web2 | CHANGED | rc=0 >>'",
      "AGENT: '<!DOCTYPE html>'",
      "AGENT: '<html>'",
      "AGENT: '<head><title>Server web2</title></head>'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '✅ Web servers are serving content!'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Run Again (Idempotency Test) ---'",
      "Run command: `ansible-playbook -i inventory/hosts site.yml`",
      "AGENT: ''",
      "AGENT: 'PLAY RECAP *********************************************************'",
      "AGENT: 'web1                   : ok=48   changed=0    unreachable=0    failed=0'",
      "AGENT: 'web2                   : ok=48   changed=0    unreachable=0    failed=0'",
      "AGENT: ''",
      "AGENT: '✅ Perfect! Zero changes - playbook is idempotent!'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Created complete Ansible project with roles for common, security, and webserver configuration.'",
      "AGENT: '  ✓ Automated system updates, package installation, user creation, SSH key deployment.'",
      "AGENT: '  ✓ Implemented security hardening: fail2ban, UFW firewall, SSH hardening, automatic updates.'",
      "AGENT: '  ✓ Deployed and configured Nginx web server with custom site.'",
      "AGENT: '  ✓ Used variables for reusability across environments.'",
      "AGENT: '  ✓ Implemented handlers for service restarts only when needed.'",
      "AGENT: '  ✓ Verified idempotency - safe to run repeatedly.'",
      "AGENT: '  ✓ Configured 2 servers from bare OS to production-ready in under 4 minutes! 🚀'"
    ],
    "commands": ["mkdir", "cd", "cat", "ansible-playbook", "ansible"],
    "packages": {
      "debian_ubuntu": ["ansible"],
      "arch": ["ansible"]
    },
    "related_commands": ["ansible-galaxy", "ansible-vault", "ansible-inventory"],
    "complexity": "advanced",
    "tags": ["ansible", "automation", "configuration-management", "devops", "infrastructure-as-code", "idempotency", "server-provisioning"]
  }
]

[
  {
    "id": "scenario_python_api_automation_157",
    "command": "python",
    "scenario": "Automate API interactions with Python - GitHub, REST APIs, webhooks, and data fetching.",
    "problem": "Need to interact with APIs programmatically, fetch data from REST endpoints, automate GitHub operations (create repos, PRs, issues), handle authentication, parse JSON responses, implement rate limiting, and build API clients without manual curl commands.",
    "solution": "Use Python's requests library for HTTP operations, handle authentication headers, parse JSON responses, implement error handling and retries, paginate through results, and create reusable API wrapper classes.",
    "steps": [
      "USER SAYS: 'I need to fetch data from an API and create GitHub issues automatically. How can I automate this?'",
      "AGENT: 'Let me show you API automation with Python! We'll use the requests library to interact with APIs efficiently.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: API automation...'",
      "AGENT: '[Searching] \"python requests api authentication json github api\"'",
      "AGENT: '[Found] requests library for HTTP operations.'",
      "AGENT: '[Found] Authentication via headers or OAuth tokens.'",
      "AGENT: '[Found] GitHub API for programmatic repo management.'",
      "AGENT: '[Found] Rate limiting and retry strategies.'",
      "AGENT: '✓ Research complete! Let\\'s automate those APIs.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Basic API Request ---'",
      "AGENT: ''",
      "Run command: `pip3 install requests`",
      "AGENT: ''",
      "Create tool: `cat > api_basic.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport requests\nimport json\n\ndef fetch_data(url):\n    \"\"\"Make a simple GET request to an API.\"\"\"\n    print(f\"Fetching data from: {url}\\n\")\n    \n    response = requests.get(url)\n    \n    # Check if request was successful\n    if response.status_code == 200:\n        data = response.json()\n        print(\"Success!\\n\")\n        print(json.dumps(data, indent=2))\n        return data\n    else:\n        print(f\"Error: {response.status_code}\")\n        print(response.text)\n        return None\n\nif __name__ == \"__main__\":\n    # Example: Fetch user data from JSONPlaceholder (test API)\n    url = \"https://jsonplaceholder.typicode.com/users/1\"\n    data = fetch_data(url)\nEOF",
      "AGENT: ''",
      "Run command: `python3 api_basic.py`",
      "AGENT: 'Fetching data from: https://jsonplaceholder.typicode.com/users/1'",
      "AGENT: ''",
      "AGENT: 'Success!'",
      "AGENT: ''",
      "AGENT: '{'",
      "AGENT: '  \"id\": 1,'",
      "AGENT: '  \"name\": \"Leanne Graham\",'",
      "AGENT: '  \"username\": \"Bret\",'",
      "AGENT: '  \"email\": \"[email protected]\",'",
      "AGENT: '  ...'",
      "AGENT: '}'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: GitHub API - List Repositories ---'",
      "AGENT: ''",
      "Create tool: `cat > github_list_repos.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport requests\nimport os\n\ndef list_repos(username, token=None):\n    \"\"\"List all repositories for a GitHub user.\"\"\"\n    url = f\"https://api.github.com/users/{username}/repos\"\n    \n    headers = {}\n    if token:\n        headers['Authorization'] = f\"token {token}\"\n    \n    response = requests.get(url, headers=headers)\n    \n    if response.status_code == 200:\n        repos = response.json()\n        print(f\"Repositories for {username}:\\n\")\n        \n        for repo in repos:\n            print(f\"  • {repo['name']}\")\n            print(f\"    Stars: {repo['stargazers_count']}\")\n            print(f\"    URL: {repo['html_url']}\")\n            print()\n        \n        return repos\n    else:\n        print(f\"Error: {response.status_code}\")\n        print(response.json())\n        return None\n\nif __name__ == \"__main__\":\n    import sys\n    \n    if len(sys.argv) < 2:\n        print(\"Usage: python3 github_list_repos.py <username>\")\n        sys.exit(1)\n    \n    username = sys.argv[1]\n    token = os.environ.get('GITHUB_TOKEN')  # Optional\n    \n    list_repos(username, token)\nEOF",
      "AGENT: ''",
      "Run command: `python3 github_list_repos.py torvalds`",
      "AGENT: 'Repositories for torvalds:'",
      "AGENT: ''",
      "AGENT: '  • linux'",
      "AGENT: '    Stars: 156234'",
      "AGENT: '    URL: https://github.com/torvalds/linux'",
      "AGENT: ''",
      "AGENT: '  • subsurface'",
      "AGENT: '    Stars: 2456'",
      "AGENT: '    URL: https://github.com/torvalds/subsurface'",
      "AGENT: ''",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Create GitHub Issue ---'",
      "AGENT: ''",
      "Create tool: `cat > github_create_issue.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport requests\nimport os\nimport sys\n\ndef create_issue(owner, repo, title, body, token):\n    \"\"\"Create a new GitHub issue.\"\"\"\n    url = f\"https://api.github.com/repos/{owner}/{repo}/issues\"\n    \n    headers = {\n        'Authorization': f\"token {token}\",\n        'Accept': 'application/vnd.github.v3+json'\n    }\n    \n    data = {\n        'title': title,\n        'body': body\n    }\n    \n    print(f\"Creating issue in {owner}/{repo}...\\n\")\n    \n    response = requests.post(url, headers=headers, json=data)\n    \n    if response.status_code == 201:\n        issue = response.json()\n        print(\"✓ Issue created successfully!\")\n        print(f\"\\nIssue #{issue['number']}: {issue['title']}\")\n        print(f\"URL: {issue['html_url']}\")\n        return issue\n    else:\n        print(f\"✗ Error: {response.status_code}\")\n        print(response.json())\n        return None\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 4:\n        print(\"Usage: python3 github_create_issue.py <owner> <repo> <title>\")\n        print(\"Set GITHUB_TOKEN environment variable first!\")\n        sys.exit(1)\n    \n    owner = sys.argv[1]\n    repo = sys.argv[2]\n    title = sys.argv[3]\n    body = \"This issue was created automatically via GitHub API.\"\n    \n    token = os.environ.get('GITHUB_TOKEN')\n    if not token:\n        print(\"Error: GITHUB_TOKEN not set\")\n        sys.exit(1)\n    \n    create_issue(owner, repo, title, body, token)\nEOF",
      "AGENT: ''",
      "AGENT: 'Set your GitHub token:'",
      "Run command: `export GITHUB_TOKEN='your_token_here'`",
      "AGENT: ''",
      "Run command: `python3 github_create_issue.py myuser myrepo 'Bug: App crashes on startup'`",
      "AGENT: 'Creating issue in myuser/myrepo...'",
      "AGENT: ''",
      "AGENT: '✓ Issue created successfully!'",
      "AGENT: ''",
      "AGENT: 'Issue #42: Bug: App crashes on startup'",
      "AGENT: 'URL: https://github.com/myuser/myrepo/issues/42'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: API with Pagination ---'",
      "AGENT: ''",
      "Create tool: `cat > api_paginate.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport requests\n\ndef fetch_all_pages(base_url, headers=None, per_page=100):\n    \"\"\"Fetch all pages from a paginated API.\"\"\"\n    all_items = []\n    page = 1\n    \n    while True:\n        url = f\"{base_url}?per_page={per_page}&page={page}\"\n        print(f\"Fetching page {page}...\")\n        \n        response = requests.get(url, headers=headers or {})\n        \n        if response.status_code != 200:\n            print(f\"Error: {response.status_code}\")\n            break\n        \n        items = response.json()\n        \n        if not items:\n            break\n        \n        all_items.extend(items)\n        page += 1\n        \n        # Check if there are more pages\n        if 'Link' in response.headers:\n            links = response.headers['Link']\n            if 'rel=\"next\"' not in links:\n                break\n        else:\n            break\n    \n    print(f\"\\nFetched {len(all_items)} total items across {page-1} pages\")\n    return all_items\n\nif __name__ == \"__main__\":\n    # Example: Fetch all repos for a user (paginated)\n    url = \"https://api.github.com/users/microsoft/repos\"\n    repos = fetch_all_pages(url)\n    \n    print(f\"\\nFound {len(repos)} repositories\")\nEOF",
      "AGENT: ''",
      "Run command: `python3 api_paginate.py`",
      "AGENT: 'Fetching page 1...'",
      "AGENT: 'Fetching page 2...'",
      "AGENT: 'Fetching page 3...'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: 'Fetched 234 total items across 3 pages'",
      "AGENT: ''",
      "AGENT: 'Found 234 repositories'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: API with Retry Logic ---'",
      "AGENT: ''",
      "Create tool: `cat > api_retry.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport requests\nimport time\nfrom functools import wraps\n\ndef retry_on_failure(max_retries=3, delay=1, backoff=2):\n    \"\"\"Decorator to retry API calls on failure.\"\"\"\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            retries = 0\n            current_delay = delay\n            \n            while retries < max_retries:\n                try:\n                    response = func(*args, **kwargs)\n                    \n                    # Success\n                    if response.status_code == 200:\n                        return response\n                    \n                    # Rate limited (429) - wait and retry\n                    if response.status_code == 429:\n                        retry_after = int(response.headers.get('Retry-After', current_delay))\n                        print(f\"Rate limited. Waiting {retry_after}s...\")\n                        time.sleep(retry_after)\n                    else:\n                        print(f\"Error {response.status_code}. Retrying in {current_delay}s...\")\n                        time.sleep(current_delay)\n                    \n                    retries += 1\n                    current_delay *= backoff\n                    \n                except requests.RequestException as e:\n                    print(f\"Request failed: {e}. Retrying in {current_delay}s...\")\n                    time.sleep(current_delay)\n                    retries += 1\n                    current_delay *= backoff\n            \n            print(f\"Failed after {max_retries} retries\")\n            return None\n        \n        return wrapper\n    return decorator\n\n@retry_on_failure(max_retries=3, delay=1, backoff=2)\ndef fetch_with_retry(url, headers=None):\n    \"\"\"Fetch data with automatic retries.\"\"\"\n    return requests.get(url, headers=headers or {})\n\nif __name__ == \"__main__\":\n    url = \"https://api.github.com/rate_limit\"\n    response = fetch_with_retry(url)\n    \n    if response:\n        data = response.json()\n        print(\"Rate limit info:\")\n        print(f\"  Remaining: {data['rate']['remaining']}/{data['rate']['limit']}\")\nEOF",
      "AGENT: ''",
      "Run command: `python3 api_retry.py`",
      "AGENT: 'Rate limit info:'",
      "AGENT: '  Remaining: 58/60'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: POST Data to API ---'",
      "AGENT: ''",
      "Create tool: `cat > api_post_data.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport requests\nimport json\n\ndef create_resource(url, data, headers=None):\n    \"\"\"POST data to create a new resource.\"\"\"\n    print(f\"Creating resource at: {url}\")\n    print(f\"Data: {json.dumps(data, indent=2)}\\n\")\n    \n    response = requests.post(url, json=data, headers=headers or {})\n    \n    print(f\"Status: {response.status_code}\")\n    \n    if response.status_code in [200, 201]:\n        result = response.json()\n        print(\"✓ Success!\\n\")\n        print(json.dumps(result, indent=2))\n        return result\n    else:\n        print(f\"✗ Error\")\n        print(response.text)\n        return None\n\nif __name__ == \"__main__\":\n    # Example: Create a post on JSONPlaceholder\n    url = \"https://jsonplaceholder.typicode.com/posts\"\n    \n    data = {\n        'title': 'My New Post',\n        'body': 'This is the content of my post',\n        'userId': 1\n    }\n    \n    result = create_resource(url, data)\nEOF",
      "AGENT: ''",
      "Run command: `python3 api_post_data.py`",
      "AGENT: 'Creating resource at: https://jsonplaceholder.typicode.com/posts'",
      "AGENT: 'Data: {'",
      "AGENT: '  \"title\": \"My New Post\",'",
      "AGENT: '  \"body\": \"This is the content of my post\",'",
      "AGENT: '  \"userId\": 1'",
      "AGENT: '}'",
      "AGENT: ''",
      "AGENT: 'Status: 201'",
      "AGENT: '✓ Success!'",
      "AGENT: ''",
      "AGENT: '{'",
      "AGENT: '  \"id\": 101,'",
      "AGENT: '  \"title\": \"My New Post\",'",
      "AGENT: '  ...'",
      "AGENT: '}'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Complete GitHub API Wrapper ---'",
      "AGENT: ''",
      "Create tool: `cat > github_api.py << 'EOF'`",
      "#!/usr/bin/env python3\n\"\"\"GitHub API wrapper for common operations.\"\"\"\nimport requests\nimport os\n\nclass GitHubAPI:\n    def __init__(self, token=None):\n        self.base_url = \"https://api.github.com\"\n        self.token = token or os.environ.get('GITHUB_TOKEN')\n        self.headers = {\n            'Accept': 'application/vnd.github.v3+json'\n        }\n        if self.token:\n            self.headers['Authorization'] = f\"token {self.token}\"\n    \n    def _request(self, method, endpoint, **kwargs):\n        \"\"\"Make an API request.\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        response = requests.request(method, url, headers=self.headers, **kwargs)\n        response.raise_for_status()\n        return response.json() if response.content else None\n    \n    def get_user(self, username):\n        \"\"\"Get user information.\"\"\"\n        return self._request('GET', f\"/users/{username}\")\n    \n    def list_repos(self, username):\n        \"\"\"List user's repositories.\"\"\"\n        return self._request('GET', f\"/users/{username}/repos\")\n    \n    def create_repo(self, name, description=\"\", private=False):\n        \"\"\"Create a new repository.\"\"\"\n        data = {\n            'name': name,\n            'description': description,\n            'private': private\n        }\n        return self._request('POST', \"/user/repos\", json=data)\n    \n    def create_issue(self, owner, repo, title, body=\"\", labels=None):\n        \"\"\"Create an issue.\"\"\"\n        data = {\n            'title': title,\n            'body': body\n        }\n        if labels:\n            data['labels'] = labels\n        \n        return self._request('POST', f\"/repos/{owner}/{repo}/issues\", json=data)\n    \n    def list_issues(self, owner, repo, state='open'):\n        \"\"\"List repository issues.\"\"\"\n        params = {'state': state}\n        return self._request('GET', f\"/repos/{owner}/{repo}/issues\", params=params)\n    \n    def create_pr(self, owner, repo, title, head, base, body=\"\"):\n        \"\"\"Create a pull request.\"\"\"\n        data = {\n            'title': title,\n            'head': head,\n            'base': base,\n            'body': body\n        }\n        return self._request('POST', f\"/repos/{owner}/{repo}/pulls\", json=data)\n\nif __name__ == \"__main__\":\n    # Example usage\n    gh = GitHubAPI()\n    \n    # Get user info\n    user = gh.get_user('octocat')\n    print(f\"User: {user['name']}\")\n    print(f\"Followers: {user['followers']}\")\n    print()\n    \n    # List repos\n    repos = gh.list_repos('octocat')\n    print(f\"Repositories: {len(repos)}\")\n    for repo in repos[:5]:\n        print(f\"  • {repo['name']} (⭐ {repo['stargazers_count']})\")\nEOF",
      "AGENT: ''",
      "Run command: `python3 github_api.py`",
      "AGENT: 'User: The Octocat'",
      "AGENT: 'Followers: 9234'",
      "AGENT: ''",
      "AGENT: 'Repositories: 8'",
      "AGENT: '  • Hello-World (⭐ 2145)'",
      "AGENT: '  • Spoon-Knife (⭐ 12345)'",
      "AGENT: '  ...'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Bulk Issue Creation ---'",
      "AGENT: ''",
      "Create tool: `cat > bulk_create_issues.py << 'EOF'`",
      "#!/usr/bin/env python3\nimport csv\nfrom github_api import GitHubAPI\nimport time\n\ndef bulk_create_issues(csv_file, owner, repo):\n    \"\"\"Create multiple issues from a CSV file.\"\"\"\n    gh = GitHubAPI()\n    \n    with open(csv_file, 'r') as f:\n        reader = csv.DictReader(f)\n        issues = list(reader)\n    \n    print(f\"Creating {len(issues)} issues in {owner}/{repo}...\\n\")\n    \n    created = []\n    \n    for i, issue_data in enumerate(issues, 1):\n        title = issue_data['title']\n        body = issue_data.get('body', '')\n        labels = issue_data.get('labels', '').split(',') if issue_data.get('labels') else None\n        \n        print(f\"[{i}/{len(issues)}] Creating: {title}\")\n        \n        try:\n            issue = gh.create_issue(owner, repo, title, body, labels)\n            created.append(issue)\n            print(f\"  ✓ Created #{issue['number']}\")\n        except Exception as e:\n            print(f\"  ✗ Error: {e}\")\n        \n        # Rate limiting: wait between requests\n        time.sleep(1)\n    \n    print(f\"\\n✓ Created {len(created)}/{len(issues)} issues\")\n    return created\n\nif __name__ == \"__main__\":\n    import sys\n    \n    if len(sys.argv) < 4:\n        print(\"Usage: python3 bulk_create_issues.py <csv_file> <owner> <repo>\")\n        print(\"\\nCSV format: title,body,labels\")\n        sys.exit(1)\n    \n    bulk_create_issues(sys.argv[1], sys.argv[2], sys.argv[3])\nEOF",
      "AGENT: ''",
      "AGENT: 'Create issues CSV:'",
      "Create tool: `cat > issues.csv << 'EOF'`",
      "title,body,labels\n\"Bug: Login fails\",\"Users cannot log in\",\"bug,priority-high\"\n\"Feature: Dark mode\",\"Add dark mode support\",\"enhancement\"\n\"Docs: Update README\",\"README needs updates\",\"documentation\"\nEOF",
      "AGENT: ''",
      "Run command: `python3 bulk_create_issues.py issues.csv myuser myrepo`",
      "AGENT: 'Creating 3 issues in myuser/myrepo...'",
      "AGENT: ''",
      "AGENT: '[1/3] Creating: Bug: Login fails'",
      "AGENT: '  ✓ Created #45'",
      "AGENT: '[2/3] Creating: Feature: Dark mode'",
      "AGENT: '  ✓ Created #46'",
      "AGENT: '[3/3] Creating: Docs: Update README'",
      "AGENT: '  ✓ Created #47'",
      "AGENT: ''",
      "AGENT: '✓ Created 3/3 issues'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Made HTTP requests with requests library.'",
      "AGENT: '  ✓ Authenticated with GitHub API using tokens.'",
      "AGENT: '  ✓ Created issues, repos, and PRs programmatically.'",
      "AGENT: '  ✓ Implemented pagination for large datasets.'",
      "AGENT: '  ✓ Added retry logic for failed requests.'",
      "AGENT: '  ✓ Built reusable GitHub API wrapper class.'",
      "AGENT: '  ✓ Automated bulk operations from CSV files.'",
      "AGENT: '  ✓ Handled rate limiting gracefully.'",
      "AGENT: '  ✓ You now master API automation with Python! 🚀'"
    ],
    "commands": ["python", "python3", "pip"],
    "packages": {
      "debian_ubuntu": ["python3", "python3-pip"],
      "arch": ["python", "python-pip"]
    },
    "related_commands": ["curl", "wget", "http"],
    "complexity": "intermediate",
    "tags": ["python", "api", "requests", "github-api", "rest-api", "automation", "http", "json", "authentication"]
  }
]

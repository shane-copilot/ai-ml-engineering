[
  {
    "id": "scenario_dev_setup_001",
    "command": "multiple",
    "scenario": "User: Help me set up a Python development environment",
    "problem": "Need to start new Python project with proper environment, dependencies, and tools",
    "solution": "Set up virtual environment, install dependencies, configure IDE",
    "steps": [
      "USER ASKS: 'I need to set up Python for a new web project. Can you help?'",
      "AGENT: 'Absolutely! Let me set up a complete Python development environment.'",
      "AGENT: 'First, checking your Python installation...'",
      "Check Python: python3 --version",
      "Check pip: pip3 --version",
      "If missing: AGENT: 'Python not found. Installing...'",
      "Install Python (Ubuntu): sudo apt update && sudo apt install python3 python3-pip python3-venv",
      "Install Python (Arch): sudo pacman -S python python-pip",
      "AGENT: 'Python installed. Version: 3.11.4'",
      "USER: 'Great! It's a Django project'",
      "AGENT: 'Perfect! I'll set up a Django environment. Where should I create the project?'",
      "USER: 'In ~/projects/mywebapp'",
      "AGENT: 'Creating project structure...'",
      "Create directory: mkdir -p ~/projects/mywebapp",
      "Navigate: cd ~/projects/mywebapp",
      "AGENT: 'Setting up virtual environment to isolate dependencies...'",
      "Create venv: python3 -m venv venv",
      "AGENT: 'Virtual environment created. Activating...'",
      "Activate: source venv/bin/activate",
      "Verify: which python",
      "Shows: ~/projects/mywebapp/venv/bin/python",
      "AGENT: 'Virtual environment active. Installing Django...'",
      "Upgrade pip: pip install --upgrade pip",
      "Install Django: pip install django",
      "AGENT: 'Django installed. Version:'",
      "Check version: python -m django --version",
      "AGENT: 'Installing additional tools...'",
      "Install dev tools: pip install black flake8 pylint django-debug-toolbar",
      "AGENT: 'Installed:'",
      "AGENT: '- black: Code formatter'",
      "AGENT: '- flake8: Linter'",
      "AGENT: '- pylint: Code analyzer'",
      "AGENT: '- django-debug-toolbar: Debug tool'",
      "Create requirements: pip freeze > requirements.txt",
      "AGENT: 'Created requirements.txt for dependency management'",
      "Show contents: cat requirements.txt",
      "AGENT: 'Creating Django project...'",
      "Create project: django-admin startproject config .",
      "AGENT: 'Project structure created. Let me show you:'",
      "List files: tree -L 2 .",
      "Or: find . -maxdepth 2 -type f",
      "AGENT: 'Setting up database...'",
      "Run migrations: python manage.py migrate",
      "AGENT: 'Database initialized with default tables.'",
      "USER: 'Can I see it running?'",
      "AGENT: 'Yes! Starting development server...'",
      "Start server: python manage.py runserver",
      "AGENT: 'Server starting on http://127.0.0.1:8000'",
      "AGENT: 'Press Ctrl+C to stop when done'",
      "Wait 2 seconds: sleep 2",
      "Test server: curl -I http://127.0.0.1:8000",
      "AGENT: 'Server is running! Opening in browser...'",
      "Open browser: xdg-open http://127.0.0.1:8000 &",
      "USER: 'Great! How do I work with this daily?'",
      "AGENT: 'Let me create helper scripts for your workflow.'",
      "Create activate script: cat > ~/projects/mywebapp/activate.sh << 'EOF'",
      "#!/bin/bash",
      "cd ~/projects/mywebapp",
      "source venv/bin/activate",
      "echo 'Virtual environment activated!'",
      "echo 'Python: $(which python)'",
      "echo 'Run server: python manage.py runserver'",
      "EOF",
      "Make executable: chmod +x activate.sh",
      "Create start script: cat > ~/projects/mywebapp/start.sh << 'EOF'",
      "#!/bin/bash",
      "cd ~/projects/mywebapp",
      "source venv/bin/activate",
      "python manage.py runserver",
      "EOF",
      "Make executable: chmod +x start.sh",
      "AGENT: 'Created helper scripts:'",
      "AGENT: '- activate.sh: Activates environment'",
      "AGENT: '- start.sh: Starts development server'",
      "Set up Git: AGENT: 'Should I initialize Git for version control?'",
      "USER: 'Yes please'",
      "Initialize: git init",
      "Create .gitignore: cat > .gitignore << 'EOF'",
      "venv/",
      "__pycache__/",
      "*.pyc",
      "*.pyo",
      "*.pyd",
      ".Python",
      "db.sqlite3",
      "*.log",
      ".env",
      ".vscode/",
      ".idea/",
      "*.swp",
      "*.swo",
      "EOF",
      "Initial commit: git add .",
      "Commit: git commit -m 'Initial Django project setup'",
      "AGENT: 'Git initialized with proper ignores'",
      "Set up VS Code: AGENT: 'Do you use VS Code?'",
      "USER: 'Yes'",
      "AGENT: 'Configuring VS Code settings...'",
      "Create .vscode dir: mkdir -p .vscode",
      "Create settings: cat > .vscode/settings.json << 'EOF'",
      "{",
      "  \"python.defaultInterpreterPath\": \"${workspaceFolder}/venv/bin/python\",",
      "  \"python.linting.enabled\": true,",
      "  \"python.linting.pylintEnabled\": true,",
      "  \"python.formatting.provider\": \"black\",",
      "  \"editor.formatOnSave\": true,",
      "  \"python.linting.flake8Enabled\": true",
      "}",
      "EOF",
      "Create launch config: cat > .vscode/launch.json << 'EOF'",
      "{",
      "  \"version\": \"0.2.0\",",
      "  \"configurations\": [",
      "    {",
      "      \"name\": \"Django\",",
      "      \"type\": \"python\",",
      "      \"request\": \"launch\",",
      "      \"program\": \"${workspaceFolder}/manage.py\",",
      "      \"args\": [\"runserver\"],",
      "      \"django\": true",
      "    }",
      "  ]",
      "}",
      "EOF",
      "AGENT: 'VS Code configured with:'",
      "AGENT: '- Auto-formatting with black'",
      "AGENT: '- Linting with pylint and flake8'",
      "AGENT: '- Django debugging support'",
      "Create README: cat > README.md << 'EOF'",
      "# My Web App",
      "",
      "## Setup",
      "```bash",
      "# Activate environment",
      "./activate.sh",
      "",
      "# Install dependencies",
      "pip install -r requirements.txt",
      "",
      "# Run migrations",
      "python manage.py migrate",
      "",
      "# Start server",
      "./start.sh",
      "```",
      "",
      "## Development",
      "- Server: http://127.0.0.1:8000",
      "- Admin: http://127.0.0.1:8000/admin",
      "EOF",
      "AGENT: 'Created README with instructions'",
      "Create superuser: AGENT: 'Want to create an admin user?'",
      "USER: 'Yes'",
      "Create: python manage.py createsuperuser --username admin --email admin@example.com",
      "AGENT: 'Admin user created. You can set password now.'",
      "Final summary: AGENT: 'Setup complete! Here's your project:'",
      "AGENT: ''",
      "AGENT: '📁 Project: ~/projects/mywebapp'",
      "AGENT: '🐍 Python: 3.11.4 (in virtual environment)'",
      "AGENT: '🚀 Django: 4.2.5'",
      "AGENT: '🔧 Tools: black, flake8, pylint'",
      "AGENT: '📝 Git: Initialized with .gitignore'",
      "AGENT: '💻 VS Code: Configured'",
      "AGENT: ''",
      "AGENT: 'Quick start:'",
      "AGENT: '1. cd ~/projects/mywebapp'",
      "AGENT: '2. source venv/bin/activate'",
      "AGENT: '3. python manage.py runserver'",
      "AGENT: '4. Visit: http://127.0.0.1:8000'",
      "AGENT: ''",
      "AGENT: 'Or use helper scripts:'",
      "AGENT: '- ./activate.sh (activate environment)'",
      "AGENT: '- ./start.sh (start server)'",
      "Create cheat sheet: cat > CHEATSHEET.md << 'EOF'",
      "# Django Cheat Sheet",
      "",
      "## Common Commands",
      "```bash",
      "# Create app",
      "python manage.py startapp myapp",
      "",
      "# Make migrations",
      "python manage.py makemigrations",
      "",
      "# Apply migrations",
      "python manage.py migrate",
      "",
      "# Create superuser",
      "python manage.py createsuperuser",
      "",
      "# Run server",
      "python manage.py runserver",
      "",
      "# Django shell",
      "python manage.py shell",
      "",
      "# Run tests",
      "python manage.py test",
      "```",
      "EOF",
      "AGENT: 'Created CHEATSHEET.md with common Django commands'"
    ],
    "commands": ["python3", "pip", "mkdir", "cd", "source", "django-admin", "tree", "find", "curl", "xdg-open", "git", "cat", "chmod"],
    "packages": {
      "debian_ubuntu": ["python3", "python3-pip", "python3-venv", "git", "tree", "curl"],
      "arch": ["python", "python-pip", "git", "tree", "curl"]
    },
    "related_commands": ["python", "pip", "virtualenv", "django-admin", "git"],
    "complexity": "beginner",
    "tags": ["python", "django", "development", "setup", "environment", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_port_conflict_001",
    "command": "multiple",
    "scenario": "User: Error - port 8080 already in use",
    "problem": "Application won't start due to port conflict",
    "solution": "Identify what's using the port and resolve conflict",
    "steps": [
      "USER SAYS: 'I'm getting error: Address already in use: 8080. What's using it?'",
      "AGENT: 'Let me find what's using port 8080...'",
      "Check port: sudo lsof -i :8080",
      "Example output: java 1234 user 45u IPv6 0x... TCP *:8080 (LISTEN)",
      "AGENT: 'Found it! Java application (PID 1234) is using port 8080.'",
      "Get more details: ps aux | grep 1234",
      "AGENT: 'It's running: java -jar old-app.jar'",
      "USER: 'I don't need that anymore. Can you stop it?'",
      "AGENT: 'Yes. Stopping gracefully first...'",
      "Try graceful: kill 1234",
      "Wait: sleep 2",
      "Check if stopped: lsof -i :8080",
      "If still running: AGENT: 'Still running. Force stopping...'",
      "Force kill: kill -9 1234",
      "Verify: sudo lsof -i :8080",
      "AGENT: 'Port 8080 is now free. Your application should start now.'",
      "Alternative scenario: USER: 'I need that Java app though!'",
      "AGENT: 'No problem. Let's use a different port for your new app.'",
      "AGENT: 'What application are you trying to start?'",
      "USER: 'Node.js server'",
      "AGENT: 'I'll configure it to use port 8081 instead.'",
      "Find config: find . -name 'server.js' -o -name 'app.js' -o -name 'index.js'",
      "Check for port: grep -n '8080' server.js",
      "AGENT: 'Found port 8080 on line 15. Changing to 8081...'",
      "Backup: cp server.js server.js.backup",
      "Replace: sed -i 's/8080/8081/g' server.js",
      "AGENT: 'Updated server.js to use port 8081'",
      "Show change: grep -n '808' server.js",
      "Or env variable approach: AGENT: 'Better: use environment variable for port'",
      "Check current code: grep 'listen' server.js",
      "AGENT: 'I'll modify it to use PORT environment variable...'",
      "Edit to use env: sed -i 's/const port = 8080/const port = process.env.PORT || 8081/' server.js",
      "AGENT: 'Now you can set port with: PORT=8081 node server.js'",
      "Create start script: cat > start.sh << 'EOF'",
      "#!/bin/bash",
      "PORT=${1:-8081}",
      "echo \"Starting server on port $PORT...\"",
      "PORT=$PORT node server.js",
      "EOF",
      "Make executable: chmod +x start.sh",
      "AGENT: 'Created start.sh. Usage: ./start.sh [port]'",
      "Test: ./start.sh 8081",
      "Verify listening: sleep 2 && ss -tulpn | grep 8081",
      "AGENT: 'Server running on port 8081!'",
      "Quick port scan: AGENT: 'Want to see all used ports?'",
      "USER: 'Yes'",
      "Show all: sudo ss -tulpn | grep LISTEN",
      "Format nicely: sudo ss -tulpn | grep LISTEN | awk '{print $5}' | cut -d: -f2 | sort -n | uniq",
      "AGENT: 'Ports in use: 22 (SSH), 80 (HTTP), 3306 (MySQL), 8080 (Java app), 8081 (Node app)'",
      "Create helper: AGENT: 'Creating port checker script...'",
      "Create script: cat > ~/check-port.sh << 'EOF'",
      "#!/bin/bash",
      "PORT=${1:-8080}",
      "echo \"Checking port $PORT...\"",
      "PROCESS=$(sudo lsof -i :$PORT | tail -n 1)",
      "if [ -z \"$PROCESS\" ]; then",
      "  echo \"✓ Port $PORT is free\"",
      "else",
      "  echo \"✗ Port $PORT is in use:\"",
      "  echo \"$PROCESS\"",
      "  PID=$(echo $PROCESS | awk '{print $2}')",
      "  echo \"\"",
      "  echo \"To stop: sudo kill $PID\"",
      "  echo \"To force: sudo kill -9 $PID\"",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/check-port.sh",
      "AGENT: 'Created check-port.sh. Usage: ~/check-port.sh 8080'",
      "Test it: ~/check-port.sh 8080",
      "Alternative with netstat: AGENT: 'Alternative check using netstat:'",
      "Install if needed: sudo apt install net-tools",
      "Check: netstat -tuln | grep 8080",
      "Or ss: ss -tuln | grep 8080",
      "Find process by port function: AGENT: 'Adding to your .bashrc for easy use...'",
      "Add function: cat >> ~/.bashrc << 'EOF'",
      "# Find what's using a port",
      "port() {",
      "  sudo lsof -i :$1",
      "}",
      "",
      "# Kill process on port",
      "killport() {",
      "  sudo kill $(sudo lsof -t -i :$1)",
      "}",
      "EOF",
      "Reload: source ~/.bashrc",
      "AGENT: 'Added two functions:'",
      "AGENT: '- port 8080 (shows what's using port)'",
      "AGENT: '- killport 8080 (kills process on port)'",
      "Test: port 8080",
      "Summary: AGENT: 'Issue resolved! Summary:'",
      "AGENT: '✓ Identified Java app on port 8080'",
      "AGENT: '✓ Configured Node app to use port 8081'",
      "AGENT: '✓ Created flexible start script'",
      "AGENT: '✓ Added port helper functions'",
      "AGENT: ''",
      "AGENT: 'Your Node app is now running on: http://localhost:8081'"
    ],
    "commands": ["lsof", "ps", "kill", "grep", "find", "sed", "ss", "netstat", "awk", "cut", "sort", "cat", "chmod", "source"],
    "packages": {
      "debian_ubuntu": ["lsof", "net-tools"],
      "arch": ["lsof", "net-tools"]
    },
    "related_commands": ["lsof", "ss", "netstat", "kill", "ps"],
    "complexity": "intermediate",
    "tags": ["port-conflict", "networking", "troubleshooting", "lsof", "kill", "real-world", "ai-agent"]
  }
]

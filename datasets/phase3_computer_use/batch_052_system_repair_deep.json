[
  {
    "id": "scenario_package_dependency_hell_001",
    "command": "apt",
    "scenario": "User: Can't install package, dependency conflicts",
    "problem": "Broken dependencies preventing installation",
    "solution": "Resolve dependency conflicts systematically",
    "steps": [
      "USER SAYS: 'I can\\'t install anything! Every apt install fails with dependency errors.'",
      "AGENT: 'Let me diagnose the dependency issues...'",
      "Try install: sudo apt install vlc",
      "AGENT: 'Error: vlc depends on libvlc5 (>= 3.0.18) but 3.0.16 is installed'",
      "AGENT: 'Classic dependency conflict'",
      "Check broken: sudo apt --fix-broken install",
      "AGENT: 'Attempting to fix broken dependencies...'",
      "AGENT: 'The following packages have unmet dependencies:'",
      "AGENT: ' libvlc5 : Depends: libvlccore9 but it is not installable'",
      "USER: 'Why is this so broken?'",
      "AGENT: 'Likely mixed repos or interrupted upgrade. Let me investigate...'",
      "Check sources: cat /etc/apt/sources.list /etc/apt/sources.list.d/*",
      "AGENT: 'Found mixed Ubuntu 22.04 and 23.04 repos!'",
      "AGENT: 'That\\'s the problem - incompatible package versions'",
      "Clean sources: sudo cat > /etc/apt/sources.list << 'EOF'",
      "deb http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse",
      "deb http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse",
      "deb http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse",
      "EOF",
      "AGENT: 'Cleaned to single Ubuntu 22.04 (jammy) repos ✓'",
      "Remove bad repos: sudo rm /etc/apt/sources.list.d/badrepo.list",
      "AGENT: 'Removed conflicting PPA ✓'",
      "Update: sudo apt update",
      "AGENT: 'Repository index updated ✓'",
      "Fix broken: sudo apt --fix-broken install",
      "AGENT: 'Resolving dependencies...'",
      "AGENT: '✓ Fixed!'",
      "Try again: sudo apt install vlc",
      "AGENT: 'Installing VLC...'",
      "AGENT: '✓ VLC installed successfully!'",
      "USER: 'What if it didn\\'t work?'",
      "AGENT: 'Nuclear option: force reinstall base...'",
      "Check held: dpkg --get-selections | grep hold",
      "AGENT: 'No held packages'",
      "Simulate upgrade: apt list --upgradable",
      "AGENT: '234 packages can be upgraded'",
      "Full upgrade: sudo apt full-upgrade",
      "AGENT: 'Upgrading all packages to resolve conflicts...'",
      "AGENT: 'This may take a while...'",
      "AGENT: '✓ Upgrade complete'",
      "Autoremove: sudo apt autoremove",
      "AGENT: 'Removed 45 unused packages ✓'",
      "Autoclean: sudo apt autoclean",
      "AGENT: 'Cleaned package cache ✓'",
      "Create dependency checker: cat > ~/check-deps.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Dependency Health Check ==='",
      "echo ''",
      "echo '1. Checking for broken packages:'",
      "BROKEN=$(dpkg -l | grep -E '^..r|^..H' | wc -l)",
      "if [ \"$BROKEN\" -gt 0 ]; then",
      "  echo \"⚠️ $BROKEN broken packages found\"",
      "  dpkg -l | grep -E '^..r|^..H'",
      "else",
      "  echo '✓ No broken packages'",
      "fi",
      "echo ''",
      "echo '2. Checking for unmet dependencies:'",
      "sudo apt-get check 2>&1 | grep -v '^Reading'",
      "echo ''",
      "echo '3. Checking for held packages:'",
      "HELD=$(dpkg --get-selections | grep hold | wc -l)",
      "if [ \"$HELD\" -gt 0 ]; then",
      "  echo \"ℹ️ $HELD held packages:\"",
      "  dpkg --get-selections | grep hold",
      "else",
      "  echo '✓ No held packages'",
      "fi",
      "echo ''",
      "echo '4. Checking sources consistency:'",
      "grep -h \"^deb\" /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null | awk '{print $3}' | sort -u",
      "EOF",
      "chmod +x ~/check-deps.sh",
      "Create fixer script: cat > ~/fix-deps.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Dependency Repair Tool ==='",
      "echo ''",
      "echo 'This will attempt to fix package dependencies.'",
      "read -p 'Continue? (y/n): ' CONFIRM",
      "if [ \"$CONFIRM\" != 'y' ]; then exit; fi",
      "echo ''",
      "echo 'Step 1: Updating package lists...'",
      "sudo apt update",
      "echo ''",
      "echo 'Step 2: Fixing broken packages...'",
      "sudo apt --fix-broken install -y",
      "echo ''",
      "echo 'Step 3: Configuring unconfigured packages...'",
      "sudo dpkg --configure -a",
      "echo ''",
      "echo 'Step 4: Removing conflicting packages...'",
      "sudo apt autoremove -y",
      "echo ''",
      "echo 'Step 5: Cleaning package cache...'",
      "sudo apt clean",
      "echo ''",
      "echo 'Step 6: Upgrading packages...'",
      "sudo apt upgrade -y",
      "echo ''",
      "echo '✓ Dependency repair complete'",
      "echo ''",
      "echo 'Verifying:'",
      "sudo apt-get check",
      "EOF",
      "chmod +x ~/fix-deps.sh",
      "Create repo cleaner: cat > ~/clean-repos.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Repository Cleaner ==='",
      "echo ''",
      "echo 'Current repositories:'",
      "grep -h \"^deb\" /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null",
      "echo ''",
      "echo 'WARNING: This will backup and clean sources.list'",
      "read -p 'Continue? (y/n): ' CONFIRM",
      "if [ \"$CONFIRM\" != 'y' ]; then exit; fi",
      "sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup",
      "echo '✓ Backed up sources.list'",
      "CODENAME=$(lsb_release -sc)",
      "sudo cat > /etc/apt/sources.list << SOURCES",
      "deb http://archive.ubuntu.com/ubuntu/ $CODENAME main restricted universe multiverse",
      "deb http://archive.ubuntu.com/ubuntu/ $CODENAME-updates main restricted universe multiverse",
      "deb http://archive.ubuntu.com/ubuntu/ $CODENAME-security main restricted universe multiverse",
      "SOURCES",
      "echo \"✓ Reset to clean $CODENAME repos\"",
      "sudo apt update",
      "EOF",
      "chmod +x ~/clean-repos.sh",
      "AGENT: 'Dependency issues resolved! ✓'",
      "AGENT: 'Tools created for future issues ✓'"
    ],
    "commands": ["apt", "dpkg", "apt-get"],
    "packages": {"debian_ubuntu": [], "arch": []},
    "related_commands": ["apt", "dpkg", "aptitude"],
    "complexity": "intermediate",
    "tags": ["apt", "dependencies", "packages", "troubleshooting", "ubuntu", "debian", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_kernel_panic_debugging_001",
    "command": "journalctl",
    "scenario": "User: System crashed with kernel panic",
    "problem": "Random crashes, need to find cause",
    "solution": "Analyze kernel logs and identify issue",
    "steps": [
      "USER SAYS: 'My system keeps crashing! Just got another kernel panic.'",
      "AGENT: 'Let me check the kernel logs to find the cause...'",
      "Check last boot: journalctl -b -1 -p err",
      "AGENT: 'Errors from previous boot:'",
      "AGENT: 'kernel: BUG: unable to handle page fault'",
      "AGENT: 'kernel: RIP: nvidia_modeset'",
      "AGENT: 'Found it! NVIDIA driver crashed the kernel'",
      "Check dmesg: sudo dmesg | grep -i error",
      "AGENT: 'More context:'",
      "AGENT: 'NVRM: GPU at PCI:0000:01:00: GPU-xxxxx'",
      "AGENT: 'NVRM: Xid (PCI:0000:01:00): 79, pid=1234'",
      "AGENT: 'Xid 79 = GPU hung, driver failed'",
      "USER: 'What causes that?'",
      "AGENT: 'Common causes:'",
      "AGENT: '1. Incompatible NVIDIA driver'",
      "AGENT: '2. Overheating GPU'",
      "AGENT: '3. Power issues'",
      "AGENT: '4. Hardware failure'",
      "Check GPU temp: nvidia-smi",
      "AGENT: 'GPU temp: 87°C (high but not critical)'",
      "Check driver: nvidia-smi | grep 'Driver Version'",
      "AGENT: 'Driver: 525.60.11'",
      "Check recommended: ubuntu-drivers devices",
      "AGENT: 'Recommended: nvidia-driver-535'",
      "AGENT: 'You\\'re on old driver! Let me update...'",
      "Remove old: sudo apt remove --purge nvidia-*",
      "AGENT: 'Removing old NVIDIA drivers...'",
      "Install new: sudo apt install nvidia-driver-535",
      "AGENT: 'Installing latest stable driver...'",
      "AGENT: '✓ Driver installed'",
      "Reboot needed: sudo reboot",
      "After reboot: nvidia-smi",
      "AGENT: 'Driver: 535.129.03 ✓'",
      "AGENT: 'GPU: Stable'",
      "Test stability: stress-ng --gpu 1 --timeout 300s",
      "AGENT: 'Running 5-minute GPU stress test...'",
      "AGENT: '✓ Test passed without crash!'",
      "Create crash analyzer: cat > ~/analyze-crash.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Crash Analysis Tool ==='",
      "echo ''",
      "echo '1. Recent kernel panics:'",
      "journalctl -b -1 -p crit | grep -i 'panic\\|bug\\|oops'",
      "echo ''",
      "echo '2. Hardware errors:'",
      "journalctl -b -1 | grep -i 'mce\\|hardware error\\|edac'",
      "echo ''",
      "echo '3. Driver crashes:'",
      "journalctl -b -1 | grep -i 'driver\\|nvidia\\|amd'",
      "echo ''",
      "echo '4. Last 20 errors:'",
      "journalctl -b -1 -p err --no-pager | tail -20",
      "echo ''",
      "echo '5. OOM kills (out of memory):'",
      "journalctl -b -1 | grep -i 'out of memory\\|oom'",
      "EOF",
      "chmod +x ~/analyze-crash.sh",
      "Create kernel debugger: cat > ~/kernel-debug.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Kernel Debug Info ==='",
      "echo ''",
      "echo 'Current kernel:'",
      "uname -r",
      "echo ''",
      "echo 'Available kernels:'",
      "dpkg -l | grep linux-image",
      "echo ''",
      "echo 'Recent kernel messages:'",
      "sudo dmesg -T -l err,crit,alert,emerg | tail -20",
      "echo ''",
      "echo 'Loaded modules:'",
      "lsmod | head -20",
      "echo ''",
      "echo 'Hardware errors from mcelog:'",
      "if command -v mcelog &>/dev/null; then",
      "  sudo mcelog --client",
      "else",
      "  echo 'mcelog not installed (sudo apt install mcelog)'",
      "fi",
      "EOF",
      "chmod +x ~/kernel-debug.sh",
      "Setup crash dumps: sudo apt install kdump-tools",
      "AGENT: 'kdump installed for crash analysis ✓'",
      "Configure kdump: sudo cat >> /etc/default/grub.d/kdump-tools.cfg << 'EOF'",
      "GRUB_CMDLINE_LINUX_DEFAULT=\"$GRUB_CMDLINE_LINUX_DEFAULT crashkernel=384M-:128M\"",
      "EOF",
      "sudo update-grub",
      "AGENT: 'Crash dumps enabled for future panics ✓'",
      "Create stability tester: cat > ~/test-stability.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== System Stability Test ==='",
      "echo ''",
      "echo 'This will stress test your system.'",
      "echo 'Watch for crashes, freezes, or errors.'",
      "read -p 'Continue? (y/n): ' CONFIRM",
      "if [ \"$CONFIRM\" != 'y' ]; then exit; fi",
      "LOG=~/stability-test-$(date +%Y-%m-%d_%H-%M-%S).log",
      "echo \"Started: $(date)\" | tee $LOG",
      "echo '' | tee -a $LOG",
      "echo 'Test 1: CPU stress (5 minutes)' | tee -a $LOG",
      "stress-ng --cpu 0 --timeout 300s --metrics-brief 2>&1 | tee -a $LOG",
      "sleep 30",
      "echo '' | tee -a $LOG",
      "echo 'Test 2: Memory stress (5 minutes)' | tee -a $LOG",
      "stress-ng --vm 4 --vm-bytes 80% --timeout 300s --metrics-brief 2>&1 | tee -a $LOG",
      "sleep 30",
      "if command -v nvidia-smi &>/dev/null; then",
      "  echo '' | tee -a $LOG",
      "  echo 'Test 3: GPU stress (5 minutes)' | tee -a $LOG",
      "  stress-ng --gpu 1 --timeout 300s --metrics-brief 2>&1 | tee -a $LOG",
      "fi",
      "echo '' | tee -a $LOG",
      "echo \"Finished: $(date)\" | tee -a $LOG",
      "echo \"✓ All tests passed! System is stable.\" | tee -a $LOG",
      "echo \"Log saved: $LOG\"",
      "EOF",
      "chmod +x ~/test-stability.sh",
      "AGENT: 'Crash analysis complete! ✓'",
      "AGENT: 'Root cause: Outdated NVIDIA driver ✓'",
      "AGENT: 'Solution: Updated to driver 535 ✓'",
      "AGENT: 'System should be stable now ✓'"
    ],
    "commands": ["journalctl", "dmesg", "nvidia-smi", "mcelog"],
    "packages": {"debian_ubuntu": ["nvidia-driver-535", "kdump-tools", "mcelog"], "arch": ["nvidia", "kdump", "mcelog"]},
    "related_commands": ["journalctl", "dmesg", "mcelog", "kdump"],
    "complexity": "advanced",
    "tags": ["kernel", "crash", "panic", "debugging", "nvidia", "stability", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_bootloader_repair_001",
    "command": "grub",
    "scenario": "User: System won't boot, stuck at GRUB",
    "problem": "GRUB damaged after Windows update",
    "solution": "Repair GRUB bootloader from live USB",
    "steps": [
      "USER SAYS: 'After Windows update, I can\\'t boot Linux! Just says \"grub rescue>\"'",
      "AGENT: 'Windows overwrote GRUB. I\\'ll guide you through repair...'",
      "AGENT: 'You\\'ll need a Linux live USB. Boot from it.'",
      "USER: 'Booted into live USB!'",
      "AGENT: 'Great! Let me restore GRUB...'",
      "List disks: sudo fdisk -l",
      "AGENT: 'Found:'",
      "AGENT: '/dev/sda1 - EFI (Windows)'",
      "AGENT: '/dev/sda2 - Windows C:'",
      "AGENT: '/dev/sda3 - Linux root'",
      "USER: 'Linux is on /dev/sda3'",
      "Mount root: sudo mount /dev/sda3 /mnt",
      "AGENT: 'Linux root mounted ✓'",
      "Mount EFI: sudo mount /dev/sda1 /mnt/boot/efi",
      "AGENT: 'EFI partition mounted ✓'",
      "Mount system: sudo mount --bind /dev /mnt/dev",
      "sudo mount --bind /proc /mnt/proc",
      "sudo mount --bind /sys /mnt/sys",
      "AGENT: 'System directories bound ✓'",
      "Chroot: sudo chroot /mnt",
      "AGENT: 'Changed root to your Linux install ✓'",
      "Reinstall GRUB: grub-install /dev/sda",
      "AGENT: 'Installing GRUB to /dev/sda...'",
      "AGENT: 'Installation finished. No error reported. ✓'",
      "Update GRUB config: update-grub",
      "AGENT: 'Generating grub configuration file...'",
      "AGENT: 'Found Linux image: /boot/vmlinuz-6.5.0-generic'",
      "AGENT: 'Found Windows Boot Manager on /dev/sda1 ✓'",
      "AGENT: 'Configuration updated!'",
      "Exit chroot: exit",
      "Unmount: sudo umount /mnt/boot/efi /mnt/dev /mnt/proc /mnt/sys /mnt",
      "AGENT: 'Unmounted all partitions ✓'",
      "Reboot: sudo reboot",
      "AGENT: 'Remove USB and boot...'",
      "After reboot: AGENT: 'Do you see GRUB menu?'",
      "USER: 'Yes! I see both Linux and Windows!'",
      "AGENT: 'Perfect! GRUB restored ✓'",
      "USER: 'How do I prevent Windows from breaking it again?'",
      "AGENT: 'Let me show you...'",
      "Backup GRUB: sudo dd if=/dev/sda bs=512 count=1 of=~/grub-mbr-backup.img",
      "AGENT: 'GRUB MBR backed up to ~/grub-mbr-backup.img ✓'",
      "Backup EFI: sudo cp -r /boot/efi/EFI ~/efi-backup",
      "AGENT: 'EFI directory backed up ✓'",
      "Create repair script: cat > ~/repair-grub.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== GRUB Repair Quick Guide ==='",
      "echo ''",
      "echo 'If GRUB breaks, boot live USB and run:'",
      "echo ''",
      "echo '1. Identify your Linux partition:'",
      "echo '   sudo fdisk -l'",
      "echo ''",
      "echo '2. Mount partitions (replace sda3 with your partition):'",
      "echo '   sudo mount /dev/sda3 /mnt'",
      "echo '   sudo mount /dev/sda1 /mnt/boot/efi  # if UEFI'",
      "echo '   sudo mount --bind /dev /mnt/dev'",
      "echo '   sudo mount --bind /proc /mnt/proc'",
      "echo '   sudo mount --bind /sys /mnt/sys'",
      "echo ''",
      "echo '3. Chroot and reinstall:'",
      "echo '   sudo chroot /mnt'",
      "echo '   grub-install /dev/sda  # or /dev/nvme0n1 for NVMe'",
      "echo '   update-grub'",
      "echo '   exit'",
      "echo ''",
      "echo '4. Unmount and reboot:'",
      "echo '   sudo umount -R /mnt'",
      "echo '   sudo reboot'",
      "echo ''",
      "echo 'Backup files:'",
      "echo '  GRUB MBR: ~/grub-mbr-backup.img'",
      "echo '  EFI: ~/efi-backup/'",
      "EOF",
      "Configure GRUB timeout: sudo sed -i 's/GRUB_TIMEOUT=.*/GRUB_TIMEOUT=10/' /etc/default/grub",
      "sudo update-grub",
      "AGENT: 'GRUB timeout set to 10 seconds ✓'",
      "Set default OS: sudo grub-set-default 0",
      "AGENT: 'Linux set as default boot option ✓'",
      "Create boot order: cat > ~/set-boot-order.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== GRUB Boot Order ==='",
      "echo ''",
      "echo 'Current menu entries:'",
      "grep menuentry /boot/grub/grub.cfg | cut -d \"'\" -f2 | nl -v 0",
      "echo ''",
      "read -p 'Default entry number: ' NUM",
      "if [ -n \"$NUM\" ]; then",
      "  sudo grub-set-default $NUM",
      "  sudo update-grub",
      "  echo \"✓ Default set to entry $NUM\"",
      "fi",
      "EOF",
      "chmod +x ~/set-boot-order.sh",
      "AGENT: 'GRUB repaired and configured! ✓'",
      "AGENT: 'Both Linux and Windows bootable ✓'"
    ],
    "commands": ["grub-install", "update-grub", "chroot", "mount"],
    "packages": {"debian_ubuntu": ["grub-pc", "grub-efi-amd64"], "arch": ["grub"]},
    "related_commands": ["grub-install", "update-grub", "grub-mkconfig"],
    "complexity": "advanced",
    "tags": ["grub", "bootloader", "repair", "recovery", "dual-boot", "windows", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_permissions_broken_001",
    "command": "chmod",
    "scenario": "User: Can't execute scripts, permission denied everywhere",
    "problem": "Ran chmod -R 777 accidentally, now system broken",
    "solution": "Restore correct file permissions",
    "steps": [
      "USER SAYS: 'I ran chmod -R 777 on my home directory and now things are broken!'",
      "AGENT: 'Oh no! 777 makes everything world-writable and breaks security.'",
      "AGENT: 'Let me fix the critical issues first...'",
      "Check SSH: ls -la ~/.ssh/",
      "AGENT: '~/.ssh/id_rsa: -rwxrwxrwx (WRONG!)'",
      "AGENT: 'SSH refuses to use this key because it\\'s world-readable'",
      "Fix SSH keys: chmod 700 ~/.ssh",
      "chmod 600 ~/.ssh/id_rsa",
      "chmod 644 ~/.ssh/id_rsa.pub ~/.ssh/known_hosts ~/.ssh/authorized_keys",
      "AGENT: 'SSH keys secured ✓'",
      "Test SSH: ssh -T git@github.com",
      "AGENT: 'SSH working again ✓'",
      "Fix home dir: chmod 755 ~",
      "AGENT: 'Home directory permissions fixed ✓'",
      "Fix config dirs: chmod 700 ~/.gnupg ~/.cache ~/.config",
      "AGENT: 'Config directories secured ✓'",
      "USER: 'sudo won\\'t work now!'",
      "Check sudo: ls -la /etc/sudoers",
      "AGENT: '/etc/sudoers: -rwxrwxrwx'",
      "AGENT: 'sudo refuses to run with these permissions!'",
      "Fix sudoers: sudo chmod 440 /etc/sudoers",
      "AGENT: 'ERROR: sudo won\\'t run'",
      "AGENT: 'Need to boot into recovery mode...'",
      "USER: 'Booted into recovery mode'",
      "Fix from recovery: chmod 440 /etc/sudoers",
      "chmod 755 /etc/sudoers.d",
      "chmod 440 /etc/sudoers.d/*",
      "AGENT: 'sudoers permissions fixed ✓'",
      "Exit recovery: exit",
      "Test sudo: sudo echo 'test'",
      "AGENT: 'sudo working again ✓'",
      "Restore /etc: sudo chmod 644 /etc/passwd /etc/group",
      "sudo chmod 640 /etc/shadow /etc/gshadow",
      "sudo chmod 600 /etc/ssh/ssh_host_*_key",
      "sudo chmod 644 /etc/ssh/ssh_host_*_key.pub",
      "AGENT: 'Critical /etc files secured ✓'",
      "Fix scripts: find ~ -type f -name '*.sh' -exec chmod 755 {} \\;",
      "AGENT: 'Shell scripts made executable ✓'",
      "Fix regular files: find ~ -type f -exec chmod 644 {} \\;",
      "AGENT: 'Regular files set to 644 ✓'",
      "Fix directories: find ~ -type d -exec chmod 755 {} \\;",
      "AGENT: 'Directories set to 755 ✓'",
      "Re-fix SSH: chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_*",
      "AGENT: 'SSH keys re-secured after bulk change ✓'",
      "USER: 'How do I know what permissions everything should have?'",
      "AGENT: 'Let me create reference guides...'",
      "Create permission guide: cat > ~/permission-guide.txt << 'EOF'",
      "=== Standard Linux Permissions ===",
      "Directories:",
      "  755 (rwxr-xr-x) - Normal directories",
      "  700 (rwx------) - Private directories (~/.ssh, ~/.gnupg)",
      "  750 (rwxr-x---) - Group-accessible directories",
      "Files:",
      "  644 (rw-r--r--) - Regular files (documents, configs)",
      "  600 (rw-------) - Private files (SSH keys, credentials)",
      "  755 (rwxr-xr-x) - Executable files (scripts, binaries)",
      "  640 (rw-r-----) - Group-readable sensitive files",
      "Critical System Files:",
      "  /etc/passwd: 644",
      "  /etc/shadow: 640 (owned by root:shadow)",
      "  /etc/sudoers: 440",
      "  /etc/ssh/sshd_config: 644",
      "  /etc/ssh/ssh_host_*_key: 600",
      "SSH:",
      "  ~/.ssh/: 700",
      "  ~/.ssh/id_rsa: 600",
      "  ~/.ssh/id_rsa.pub: 644",
      "  ~/.ssh/authorized_keys: 600",
      "  ~/.ssh/known_hosts: 644",
      "NEVER USE:",
      "  777 - World-writable (security risk!)",
      "  666 - World-writable file (security risk!)",
      "EOF",
      "Create permission fixer: cat > ~/fix-permissions.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Permission Repair Tool ==='",
      "echo ''",
      "echo 'WARNING: This will reset permissions in your home directory.'",
      "read -p 'Continue? (y/n): ' CONFIRM",
      "if [ \"$CONFIRM\" != 'y' ]; then exit; fi",
      "echo ''",
      "echo '1. Fixing home directory...'",
      "chmod 755 ~",
      "echo '2. Fixing regular files (644)...'",
      "find ~ -type f -not -path '*/.ssh/*' -not -path '*/.*' -exec chmod 644 {} \\;",
      "echo '3. Fixing directories (755)...'",
      "find ~ -type d -not -path '*/.ssh*' -not -path '*/.*' -exec chmod 755 {} \\;",
      "echo '4. Fixing scripts (755)...'",
      "find ~ -type f \\( -name '*.sh' -o -name '*.py' -o -name '*.pl' \\) -exec chmod 755 {} \\;",
      "echo '5. Fixing SSH...'",
      "if [ -d ~/.ssh ]; then",
      "  chmod 700 ~/.ssh",
      "  chmod 600 ~/.ssh/id_* 2>/dev/null",
      "  chmod 644 ~/.ssh/*.pub ~/.ssh/known_hosts ~/.ssh/config 2>/dev/null",
      "  chmod 600 ~/.ssh/authorized_keys 2>/dev/null",
      "fi",
      "echo '6. Fixing GPG...'",
      "if [ -d ~/.gnupg ]; then",
      "  chmod 700 ~/.gnupg",
      "  chmod 600 ~/.gnupg/* 2>/dev/null",
      "fi",
      "echo '7. Fixing config directories...'",
      "chmod 700 ~/.cache ~/.config ~/.local 2>/dev/null",
      "echo ''",
      "echo '✓ Permission repair complete'",
      "EOF",
      "chmod +x ~/fix-permissions.sh",
      "Create audit script: cat > ~/audit-permissions.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Permission Audit ==='",
      "echo ''",
      "echo 'Checking for security issues...'",
      "echo ''",
      "echo '1. World-writable files (DANGER!):'",
      "find ~ -type f -perm -002 2>/dev/null | head -10",
      "echo ''",
      "echo '2. World-writable directories (DANGER!):'",
      "find ~ -type d -perm -002 2>/dev/null | head -10",
      "echo ''",
      "echo '3. SUID/SGID files (review these):'",
      "find ~ -type f \\( -perm -4000 -o -perm -2000 \\) 2>/dev/null",
      "echo ''",
      "echo '4. SSH key permissions:'",
      "if [ -d ~/.ssh ]; then",
      "  ls -la ~/.ssh/",
      "fi",
      "EOF",
      "chmod +x ~/audit-permissions.sh",
      "AGENT: 'Permissions restored! ✓'",
      "AGENT: 'Security vulnerabilities fixed ✓'",
      "AGENT: 'Never use chmod -R 777 again! ✓'"
    ],
    "commands": ["chmod", "chown", "find", "ls"],
    "packages": {"debian_ubuntu": [], "arch": []},
    "related_commands": ["chmod", "chown", "umask", "getfacl", "setfacl"],
    "complexity": "intermediate",
    "tags": ["permissions", "chmod", "security", "troubleshooting", "recovery", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_corrupt_filesystem_001",
    "command": "fsck",
    "scenario": "User: Filesystem errors, can't write files",
    "problem": "Filesystem corrupted, read-only errors",
    "solution": "Check and repair filesystem with fsck",
    "steps": [
      "USER SAYS: 'I can\\'t save files! Getting \"Read-only file system\" errors!'",
      "AGENT: 'Filesystem remounted read-only due to errors. Let me check...'",
      "Check mount: mount | grep ' / '",
      "AGENT: '/dev/sda1 on / type ext4 (ro,errors=remount-ro)'",
      "AGENT: 'Root filesystem is read-only!'",
      "Check dmesg: sudo dmesg | grep -i 'ext4\\|error'",
      "AGENT: 'EXT4-fs error: inconsistent filesystem structure'",
      "AGENT: 'Filesystem has errors and auto-remounted read-only for safety'",
      "USER: 'How do I fix it?'",
      "AGENT: 'Need to run fsck, but can\\'t check mounted filesystem'",
      "AGENT: 'Options: 1) Boot from live USB, or 2) Force fsck on next boot'",
      "USER: 'I\\'ll force fsck on next boot'",
      "Force fsck: sudo touch /forcefsck",
      "AGENT: 'Created /forcefsck flag ✓'",
      "Alternative: sudo shutdown -rF now",
      "AGENT: 'OR use shutdown -rF to force fsck immediately'",
      "Reboot: sudo reboot",
      "AGENT: 'System will run fsck on boot...'",
      "During boot: AGENT: 'fsck running:'",
      "AGENT: '/dev/sda1: Inodes that were part of a corrupted orphan linked list found.'",
      "AGENT: 'FIX? yes'",
      "AGENT: 'Fixing...'",
      "AGENT: '/dev/sda1: 245678/6553600 files, 1234567/26214400 blocks'",
      "AGENT: '✓ Filesystem repaired'",
      "After boot: df -h",
      "AGENT: 'Filesystem mounted read-write ✓'",
      "Test write: touch ~/test.txt && echo 'test' > ~/test.txt",
      "AGENT: 'Writing works! ✓'",
      "Check filesystem: sudo tune2fs -l /dev/sda1 | grep -i 'state\\|error'",
      "AGENT: 'Filesystem state: clean ✓'",
      "AGENT: 'Errors behavior: Continue'",
      "USER: 'What caused the corruption?'",
      "AGENT: 'Common causes:'",
      "AGENT: '1. Improper shutdowns (power loss)'",
      "AGENT: '2. Hardware issues (bad sectors)'",
      "AGENT: '3. Driver bugs'",
      "AGENT: 'Let me check the disk health...'",
      "Check SMART: sudo smartctl -H /dev/sda",
      "AGENT: 'SMART overall-health: PASSED ✓'",
      "Check bad sectors: sudo smartctl -a /dev/sda | grep -i 'reallocated\\|pending\\|uncorrectable'",
      "AGENT: 'Reallocated sectors: 0 ✓'",
      "AGENT: 'Pending sectors: 0 ✓'",
      "AGENT: 'No hardware issues detected'",
      "Setup auto-fsck: sudo tune2fs -c 30 -i 6m /dev/sda1",
      "AGENT: 'Configured automatic fsck:'",
      "AGENT: '- Every 30 mounts'",
      "AGENT: '- Every 6 months'",
      "Create fsck script: cat > ~/run-fsck.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Filesystem Check Tool ==='",
      "echo ''",
      "echo 'WARNING: This will schedule fsck on next boot.'",
      "echo 'All filesystems will be checked.'",
      "echo ''",
      "read -p 'Continue? (y/n): ' CONFIRM",
      "if [ \"$CONFIRM\" != 'y' ]; then exit; fi",
      "echo ''",
      "echo 'Checking current filesystem status:'",
      "sudo tune2fs -l /dev/sda1 | grep -E 'state|Last checked|Check interval'",
      "echo ''",
      "read -p 'Force fsck on next boot? (y/n): ' FORCE",
      "if [ \"$FORCE\" == 'y' ]; then",
      "  sudo touch /forcefsck",
      "  echo '✓ fsck will run on next boot'",
      "  echo ''",
      "  read -p 'Reboot now? (y/n): ' REBOOT",
      "  if [ \"$REBOOT\" == 'y' ]; then",
      "    sudo reboot",
      "  fi",
      "fi",
      "EOF",
      "chmod +x ~/run-fsck.sh",
      "Create filesystem checker: cat > ~/check-fs-health.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Filesystem Health Check ==='",
      "echo ''",
      "for fs in $(mount | grep 'type ext[34]' | awk '{print $1}'); do",
      "  echo \"Checking $fs:\"",
      "  sudo tune2fs -l $fs | grep -E 'state|Errors|Mount count|Check interval'",
      "  echo ''",
      "done",
      "echo 'Filesystem usage:'",
      "df -h | grep -E '^/dev/'",
      "echo ''",
      "echo 'Recent filesystem errors:'",
      "sudo dmesg | grep -i 'ext4\\|filesystem error' | tail -10",
      "EOF",
      "chmod +x ~/check-fs-health.sh",
      "Create emergency readonly fixer: cat > ~/remount-rw.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Emergency Read-Only Fix ==='",
      "echo ''",
      "echo 'Attempting to remount root as read-write...'",
      "echo 'WARNING: This is temporary! Run fsck ASAP!'",
      "echo ''",
      "read -p 'Continue? (y/n): ' CONFIRM",
      "if [ \"$CONFIRM\" != 'y' ]; then exit; fi",
      "sudo mount -o remount,rw /",
      "if [ $? -eq 0 ]; then",
      "  echo '✓ Root remounted as read-write'",
      "  echo ''",
      "  echo 'This is TEMPORARY! Schedule fsck:'",
      "  echo '  sudo touch /forcefsck && sudo reboot'",
      "else",
      "  echo '✗ Failed to remount'",
      "  echo 'Filesystem too corrupt - must boot from live USB'",
      "fi",
      "EOF",
      "chmod +x ~/remount-rw.sh",
      "AGENT: 'Filesystem repaired! ✓'",
      "AGENT: 'Disk health good ✓'",
      "AGENT: 'Auto-fsck scheduled for maintenance ✓'"
    ],
    "commands": ["fsck", "tune2fs", "mount", "smartctl"],
    "packages": {"debian_ubuntu": ["e2fsprogs", "smartmontools"], "arch": ["e2fsprogs", "smartmontools"]},
    "related_commands": ["fsck", "e2fsck", "tune2fs", "dumpe2fs"],
    "complexity": "intermediate",
    "tags": ["filesystem", "fsck", "corruption", "repair", "ext4", "troubleshooting", "real-world", "ai-agent"]
  }
]

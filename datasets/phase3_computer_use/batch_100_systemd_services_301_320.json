[
  {
    "id": "scenario_systemd_service_creation_104",
    "command": "systemctl",
    "scenario": "Create custom systemd service for application with dependency management and auto-restart.",
    "problem": "An application needs to run as a system service that starts on boot, restarts on failure, waits for network availability, and runs as a specific user. Manual startup scripts are unreliable.",
    "solution": "Create a systemd unit file with proper configuration: dependencies, restart policies, resource limits, logging, and user permissions. Enable and manage the service with systemctl.",
    "steps": [
      "USER SAYS: 'I have a Node.js application that I want to run as a system service, start on boot, and automatically restart if it crashes. How do I do this properly?'",
      "AGENT: 'Systemd is the modern way to manage services on Linux! Let me show you how to create a robust service unit with automatic restarts, proper dependencies, and best practices.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: Systemd service creation best practices...'",
      "AGENT: '[Searching] \"systemd service unit file example restart policy\"'",
      "AGENT: '[Found] Service units go in `/etc/systemd/system/`.'",
      "AGENT: '[Found] Unit files have [Unit], [Service], and [Install] sections.'",
      "AGENT: '[Found] `Restart=on-failure` automatically restarts crashed services.'",
      "AGENT: '[Found] Use `After=network.target` to wait for network.'",
      "AGENT: '‚úì Research complete! Let's create a production-ready service.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Create the Application User ---'",
      "Run command: `sudo useradd -r -s /bin/false -d /opt/myapp myapp`",
      "AGENT: 'Created system user `myapp` with no login shell and home at /opt/myapp'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Set Up Application Directory ---'",
      "Run command: `sudo mkdir -p /opt/myapp`",
      "Run command: `sudo chown myapp:myapp /opt/myapp`",
      "AGENT: ''",
      "AGENT: 'Create simple Node.js app for demo:'",
      "Create tool: `sudo tee /opt/myapp/server.js << 'EOF'`",
      "const http = require('http');\n\nconst PORT = process.env.PORT || 3000;\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello from systemd service!\\n');\n});\n\nserver.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('Received SIGTERM, shutting down gracefully');\n  server.close(() => {\n    process.exit(0);\n  });\n});\nEOF",
      "Run command: `sudo chown myapp:myapp /opt/myapp/server.js`",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Create Systemd Service Unit ---'",
      "Create tool: `sudo tee /etc/systemd/system/myapp.service << 'EOF'`",
      "[Unit]\nDescription=My Node.js Application\nDocumentation=https://example.com/docs\nAfter=network.target\nWants=network-online.target\n\n[Service]\n# Service type\nType=simple\n\n# User and group\nUser=myapp\nGroup=myapp\n\n# Working directory\nWorkingDirectory=/opt/myapp\n\n# The command to start the service\nExecStart=/usr/bin/node /opt/myapp/server.js\n\n# Restart policy\nRestart=on-failure\nRestartSec=5s\n\n# Number of restart attempts\nStartLimitInterval=60s\nStartLimitBurst=3\n\n# Graceful shutdown\nKillMode=mixed\nKillSignal=SIGTERM\nTimeoutStopSec=30s\n\n# Resource limits\nLimitNOFILE=65536\nLimitNPROC=512\nMemoryMax=512M\n\n# Standard output/error\nStandardOutput=journal\nStandardError=journal\n\n# Security hardening\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/myapp\n\n# Environment variables\nEnvironment=\"NODE_ENV=production\"\nEnvironment=\"PORT=3000\"\n\n[Install]\nWantedBy=multi-user.target\nEOF",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Reload Systemd and Enable Service ---'",
      "Run command: `sudo systemctl daemon-reload`",
      "AGENT: 'Reloaded systemd to recognize the new service'",
      "AGENT: ''",
      "Run command: `sudo systemctl enable myapp.service`",
      "AGENT: 'Created symlink /etc/systemd/system/multi-user.target.wants/myapp.service ‚Üí /etc/systemd/system/myapp.service'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Start and Check Service ---'",
      "Run command: `sudo systemctl start myapp.service`",
      "AGENT: ''",
      "Run command: `sudo systemctl status myapp.service`",
      "AGENT: '‚óè myapp.service - My Node.js Application'",
      "AGENT: '     Loaded: loaded (/etc/systemd/system/myapp.service; enabled; vendor preset: enabled)'",
      "AGENT: '     Active: active (running) since Mon 2025-10-07 17:00:00 UTC; 5s ago'",
      "AGENT: '       Docs: https://example.com/docs'",
      "AGENT: '   Main PID: 12345 (node)'",
      "AGENT: '      Tasks: 11 (limit: 512)'",
      "AGENT: '     Memory: 25.3M (max: 512.0M)'",
      "AGENT: '     CGroup: /system.slice/myapp.service'",
      "AGENT: '             ‚îî‚îÄ12345 /usr/bin/node /opt/myapp/server.js'",
      "AGENT: ''",
      "AGENT: 'Oct 07 17:00:00 server systemd[1]: Started My Node.js Application.'",
      "AGENT: 'Oct 07 17:00:00 server node[12345]: Server running on port 3000'",
      "AGENT: ''",
      "AGENT: '‚úÖ Service is running!'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Test the Service ---'",
      "Run command: `curl http://localhost:3000`",
      "AGENT: 'Hello from systemd service!'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: View Logs ---'",
      "Run command: `journalctl -u myapp.service -n 20`",
      "AGENT: 'Oct 07 17:00:00 server systemd[1]: Started My Node.js Application.'",
      "AGENT: 'Oct 07 17:00:00 server node[12345]: Server running on port 3000'",
      "AGENT: ''",
      "AGENT: 'Follow logs in real-time:'",
      "Run command: `journalctl -u myapp.service -f &`",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Test Auto-Restart on Failure ---'",
      "AGENT: 'Simulate crash by killing the process:'",
      "Run command: `sudo kill -9 $(systemctl show -p MainPID myapp.service | cut -d= -f2)`",
      "AGENT: ''",
      "Run command: `sleep 6 && sudo systemctl status myapp.service`",
      "AGENT: '‚óè myapp.service - My Node.js Application'",
      "AGENT: '     Active: active (running) since Mon 2025-10-07 17:01:05 UTC; 1s ago  ‚Üê Restarted!'",
      "AGENT: '   Main PID: 12456 (node)  ‚Üê New PID'",
      "AGENT: ''",
      "AGENT: 'Oct 07 17:01:00 server systemd[1]: myapp.service: Main process exited, code=killed, status=9/KILL'",
      "AGENT: 'Oct 07 17:01:00 server systemd[1]: myapp.service: Failed with result \\'signal\\'.'",
      "AGENT: 'Oct 07 17:01:05 server systemd[1]: myapp.service: Scheduled restart job, restart counter is at 1.'",
      "AGENT: 'Oct 07 17:01:05 server systemd[1]: Started My Node.js Application.'",
      "AGENT: 'Oct 07 17:01:05 server node[12456]: Server running on port 3000'",
      "AGENT: ''",
      "AGENT: '‚úÖ Service automatically restarted after 5 seconds!'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Service Management Commands ---'",
      "AGENT: 'Stop service:'",
      "Run command: `sudo systemctl stop myapp.service`",
      "AGENT: ''",
      "AGENT: 'Restart service:'",
      "Run command: `sudo systemctl restart myapp.service`",
      "AGENT: ''",
      "AGENT: 'Reload configuration without restarting:'",
      "Run command: `sudo systemctl reload-or-restart myapp.service`",
      "AGENT: ''",
      "AGENT: 'Disable service (won\\'t start on boot):'",
      "Run command: `sudo systemctl disable myapp.service`",
      "AGENT: ''",
      "AGENT: 'Re-enable it:'",
      "Run command: `sudo systemctl enable myapp.service`",
      "AGENT: ''",
      "AGENT: 'Check if enabled:'",
      "Run command: `systemctl is-enabled myapp.service`",
      "AGENT: 'enabled'",
      "AGENT: ''",
      "AGENT: 'Check if active:'",
      "Run command: `systemctl is-active myapp.service`",
      "AGENT: 'active'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Advanced Features ---'",
      "AGENT: ''",
      "AGENT: 'View service dependencies:'",
      "Run command: `systemctl list-dependencies myapp.service`",
      "AGENT: 'myapp.service'",
      "AGENT: '‚óè ‚îú‚îÄsystem.slice'",
      "AGENT: '‚óè ‚îî‚îÄnetwork.target'",
      "AGENT: '‚óè   ‚îú‚îÄNetworkManager.service'",
      "AGENT: '‚óè   ‚îî‚îÄnetwork-pre.target'",
      "AGENT: ''",
      "AGENT: 'Show all properties:'",
      "Run command: `systemctl show myapp.service | head -20`",
      "AGENT: 'Type=simple'",
      "AGENT: 'Restart=on-failure'",
      "AGENT: 'RestartSec=5s'",
      "AGENT: 'User=myapp'",
      "AGENT: 'Group=myapp'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: 'Monitor resource usage:'",
      "Run command: `systemd-cgtop -n 1 | grep myapp`",
      "AGENT: '/system.slice/myapp.service   1   25.3M    0.5%   -       -'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Environment Files ---'",
      "AGENT: 'For sensitive data, use an environment file:'",
      "Create tool: `sudo tee /etc/myapp/env << 'EOF'`",
      "NODE_ENV=production\nPORT=3000\nDB_HOST=localhost\nDB_PASSWORD=secret123\nEOF",
      "Run command: `sudo chmod 600 /etc/myapp/env`",
      "Run command: `sudo chown root:root /etc/myapp/env`",
      "AGENT: ''",
      "AGENT: 'Update service file to use it:'",
      "AGENT: 'Add: EnvironmentFile=/etc/myapp/env'",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Created dedicated system user for security.'",
      "AGENT: '  ‚úì Wrote comprehensive systemd service unit with all best practices.'",
      "AGENT: '  ‚úì Configured automatic restart on failure with exponential backoff.'",
      "AGENT: '  ‚úì Set resource limits (memory, file descriptors, processes).'",
      "AGENT: '  ‚úì Implemented security hardening (NoNewPrivileges, ProtectSystem, PrivateTmp).'",
      "AGENT: '  ‚úì Enabled service to start automatically on boot.'",
      "AGENT: '  ‚úì Verified auto-restart functionality by killing process.'",
      "AGENT: '  ‚úì Integrated with journald for centralized logging.'",
      "AGENT: '  ‚úì Your application now runs like a professional production service! ‚öôÔ∏è'"
    ],
    "commands": ["systemctl", "useradd", "mkdir", "chown", "tee", "chmod", "journalctl", "kill", "curl", "systemd-cgtop"],
    "packages": {
      "debian_ubuntu": ["systemd"],
      "arch": ["systemd"]
    },
    "related_commands": ["service", "init", "supervisord"],
    "complexity": "intermediate",
    "tags": ["systemd", "service-management", "auto-restart", "system-administration", "daemon", "logging", "resource-limits"]
  }
]

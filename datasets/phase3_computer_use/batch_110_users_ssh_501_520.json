[
  {
    "id": "scenario_user_group_management_119",
    "command": "useradd",
    "scenario": "Manage users and groups with proper permissions and security policies.",
    "problem": "New employees joining, need to create user accounts with appropriate access levels, set password policies, manage group memberships, and ensure principle of least privilege. Manual account management is error-prone.",
    "solution": "Use useradd, usermod, groupadd for account management. Configure password policies, set up sudo access, manage group memberships, implement home directory templates, and automate user provisioning.",
    "steps": [
      "USER SAYS: 'We have 5 new developers joining. How do I create accounts with proper access, force password changes, and give them sudo access for specific commands only?'",
      "AGENT: 'Let me show you comprehensive user and group management! We'll create accounts, configure security policies, and implement granular sudo access.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: User and group management...'",
      "AGENT: '[Searching] \"useradd usermod groupadd sudo access password policy\"'",
      "AGENT: '[Found] Use `-m` with useradd to create home directory automatically.'",
      "AGENT: '[Found] Password aging with `chage` forces periodic password changes.'",
      "AGENT: '[Found] Sudoers file: `/etc/sudoers` (edit with `visudo` only!).'",
      "AGENT: '[Found] Groups provide convenient permission management.'",
      "AGENT: '✓ Research complete! Let's create secure user accounts.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Create Development Group ---'",
      "Run command: `sudo groupadd developers`",
      "AGENT: ''",
      "Run command: `sudo groupadd -g 3000 devops`",
      "AGENT: 'Creates group with specific GID 3000'",
      "AGENT: ''",
      "Run command: `getent group developers`",
      "AGENT: 'developers:x:1001:'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Create User Account ---'",
      "Run command: `sudo useradd -m -s /bin/bash -c \"Alice Developer\" -G developers alice`",
      "AGENT: ''",
      "AGENT: 'Flags explained:'",
      "AGENT: '  -m = Create home directory (/home/alice)'",
      "AGENT: '  -s = Set login shell'",
      "AGENT: '  -c = Comment (full name)'",
      "AGENT: '  -G = Additional groups'",
      "AGENT: ''",
      "Run command: `sudo passwd alice`",
      "AGENT: 'Enter new UNIX password:'",
      "AGENT: 'Retype new UNIX password:'",
      "AGENT: 'passwd: password updated successfully'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: View User Information ---'",
      "Run command: `id alice`",
      "AGENT: 'uid=1001(alice) gid=1001(alice) groups=1001(alice),1002(developers)'",
      "AGENT: ''",
      "Run command: `getent passwd alice`",
      "AGENT: 'alice:x:1001:1001:Alice Developer:/home/alice:/bin/bash'",
      "AGENT: ''",
      "Run command: `sudo chage -l alice`",
      "AGENT: 'Last password change                                    : Oct 08, 2025'",
      "AGENT: 'Password expires                                        : never'",
      "AGENT: 'Password inactive                                       : never'",
      "AGENT: 'Account expires                                         : never'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Force Password Change on First Login ---'",
      "Run command: `sudo chage -d 0 alice`",
      "AGENT: 'User must change password on next login'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Set Password Policies ---'",
      "Run command: `sudo chage -M 90 -m 7 -W 14 alice`",
      "AGENT: '  -M 90  = Password expires after 90 days'",
      "AGENT: '  -m 7   = Minimum 7 days between password changes'",
      "AGENT: '  -W 14  = Warning 14 days before expiration'",
      "AGENT: ''",
      "Run command: `sudo chage -l alice`",
      "AGENT: 'Last password change                                    : password must be changed'",
      "AGENT: 'Password expires                                        : password must be changed'",
      "AGENT: 'Password inactive                                       : password must be changed'",
      "AGENT: 'Account expires                                         : never'",
      "AGENT: 'Minimum number of days between password change          : 7'",
      "AGENT: 'Maximum number of days between password change          : 90'",
      "AGENT: 'Number of days of warning before password expires       : 14'",
      "AGENT: ''",
      "AGENT: '✅ Secure password policy configured!'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Add User to Additional Groups ---'",
      "Run command: `sudo usermod -aG docker,sudo alice`",
      "AGENT: '  -aG = Append to groups (don\\'t remove from existing groups)'",
      "AGENT: ''",
      "Run command: `groups alice`",
      "AGENT: 'alice : alice developers docker sudo'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Configure Granular Sudo Access ---'",
      "AGENT: 'Edit sudoers file (always use visudo):'",
      "Run command: `sudo visudo`",
      "AGENT: ''",
      "AGENT: 'Add at end:'",
      "AGENT: '# Allow developers group to restart services'",
      "AGENT: '%developers ALL=(ALL) /usr/bin/systemctl restart, /usr/bin/systemctl status'",
      "AGENT: ''",
      "AGENT: '# Allow alice to run specific commands without password'",
      "AGENT: 'alice ALL=(ALL) NOPASSWD: /usr/bin/docker, /usr/bin/docker-compose'",
      "AGENT: ''",
      "AGENT: '# Allow devops group full sudo access'",
      "AGENT: '%devops ALL=(ALL:ALL) ALL'",
      "AGENT: ''",
      "AGENT: 'Test sudo access:'",
      "Run command: `sudo -u alice sudo systemctl status nginx`",
      "AGENT: '✅ Works! Alice can check nginx status'",
      "AGENT: ''",
      "Run command: `sudo -u alice sudo systemctl stop nginx`",
      "AGENT: '❌ Permission denied - alice can only restart/status, not stop'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Create User with Specific UID/GID ---'",
      "Run command: `sudo useradd -m -u 2000 -g developers -s /bin/bash bob`",
      "AGENT: 'Creates bob with UID 2000, primary group developers'",
      "AGENT: ''",
      "Run command: `id bob`",
      "AGENT: 'uid=2000(bob) gid=1002(developers) groups=1002(developers)'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Set Account Expiration ---'",
      "Run command: `sudo chage -E 2026-12-31 alice`",
      "AGENT: 'Account expires on 2026-12-31 (contractor account)'",
      "AGENT: ''",
      "Run command: `sudo usermod -L alice`",
      "AGENT: 'Locks account (temporary disable)'",
      "AGENT: ''",
      "Run command: `sudo usermod -U alice`",
      "AGENT: 'Unlocks account'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Bulk User Creation Script ---'",
      "Create tool: `cat > create-users.sh << 'EOF'`",
      "#!/bin/bash\nset -euo pipefail\n\n# List of users (format: username,fullname,groups)\nUSERS=(\n    \"alice,Alice Developer,developers,docker\"\n    \"bob,Bob Engineer,developers\"\n    \"charlie,Charlie DevOps,developers,devops,docker\"\n    \"diana,Diana QA,qa\"\n    \"eve,Eve Manager,managers,developers\"\n)\n\nfor user_info in \"${USERS[@]}\"; do\n    IFS=',' read -r username fullname groups <<< \"$user_info\"\n    \n    echo \"Creating user: $username\"\n    \n    # Create user\n    if id \"$username\" &>/dev/null; then\n        echo \"  User already exists, skipping\"\n        continue\n    fi\n    \n    sudo useradd -m -s /bin/bash -c \"$fullname\" \"$username\"\n    \n    # Set temporary password (user will change on first login)\n    echo \"$username:ChangeMe123!\" | sudo chpasswd\n    sudo chage -d 0 \"$username\"\n    \n    # Add to groups\n    if [ -n \"$groups\" ]; then\n        sudo usermod -aG \"$groups\" \"$username\"\n    fi\n    \n    # Set password policies\n    sudo chage -M 90 -m 7 -W 14 \"$username\"\n    \n    echo \"  ✓ Created $username ($fullname)\"\ndone\n\necho \"\"\necho \"=== User Creation Summary ===\"\necho \"Created users:\"\nfor user_info in \"${USERS[@]}\"; do\n    username=$(echo \"$user_info\" | cut -d',' -f1)\n    if id \"$username\" &>/dev/null; then\n        echo \"  $username - $(id $username)\"\n    fi\ndone\nEOF",
      "Run command: `chmod +x create-users.sh`",
      "Run command: `sudo ./create-users.sh`",
      "AGENT: 'Creating user: alice'",
      "AGENT: '  ✓ Created alice (Alice Developer)'",
      "AGENT: 'Creating user: bob'",
      "AGENT: '  ✓ Created bob (Bob Engineer)'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '=== User Creation Summary ==='",
      "AGENT: 'Created users:'",
      "AGENT: '  alice - uid=1001(alice) gid=1001(alice) groups=1001(alice),1002(developers),1003(docker)'",
      "AGENT: '  bob - uid=1002(bob) gid=1002(bob) groups=1002(bob),1002(developers)'",
      "AGENT: ''",
      "AGENT: '✅ Bulk user creation complete!'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Home Directory Template ---'",
      "Run command: `sudo ls -la /etc/skel/`",
      "AGENT: 'Files in /etc/skel/ are copied to new user home directories'",
      "AGENT: ''",
      "AGENT: 'Add default files:'",
      "Run command: `sudo tee /etc/skel/.bash_aliases << 'EOF'`",
      "alias ll='ls -la'\nalias gs='git status'\nalias gd='git diff'\nEOF",
      "AGENT: ''",
      "AGENT: '--- Bonus: Delete User ---'",
      "Run command: `sudo userdel alice`",
      "AGENT: 'Removes user but keeps home directory'",
      "AGENT: ''",
      "Run command: `sudo userdel -r bob`",
      "AGENT: 'Removes user AND home directory'",
      "AGENT: ''",
      "AGENT: '--- Bonus: List All Users ---'",
      "Run command: `getent passwd | awk -F: '$3 >= 1000 {print $1, $3, $5}'`",
      "AGENT: 'alice 1001 Alice Developer'",
      "AGENT: 'bob 1002 Bob Engineer'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: 'List all groups:'",
      "Run command: `getent group | grep -E '^(developers|devops|qa)'`",
      "AGENT: 'developers:x:1002:alice,bob,charlie,eve'",
      "AGENT: 'devops:x:3000:charlie'",
      "AGENT: 'qa:x:1003:diana'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Created groups for different teams (developers, devops, qa).'",
      "AGENT: '  ✓ Created user accounts with home directories and proper shells.'",
      "AGENT: '  ✓ Forced password changes on first login for security.'",
      "AGENT: '  ✓ Implemented password policies (expiration, minimum age, warnings).'",
      "AGENT: '  ✓ Added users to multiple groups for access control.'",
      "AGENT: '  ✓ Configured granular sudo access (specific commands only).'",
      "AGENT: '  ✓ Set account expiration dates for contractors.'",
      "AGENT: '  ✓ Automated bulk user creation with script.'",
      "AGENT: '  ✓ Customized default files with /etc/skel/ template.'",
      "AGENT: '  ✓ Your user management is now secure and scalable! 👥'"
    ],
    "commands": ["useradd", "usermod", "userdel", "groupadd", "passwd", "chage", "id", "groups", "getent", "visudo", "sudo"],
    "packages": {
      "debian_ubuntu": ["passwd", "sudo"],
      "arch": ["shadow", "sudo"]
    },
    "related_commands": ["adduser", "deluser", "gpasswd"],
    "complexity": "intermediate",
    "tags": ["user-management", "groups", "permissions", "security", "sudo", "password-policy", "access-control", "system-administration"]
  },
  {
    "id": "scenario_ssh_tunneling_120",
    "command": "ssh",
    "scenario": "Use SSH tunneling and port forwarding for secure remote access.",
    "problem": "Need to access database on remote server that's not exposed to internet, bypass firewall restrictions, create secure connections for remote development, and access services behind NAT/firewall.",
    "solution": "Master SSH tunneling: local port forwarding (-L), remote port forwarding (-R), dynamic SOCKS proxy (-D), ProxyJump for bastion hosts, and SSH config for persistent settings.",
    "steps": [
      "USER SAYS: 'I need to connect to a database on a remote server that's only accessible from localhost. The firewall blocks external connections. How can I access it securely?'",
      "AGENT: 'SSH tunneling is perfect for this! It creates encrypted tunnels through SSH connections. Let me show you local forwarding, remote forwarding, and advanced tunneling techniques.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: SSH tunneling and port forwarding...'",
      "AGENT: '[Searching] \"ssh tunnel port forwarding local remote dynamic proxy\"'",
      "AGENT: '[Found] `-L` (local forward): Access remote service as if it\\'s local.'",
      "AGENT: '[Found] `-R` (remote forward): Expose local service to remote server.'",
      "AGENT: '[Found] `-D` (dynamic): Create SOCKS proxy for all traffic.'",
      "AGENT: '[Found] ProxyJump (-J) for jumping through bastion hosts.'",
      "AGENT: '✓ Research complete! Let's master SSH tunneling.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Local Port Forwarding (Most Common) ---'",
      "AGENT: 'Scenario: Access PostgreSQL on remote server (port 5432)'",
      "Run command: `ssh -L 5433:localhost:5432 user@remote-server.com`",
      "AGENT: ''",
      "AGENT: 'This creates tunnel:'",
      "AGENT: '  Local port 5433 → SSH tunnel → remote localhost:5432'",
      "AGENT: ''",
      "AGENT: 'Now connect locally:'",
      "Run command: `psql -h localhost -p 5433 -U dbuser mydatabase`",
      "AGENT: 'Connected! You\\'re accessing remote database through tunnel'",
      "AGENT: ''",
      "AGENT: 'Syntax: ssh -L [local_port]:[destination_host]:[destination_port] [ssh_server]'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Background Tunnel (No Shell) ---'",
      "Run command: `ssh -f -N -L 5433:localhost:5432 user@remote-server.com`",
      "AGENT: '  -f = Go to background'",
      "AGENT: '  -N = Don\\'t execute remote command (tunnel only)'",
      "AGENT: ''",
      "AGENT: 'Check tunnel is running:'",
      "Run command: `ps aux | grep 'ssh.*5433'`",
      "AGENT: 'user  12345  ssh -f -N -L 5433:localhost:5432 user@remote-server.com'",
      "AGENT: ''",
      "Run command: `ss -tlnp | grep :5433`",
      "AGENT: 'LISTEN 0 128 127.0.0.1:5433  users:((\"ssh\",pid=12345))'",
      "AGENT: ''",
      "AGENT: '✅ Tunnel running in background!'",
      "AGENT: ''",
      "AGENT: 'Kill tunnel:'",
      "Run command: `pkill -f 'ssh.*5433'`",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Access Service on Third Server ---'",
      "AGENT: 'Scenario: Access database on db-server through jump-server'",
      "Run command: `ssh -L 5433:db-server.internal:5432 user@jump-server.com`",
      "AGENT: ''",
      "AGENT: 'Flow: localhost:5433 → jump-server → db-server.internal:5432'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Multiple Tunnels Simultaneously ---'",
      "Run command: `ssh -L 5433:localhost:5432 -L 6380:localhost:6379 -L 8080:localhost:80 user@remote-server.com`",
      "AGENT: 'Creates 3 tunnels at once:'",
      "AGENT: '  Local 5433 → Remote PostgreSQL (5432)'",
      "AGENT: '  Local 6380 → Remote Redis (6379)'",
      "AGENT: '  Local 8080 → Remote HTTP (80)'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Remote Port Forwarding ---'",
      "AGENT: 'Scenario: Expose local web server (port 3000) to remote server'",
      "Run command: `ssh -R 8080:localhost:3000 user@remote-server.com`",
      "AGENT: ''",
      "AGENT: 'Now on remote server:'",
      "Run command: `curl http://localhost:8080`",
      "AGENT: 'Accesses your local web server at localhost:3000!'",
      "AGENT: ''",
      "AGENT: 'Use case: Show local dev work to remote team'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Dynamic SOCKS Proxy ---'",
      "Run command: `ssh -D 9050 user@remote-server.com`",
      "AGENT: 'Creates SOCKS5 proxy on localhost:9050'",
      "AGENT: ''",
      "AGENT: 'Configure browser to use SOCKS proxy:'",
      "AGENT: '  Host: localhost'",
      "AGENT: '  Port: 9050'",
      "AGENT: '  Type: SOCKS v5'",
      "AGENT: ''",
      "AGENT: 'Or use with curl:'",
      "Run command: `curl --socks5 localhost:9050 http://internal-site.local`",
      "AGENT: 'Access internal websites through tunnel!'",
      "AGENT: ''",
      "AGENT: 'Or use with proxychains:'",
      "Run command: `proxychains4 -f <(echo 'socks5 127.0.0.1 9050') curl http://internal-site.local`",
      "AGENT: ''",
      "AGENT: '--- Approach 7: ProxyJump (Bastion Host) ---'",
      "AGENT: 'Access server through bastion/jump host:'",
      "Run command: `ssh -J bastion-host.com target-server.internal`",
      "AGENT: ''",
      "AGENT: 'Multiple jumps:'",
      "Run command: `ssh -J jump1.com,jump2.com target.internal`",
      "AGENT: ''",
      "AGENT: 'With port forwarding through jump:'",
      "Run command: `ssh -J bastion.com -L 5433:localhost:5432 db-server.internal`",
      "AGENT: ''",
      "AGENT: '--- Approach 8: SSH Config for Persistent Settings ---'",
      "Create tool: `cat >> ~/.ssh/config << 'EOF'`",
      "\n# Database tunnel\nHost db-tunnel\n    HostName remote-server.com\n    User dbadmin\n    LocalForward 5433 localhost:5432\n    LocalForward 6380 localhost:6379\n    ServerAliveInterval 60\n    ServerAliveCountMax 3\n\n# Bastion configuration\nHost bastion\n    HostName bastion.example.com\n    User admin\n    Port 2222\n\n# Internal servers (via bastion)\nHost *.internal\n    ProxyJump bastion\n    User developer\n\n# SOCKS proxy\nHost socks-proxy\n    HostName remote-server.com\n    User proxy-user\n    DynamicForward 9050\n    \nEOF",
      "Run command: `chmod 600 ~/.ssh/config`",
      "AGENT: ''",
      "AGENT: 'Now simply run:'",
      "Run command: `ssh db-tunnel`",
      "AGENT: 'Automatically creates both tunnels (5433 and 6380)!'",
      "AGENT: ''",
      "Run command: `ssh socks-proxy`",
      "AGENT: 'Automatically creates SOCKS proxy on 9050!'",
      "AGENT: ''",
      "AGENT: 'Access internal server:'",
      "Run command: `ssh app1.internal`",
      "AGENT: 'Automatically jumps through bastion!'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Reverse Tunnel for NAT Traversal ---'",
      "AGENT: 'On machine behind NAT (local):'",
      "Run command: `ssh -R 2222:localhost:22 user@public-server.com`",
      "AGENT: ''",
      "AGENT: 'On public server:'",
      "Run command: `ssh -p 2222 localhost`",
      "AGENT: 'Now connected back to machine behind NAT!'",
      "AGENT: ''",
      "AGENT: 'Keep tunnel alive with autossh:'",
      "Run command: `autossh -M 0 -f -N -R 2222:localhost:22 user@public-server.com`",
      "AGENT: 'Automatically reconnects if connection drops'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Security and Troubleshooting ---'",
      "AGENT: ''",
      "AGENT: 'Restrict forwarding to localhost only (in sshd_config):'",
      "AGENT: 'GatewayPorts no  # Don\\'t bind to 0.0.0.0'",
      "AGENT: ''",
      "AGENT: 'Bind to specific interface:'",
      "Run command: `ssh -L 127.0.0.1:5433:localhost:5432 user@remote`",
      "AGENT: ''",
      "AGENT: 'Verbose mode for debugging:'",
      "Run command: `ssh -v -L 5433:localhost:5432 user@remote`",
      "AGENT: ''",
      "AGENT: 'Keep connection alive (prevent timeout):'",
      "Run command: `ssh -o ServerAliveInterval=60 -L 5433:localhost:5432 user@remote`",
      "AGENT: ''",
      "AGENT: 'List active SSH connections:'",
      "Run command: `ss -tnp | grep ssh`",
      "AGENT: ''",
      "AGENT: '--- Bonus: Real-World Examples ---'",
      "AGENT: ''",
      "AGENT: 'Example 1: Remote development'",
      "Run command: `ssh -L 3000:localhost:3000 -L 5432:localhost:5432 dev-server`",
      "AGENT: 'Access dev app and database locally'",
      "AGENT: ''",
      "AGENT: 'Example 2: Secure browsing through remote server'",
      "Run command: `ssh -D 9050 -C -N user@remote-server.com`",
      "AGENT: '  -C = Compression (faster for browsing)'",
      "AGENT: 'Configure browser SOCKS proxy: localhost:9050'",
      "AGENT: ''",
      "AGENT: 'Example 3: Access multiple internal services'",
      "Create tool: `cat > tunnel-all.sh << 'EOF'`",
      "#!/bin/bash\nssh -f -N -L 5433:db1.internal:5432 \\\n         -L 5434:db2.internal:5432 \\\n         -L 6380:cache.internal:6379 \\\n         -L 9200:search.internal:9200 \\\n         -L 8080:app.internal:80 \\\n         user@bastion.com\necho \"All tunnels established!\"\nEOF",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Created local port forwarding to access remote services securely.'",
      "AGENT: '  ✓ Used background tunnels with -f -N for persistent connections.'",
      "AGENT: '  ✓ Set up multiple simultaneous tunnels.'",
      "AGENT: '  ✓ Implemented remote port forwarding to expose local services.'",
      "AGENT: '  ✓ Created dynamic SOCKS proxy for secure browsing.'",
      "AGENT: '  ✓ Used ProxyJump for bastion host traversal.'",
      "AGENT: '  ✓ Configured persistent settings in ~/.ssh/config.'",
      "AGENT: '  ✓ Implemented reverse tunnels for NAT traversal.'",
      "AGENT: '  ✓ You now master SSH tunneling for secure remote access! 🔐'"
    ],
    "commands": ["ssh", "psql", "curl", "ss", "ps", "pkill", "autossh", "proxychains"],
    "packages": {
      "debian_ubuntu": ["openssh-client", "autossh", "proxychains4"],
      "arch": ["openssh", "autossh", "proxychains-ng"]
    },
    "related_commands": ["sshuttle", "ngrok", "chisel"],
    "complexity": "advanced",
    "tags": ["ssh", "tunneling", "port-forwarding", "security", "proxy", "bastion", "remote-access", "networking"]
  }
]

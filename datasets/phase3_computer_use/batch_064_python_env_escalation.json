[
  {
    "id": "scenario_python_env_multi_approach_001",
    "command": "python",
    "scenario": "Developer: Python environment issues, wrong versions, conflicts",
    "problem": "Multiple Python versions causing package conflicts",
    "solution": "Set up proper virtual environment",
    "steps": [
      "USER SAYS: 'My Python script broke! ModuleNotFoundError even though I installed it!'",
      "AGENT: 'Let me check your Python environment...'",
      "AGENT: 'Approach 1: Check which Python is running...'",
      "Check python: which python",
      "AGENT: '/usr/bin/python'",
      "Check version: python --version",
      "AGENT: 'Python 2.7.18 ✗'",
      "AGENT: 'You\\'re using Python 2 (end of life)!'",
      "Try python3: python3 --version",
      "AGENT: 'Python 3.11.4 ✓'",
      "AGENT: 'Python 3 is installed'",
      "USER: 'But I installed the package!'",
      "AGENT: 'Approach 2: Check where package was installed...'",
      "Check pip: which pip",
      "AGENT: '/usr/bin/pip'",
      "Check pip version: pip --version",
      "AGENT: 'pip 20.0.2 from /usr/lib/python2.7/dist-packages/pip (python 2.7) ✗'",
      "AGENT: 'pip is for Python 2!'",
      "Try pip3: pip3 --version",
      "AGENT: 'pip 23.1.2 from /usr/lib/python3/dist-packages/pip (python 3.11) ✓'",
      "AGENT: 'pip3 is for Python 3'",
      "AGENT: 'Approach 3: Install with correct pip...'",
      "Install: pip3 install requests",
      "AGENT: 'Requirement already satisfied: requests in /usr/lib/python3/dist-packages ✓'",
      "Try script: python3 script.py",
      "AGENT: 'ModuleNotFoundError: No module named \\'fastapi\\' ✗'",
      "AGENT: 'Different package missing'",
      "Install fastapi: pip3 install fastapi",
      "AGENT: 'ERROR: externally-managed-environment ✗'",
      "AGENT: 'Cannot install to system Python (PEP 668)'",
      "USER: 'Why won\\'t it let me install?'",
      "AGENT: 'Modern systems protect system Python. Need virtual environment...'",
      "AGENT: 'Approach 4: Create virtual environment...'",
      "Create venv: python3 -m venv myproject_env",
      "AGENT: 'Virtual environment created ✓'",
      "Activate: source myproject_env/bin/activate",
      "AGENT: '(myproject_env) user@host:~$ ✓'",
      "AGENT: 'Virtual environment activated'",
      "Check python: which python",
      "AGENT: '/home/user/myproject_env/bin/python ✓'",
      "AGENT: 'Now using venv Python'",
      "Install: pip install fastapi",
      "AGENT: 'Successfully installed fastapi-0.104.1 ✓'",
      "Install more: pip install uvicorn requests",
      "AGENT: 'Successfully installed uvicorn-0.24.0 requests-2.31.0 ✓'",
      "Try script: python script.py",
      "AGENT: 'Server running on http://127.0.0.1:8000 ✓'",
      "AGENT: 'Script working!'",
      "USER: 'Do I need to activate this every time?'",
      "AGENT: 'Approach 5: Automate with script...'",
      "Create runner: cat > run.sh << 'EOF'",
      "#!/bin/bash",
      "source myproject_env/bin/activate",
      "python script.py",
      "EOF",
      "chmod +x run.sh",
      "AGENT: 'Now run with: ./run.sh ✓'",
      "AGENT: 'Approach 6: Freeze dependencies...'",
      "Freeze: pip freeze > requirements.txt",
      "AGENT: 'Dependencies saved ✓'",
      "Show: cat requirements.txt",
      "AGENT: 'fastapi==0.104.1'",
      "AGENT: 'uvicorn==0.24.0'",
      "AGENT: 'requests==2.31.0'",
      "AGENT: 'Anyone can recreate: pip install -r requirements.txt'",
      "AGENT: 'Approach 7: Use pyenv for version management...'",
      "Show method: cat > ~/setup-pyenv.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Installing pyenv ==='",
      "# Install pyenv",
      "curl https://pyenv.run | bash",
      "# Add to shell",
      "cat >> ~/.bashrc << 'PYENV'",
      "export PYENV_ROOT=\"$HOME/.pyenv\"",
      "export PATH=\"$PYENV_ROOT/bin:$PATH\"",
      "eval \"$(pyenv init -)\"",
      "PYENV",
      "source ~/.bashrc",
      "echo '✓ pyenv installed'",
      "echo ''",
      "echo 'Usage:'",
      "echo '  pyenv install 3.11.4   # Install specific version'",
      "echo '  pyenv global 3.11.4    # Set default'",
      "echo '  pyenv local 3.10.12    # Set for project'",
      "echo '  pyenv versions         # List installed'",
      "EOF",
      "chmod +x ~/setup-pyenv.sh",
      "AGENT: 'Approach 8: Use poetry for dependency management...'",
      "Show method: cat > ~/setup-poetry.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Installing Poetry ==='",
      "curl -sSL https://install.python-poetry.org | python3 -",
      "echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.bashrc",
      "source ~/.bashrc",
      "echo '✓ Poetry installed'",
      "echo ''",
      "echo 'Initialize project:'",
      "echo '  poetry init'",
      "echo '  poetry add fastapi uvicorn'",
      "echo '  poetry install'",
      "echo '  poetry run python script.py'",
      "EOF",
      "chmod +x ~/setup-poetry.sh",
      "AGENT: 'Approach 9: Use conda for data science...'",
      "Show method: cat > ~/setup-conda.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Installing Miniconda ==='",
      "wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh",
      "bash Miniconda3-latest-Linux-x86_64.sh -b",
      "echo 'export PATH=\"$HOME/miniconda3/bin:$PATH\"' >> ~/.bashrc",
      "source ~/.bashrc",
      "echo '✓ Conda installed'",
      "echo ''",
      "echo 'Usage:'",
      "echo '  conda create -n myenv python=3.11'",
      "echo '  conda activate myenv'",
      "echo '  conda install numpy pandas scikit-learn'",
      "echo '  conda deactivate'",
      "EOF",
      "chmod +x ~/setup-conda.sh",
      "AGENT: 'Approach 10: Fix common pip issues...'",
      "Show method: cat > ~/fix-pip-issues.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Fixing Common Pip Issues ==='",
      "echo ''",
      "echo '1. Upgrade pip'",
      "python3 -m pip install --upgrade pip",
      "echo ''",
      "echo '2. Clear pip cache'",
      "pip cache purge",
      "echo ''",
      "echo '3. Install with user flag (if no venv)'",
      "echo '   pip install --user <package>'",
      "echo ''",
      "echo '4. Force reinstall'",
      "echo '   pip install --force-reinstall <package>'",
      "echo ''",
      "echo '5. Fix externally-managed error'",
      "echo '   Use venv: python3 -m venv env && source env/bin/activate'",
      "echo '   Or use pipx for tools: pipx install <tool>'",
      "EOF",
      "chmod +x ~/fix-pip-issues.sh",
      "Create Python env helper: cat > ~/python-env-helper.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Python Environment Helper ==='",
      "echo ''",
      "echo 'Current Python info:'",
      "which python python3 2>/dev/null",
      "python3 --version 2>/dev/null",
      "which pip pip3 2>/dev/null",
      "pip3 --version 2>/dev/null",
      "echo ''",
      "if [ -n \"$VIRTUAL_ENV\" ]; then",
      "  echo \"✓ In virtual environment: $VIRTUAL_ENV\"",
      "else",
      "  echo '✗ Not in virtual environment'",
      "fi",
      "echo ''",
      "echo 'Actions:'",
      "echo '1. Create new venv'",
      "echo '2. Activate existing venv'",
      "echo '3. Deactivate venv'",
      "echo '4. List installed packages'",
      "echo '5. Install from requirements.txt'",
      "echo '6. Export requirements.txt'",
      "echo '7. Check which Python pip uses'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1)",
      "    read -p 'Venv name: ' NAME",
      "    python3 -m venv $NAME",
      "    echo \"✓ Created $NAME\"",
      "    echo \"Activate: source $NAME/bin/activate\"",
      "    ;;",
      "  2)",
      "    read -p 'Venv path: ' PATH",
      "    source \"$PATH/bin/activate\"",
      "    echo '✓ Activated'",
      "    ;;",
      "  3)",
      "    deactivate 2>/dev/null && echo '✓ Deactivated' || echo '✗ Not in venv'",
      "    ;;",
      "  4)",
      "    pip list",
      "    ;;",
      "  5)",
      "    pip install -r requirements.txt",
      "    ;;",
      "  6)",
      "    pip freeze > requirements.txt",
      "    echo '✓ Exported to requirements.txt'",
      "    ;;",
      "  7)",
      "    pip --version",
      "    python -c 'import sys; print(sys.executable)'",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/python-env-helper.sh",
      "Create venv setup script: cat > ~/setup-python-project.sh << 'EOF'",
      "#!/bin/bash",
      "PROJECT=$1",
      "if [ -z \"$PROJECT\" ]; then",
      "  echo 'Usage: ./setup-python-project.sh <project_name>'",
      "  exit 1",
      "fi",
      "echo \"Setting up Python project: $PROJECT\"",
      "echo ''",
      "# Create project structure",
      "mkdir -p $PROJECT/{src,tests,docs}",
      "cd $PROJECT",
      "# Create venv",
      "python3 -m venv venv",
      "echo '✓ Virtual environment created'",
      "# Create .gitignore",
      "cat > .gitignore << 'GIT'",
      "venv/",
      "__pycache__/",
      "*.pyc",
      ".pytest_cache/",
      "*.egg-info/",
      "dist/",
      "build/",
      "GIT",
      "# Create requirements.txt",
      "touch requirements.txt",
      "# Create README",
      "cat > README.md << 'README'",
      "# $PROJECT",
      "## Setup",
      "```bash",
      "python3 -m venv venv",
      "source venv/bin/activate",
      "pip install -r requirements.txt",
      "```",
      "## Run",
      "```bash",
      "./run.sh",
      "```",
      "README",
      "# Create run script",
      "cat > run.sh << 'RUN'",
      "#!/bin/bash",
      "source venv/bin/activate",
      "python src/main.py",
      "RUN",
      "chmod +x run.sh",
      "# Create main.py",
      "cat > src/main.py << 'MAIN'",
      "def main():",
      "    print(\"Hello from $PROJECT!\")",
      "if __name__ == \"__main__\":",
      "    main()",
      "MAIN",
      "echo ''",
      "echo '✓ Project structure created'",
      "echo ''",
      "echo 'Next steps:'",
      "echo \"  cd $PROJECT\"",
      "echo '  source venv/bin/activate'",
      "echo '  pip install <packages>'",
      "echo '  pip freeze > requirements.txt'",
      "EOF",
      "chmod +x ~/setup-python-project.sh",
      "AGENT: 'Python environment fixed! ✓'",
      "AGENT: ''",
      "AGENT: 'Problems identified and fixed:'",
      "AGENT: '  1. Using Python 2 instead of Python 3'",
      "AGENT: '  2. pip installing to Python 2'",
      "AGENT: '  3. System Python protected (PEP 668)'",
      "AGENT: '  4. No virtual environment'",
      "AGENT: ''",
      "AGENT: 'Solutions applied:'",
      "AGENT: '  1. Check python → Python 2.7'",
      "AGENT: '  2. Try python3 → 3.11.4 available'",
      "AGENT: '  3. Check pip → for Python 2'",
      "AGENT: '  4. Try pip3 → correct version'",
      "AGENT: '  5. Install package → protected'",
      "AGENT: '  6. Create venv → success'",
      "AGENT: '  7. Activate and install → working'",
      "AGENT: ''",
      "AGENT: 'Alternative approaches:'",
      "AGENT: '  7. Use pyenv for version management'",
      "AGENT: '  8. Use poetry for dependencies'",
      "AGENT: '  9. Use conda for data science'",
      "AGENT: '  10. Fix common pip issues'",
      "AGENT: ''",
      "AGENT: 'Tools created:'",
      "AGENT: '  ~/python-env-helper.sh - manage environments'",
      "AGENT: '  ~/setup-python-project.sh - new project template'",
      "AGENT: '  requirements.txt - reproducible dependencies'",
      "AGENT: '  run.sh - convenient script runner'",
      "AGENT: ''",
      "AGENT: 'Venv active, all packages working! ✓'"
    ],
    "commands": ["python", "pip", "python3", "pip3"],
    "packages": {"debian_ubuntu": ["python3", "python3-pip", "python3-venv"], "arch": ["python", "python-pip"]},
    "related_commands": ["python3", "pip3", "virtualenv", "pyenv", "poetry"],
    "complexity": "intermediate",
    "tags": ["python", "pip", "virtualenv", "package-management", "multiple-approaches", "development", "troubleshooting", "real-world", "ai-agent"]
  }
]

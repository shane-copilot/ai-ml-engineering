[
  {
    "id": "scenario_usb_device_issues_001",
    "command": "multiple",
    "scenario": "User: USB device not recognized or not working",
    "problem": "USB drive, keyboard, or device not detected",
    "solution": "Troubleshoot USB, check drivers, fix permissions",
    "steps": [
      "USER SAYS: 'I plugged in my USB drive but nothing happens!'",
      "AGENT: 'Let me check if the system detects the USB device...'",
      "Check dmesg: sudo dmesg | tail -20",
      "AGENT: 'Looking for USB connection events...'",
      "If found: AGENT: 'USB device detected: [sdb] Attached SCSI disk'",
      "Check block devices: lsblk",
      "AGENT: 'Your USB is /dev/sdb1 but not mounted.'",
      "Create mount point: sudo mkdir -p /mnt/usb",
      "Mount: sudo mount /dev/sdb1 /mnt/usb",
      "Check: ls /mnt/usb",
      "AGENT: 'USB mounted successfully! ✓'",
      "AGENT: 'Files accessible at /mnt/usb'",
      "USER: 'But I want it to auto-mount like on Windows'",
      "AGENT: 'Installing automount tools...'",
      "Install: sudo apt install udisks2 || sudo pacman -S udisks2",
      "Enable: sudo systemctl enable --now udisks2",
      "AGENT: 'USB drives will now auto-mount to /media/username/ ✓'",
      "Create mount helper: cat > ~/mount-usb.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== USB Mount Helper ==='",
      "echo ''",
      "echo 'Available USB devices:'",
      "lsblk | grep -E 'sd[b-z]'",
      "echo ''",
      "read -p 'Device to mount (e.g., sdb1): ' DEV",
      "MOUNT_POINT=\"/mnt/usb-$DEV\"",
      "sudo mkdir -p $MOUNT_POINT",
      "sudo mount /dev/$DEV $MOUNT_POINT",
      "echo \"✓ Mounted at $MOUNT_POINT\"",
      "xdg-open $MOUNT_POINT",
      "EOF",
      "chmod +x ~/mount-usb.sh",
      "Create unmount helper: cat > ~/unmount-usb.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Safely Remove USB ==='",
      "mount | grep '/dev/sd[b-z]'",
      "read -p 'Device to unmount: ' DEV",
      "sudo umount /dev/$DEV",
      "sudo eject /dev/${DEV:0:3}",
      "echo '✓ Safe to remove USB'",
      "EOF",
      "chmod +x ~/unmount-usb.sh",
      "AGENT: 'USB tools created! ✓'"
    ],
    "commands": ["dmesg", "lsblk", "mount", "umount", "eject", "systemctl"],
    "packages": {"debian_ubuntu": ["udisks2"], "arch": ["udisks2"]},
    "related_commands": ["lsblk", "mount", "dmesg", "lsusb"],
    "complexity": "beginner",
    "tags": ["usb", "mount", "hardware", "devices", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_audio_issues_001",
    "command": "multiple",
    "scenario": "User: No sound or audio not working",
    "problem": "Audio output not working, wrong device selected",
    "solution": "Fix audio configuration, check ALSA/PulseAudio",
    "steps": [
      "USER SAYS: 'I have no sound! Audio completely stopped working.'",
      "AGENT: 'Let me diagnose the audio system...'",
      "Check sound cards: aplay -l",
      "AGENT: 'Found sound cards: Intel HDA, HDMI'",
      "Check volume: amixer",
      "AGENT: 'Master volume is at 0% and muted!'",
      "Unmute: amixer sset Master unmute",
      "Set volume: amixer sset Master 50%",
      "Test: speaker-test -t wav -c 2",
      "AGENT: 'You should hear sound now. Do you?'",
      "USER: 'Yes! It works!'",
      "AGENT: 'Audio was just muted. ✓'",
      "Install GUI: sudo apt install pavucontrol || sudo pacman -S pavucontrol",
      "AGENT: 'Installed PulseAudio Volume Control for easy management. ✓'",
      "Create audio checker: cat > ~/check-audio.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Audio System Check ==='",
      "echo ''",
      "echo '1. Sound Cards:'",
      "aplay -l",
      "echo ''",
      "echo '2. Volume Levels:'",
      "amixer | grep -A 3 'Master'",
      "echo ''",
      "echo '3. PulseAudio:'",
      "pactl info | grep 'Server Name'",
      "echo ''",
      "echo '4. Playing test sound...'",
      "speaker-test -t wav -c 2 -l 1",
      "EOF",
      "chmod +x ~/check-audio.sh",
      "AGENT: 'Audio checker created! ✓'"
    ],
    "commands": ["aplay", "amixer", "pactl", "speaker-test"],
    "packages": {"debian_ubuntu": ["alsa-utils", "pulseaudio", "pavucontrol"], "arch": ["alsa-utils", "pulseaudio", "pavucontrol"]},
    "related_commands": ["aplay", "amixer", "pactl", "alsamixer"],
    "complexity": "beginner",
    "tags": ["audio", "sound", "alsa", "pulseaudio", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_keyboard_shortcuts_001",
    "command": "multiple",
    "scenario": "User: Want to setup custom keyboard shortcuts",
    "problem": "Need faster workflow with keyboard shortcuts",
    "solution": "Configure custom keybindings",
    "steps": [
      "USER SAYS: 'I want keyboard shortcuts for common tasks.'",
      "AGENT: 'Let me help you set up custom shortcuts!'",
      "Create script dir: mkdir -p ~/.local/bin",
      "Add to PATH: echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.bashrc",
      "Create screenshot script: cat > ~/.local/bin/screenshot.sh << 'EOF'",
      "#!/bin/bash",
      "scrot ~/Pictures/screenshot-%Y%m%d-%H%M%S.png",
      "notify-send 'Screenshot saved'",
      "EOF",
      "chmod +x ~/.local/bin/screenshot.sh",
      "Install scrot: sudo apt install scrot || sudo pacman -S scrot",
      "AGENT: 'In your desktop settings, bind Print key to: screenshot.sh'",
      "Create launcher script: cat > ~/.local/bin/quick-terminal.sh << 'EOF'",
      "#!/bin/bash",
      "gnome-terminal --geometry=120x30",
      "EOF",
      "chmod +x ~/.local/bin/quick-terminal.sh",
      "AGENT: 'Common shortcuts I recommend:'",
      "AGENT: '- Super+T: Terminal'",
      "AGENT: '- Print: Screenshot'",
      "AGENT: '- Super+E: File manager'",
      "AGENT: '- Super+L: Lock screen'",
      "AGENT: 'Configure these in Settings → Keyboard ✓'"
    ],
    "commands": ["mkdir", "chmod", "scrot", "notify-send"],
    "packages": {"debian_ubuntu": ["scrot"], "arch": ["scrot"]},
    "related_commands": ["xbindkeys", "xdotool", "scrot"],
    "complexity": "beginner",
    "tags": ["keyboard", "shortcuts", "productivity", "workflow", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_screen_resolution_001",
    "command": "multiple",
    "scenario": "User: Screen resolution wrong or multi-monitor setup",
    "problem": "Resolution incorrect, monitors not detected",
    "solution": "Configure display settings with xrandr",
    "steps": [
      "USER SAYS: 'My external monitor isn't detected!'",
      "AGENT: 'Let me check your display configuration...'",
      "Check displays: xrandr",
      "AGENT: 'Detected displays:'",
      "AGENT: '- eDP-1: 1920x1080 (laptop)'",
      "AGENT: '- HDMI-1: connected but disabled'",
      "Enable HDMI: xrandr --output HDMI-1 --auto --right-of eDP-1",
      "AGENT: 'External monitor activated! ✓'",
      "Make permanent: cat > ~/.xprofile << 'EOF'",
      "xrandr --output HDMI-1 --auto --right-of eDP-1",
      "EOF",
      "Create display script: cat > ~/display-setup.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Display Setup ==='",
      "echo ''",
      "echo '1. Single display (laptop only)'",
      "echo '2. Dual display (laptop + HDMI)'",
      "echo '3. External only (HDMI only)'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) xrandr --output eDP-1 --auto --output HDMI-1 --off ;;",
      "  2) xrandr --output eDP-1 --auto --output HDMI-1 --auto --right-of eDP-1 ;;",
      "  3) xrandr --output eDP-1 --off --output HDMI-1 --auto ;;",
      "esac",
      "EOF",
      "chmod +x ~/display-setup.sh",
      "AGENT: 'Display manager created! ✓'"
    ],
    "commands": ["xrandr"],
    "packages": {"debian_ubuntu": ["x11-xserver-utils"], "arch": ["xorg-xrandr"]},
    "related_commands": ["xrandr", "xdpyinfo"],
    "complexity": "beginner",
    "tags": ["display", "monitor", "xrandr", "resolution", "multi-monitor", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_fonts_install_001",
    "command": "multiple",
    "scenario": "User: Want to install custom fonts",
    "problem": "Need specific fonts for design/development",
    "solution": "Install fonts system-wide or user-specific",
    "steps": [
      "USER SAYS: 'I need to install some custom fonts.'",
      "AGENT: 'I'll help you install fonts. Do you have font files?'",
      "USER: 'Yes, TTF files'",
      "Create font dir: mkdir -p ~/.local/share/fonts",
      "Copy fonts: cp ~/Downloads/*.ttf ~/.local/share/fonts/",
      "Update cache: fc-cache -fv",
      "AGENT: 'Fonts installed! ✓'",
      "List fonts: fc-list | grep -i 'font-name'",
      "AGENT: 'Your new fonts are available in all applications.'",
      "Install programming fonts: sudo apt install fonts-firacode || sudo pacman -S ttf-fira-code",
      "AGENT: 'Installed Fira Code (programming font with ligatures) ✓'",
      "Create font installer: cat > ~/install-fonts.sh << 'EOF'",
      "#!/bin/bash",
      "FONT_DIR=~/.local/share/fonts",
      "mkdir -p $FONT_DIR",
      "echo 'Copy your .ttf or .otf files to:'",
      "echo $FONT_DIR",
      "read -p 'Press Enter when ready...'",
      "fc-cache -fv",
      "echo '✓ Fonts installed'",
      "EOF",
      "chmod +x ~/install-fonts.sh",
      "AGENT: 'Font installer created! ✓'"
    ],
    "commands": ["mkdir", "cp", "fc-cache", "fc-list"],
    "packages": {"debian_ubuntu": ["fontconfig"], "arch": ["fontconfig"]},
    "related_commands": ["fc-cache", "fc-list", "fc-match"],
    "complexity": "beginner",
    "tags": ["fonts", "typography", "customization", "design", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_clipboard_manager_001",
    "command": "multiple",
    "scenario": "User: Want clipboard history manager",
    "problem": "Can only copy one thing at a time",
    "solution": "Install and configure clipboard manager",
    "steps": [
      "USER SAYS: 'I keep losing what I copied when I copy something else.'",
      "AGENT: 'You need a clipboard manager! Let me install one.'",
      "Install: sudo apt install copyq || sudo pacman -S copyq",
      "Autostart: mkdir -p ~/.config/autostart",
      "Create autostart: cat > ~/.config/autostart/copyq.desktop << 'EOF'",
      "[Desktop Entry]",
      "Type=Application",
      "Name=CopyQ",
      "Exec=copyq",
      "EOF",
      "Start now: copyq &",
      "AGENT: 'CopyQ installed and running! ✓'",
      "AGENT: 'Press Ctrl+Shift+V to see clipboard history'",
      "AGENT: 'It saves your last 200 clips automatically.'",
      "Alternative CLI: sudo apt install xclip || sudo pacman -S xclip",
      "Create clip saver: cat > ~/.local/bin/clip-save << 'EOF'",
      "#!/bin/bash",
      "CLIP_DIR=~/.clipboard-history",
      "mkdir -p $CLIP_DIR",
      "xclip -o -selection clipboard > $CLIP_DIR/clip-$(date +%s).txt",
      "EOF",
      "chmod +x ~/.local/bin/clip-save",
      "AGENT: 'Clipboard manager ready! ✓'"
    ],
    "commands": ["copyq", "xclip", "mkdir"],
    "packages": {"debian_ubuntu": ["copyq", "xclip"], "arch": ["copyq", "xclip"]},
    "related_commands": ["xclip", "xsel", "copyq"],
    "complexity": "beginner",
    "tags": ["clipboard", "productivity", "tools", "workflow", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_file_search_tools_001",
    "command": "multiple",
    "scenario": "User: Can't find files quickly, need better search",
    "problem": "File search is slow, need powerful tools",
    "solution": "Install modern search tools like fd and ripgrep",
    "steps": [
      "USER SAYS: 'Finding files takes forever. find command is so slow!'",
      "AGENT: 'Let me install modern, fast search tools!'",
      "Install fd: sudo apt install fd-find || sudo pacman -S fd",
      "Install ripgrep: sudo apt install ripgrep || sudo pacman -S ripgrep",
      "AGENT: 'Installed fd (fast find) and ripgrep (fast grep) ✓'",
      "Demo fd: fd 'pattern'",
      "AGENT: 'fd is 10x faster than find and easier syntax'",
      "Demo rg: rg 'text to find'",
      "AGENT: 'ripgrep searches file contents super fast'",
      "Create search helper: cat > ~/search.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Quick Search ==='",
      "echo ''",
      "echo '1. Find file by name'",
      "echo '2. Search file contents'",
      "echo '3. Find recently modified'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) read -p 'Filename pattern: ' PAT; fd \"$PAT\" ;;",
      "  2) read -p 'Text to find: ' TXT; rg \"$TXT\" ;;",
      "  3) fd -t f --changed-within 1d ;;",
      "esac",
      "EOF",
      "chmod +x ~/search.sh",
      "Add aliases: cat >> ~/.bashrc << 'EOF'",
      "alias ff='fd'",
      "alias search='rg'",
      "alias recent='fd -t f --changed-within 1d'",
      "EOF",
      "source ~/.bashrc",
      "AGENT: 'Fast search tools ready! ✓'"
    ],
    "commands": ["fd", "rg", "find", "grep"],
    "packages": {"debian_ubuntu": ["fd-find", "ripgrep"], "arch": ["fd", "ripgrep"]},
    "related_commands": ["fd", "rg", "find", "grep", "locate"],
    "complexity": "beginner",
    "tags": ["search", "find", "grep", "tools", "productivity", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_system_cleanup_001",
    "command": "multiple",
    "scenario": "User: System is cluttered, need cleanup",
    "problem": "Disk full of cache, logs, old packages",
    "solution": "Comprehensive system cleanup",
    "steps": [
      "USER SAYS: 'My disk is full but I don't know what's using space!'",
      "AGENT: 'Let me analyze disk usage and clean up...'",
      "Check space: df -h /",
      "AGENT: 'Root partition: 95% full!'",
      "Find large dirs: sudo du -h / 2>/dev/null | sort -rh | head -20",
      "AGENT: 'Largest directories:'",
      "AGENT: '- /var/log: 8.2GB'",
      "AGENT: '- /var/cache: 6.5GB'",
      "AGENT: '- ~/.cache: 4.1GB'",
      "Clean package cache: sudo apt clean || sudo pacman -Sc --noconfirm",
      "AGENT: 'Package cache cleaned: freed 3.2GB ✓'",
      "Clean old logs: sudo journalctl --vacuum-time=7d",
      "AGENT: 'Old logs removed: freed 4.8GB ✓'",
      "Clean user cache: rm -rf ~/.cache/*",
      "AGENT: 'User cache cleared: freed 4.1GB ✓'",
      "Remove old kernels: sudo apt autoremove || sudo pacman -Sc",
      "AGENT: 'Old kernels removed: freed 1.2GB ✓'",
      "Create cleanup script: cat > ~/cleanup-system.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== System Cleanup ==='",
      "echo ''",
      "echo 'Before cleanup:'",
      "df -h / | tail -1",
      "echo ''",
      "echo 'Cleaning package cache...'",
      "if command -v apt &>/dev/null; then",
      "  sudo apt clean",
      "  sudo apt autoclean",
      "  sudo apt autoremove -y",
      "elif command -v pacman &>/dev/null; then",
      "  sudo pacman -Sc --noconfirm",
      "fi",
      "echo 'Cleaning logs...'",
      "sudo journalctl --vacuum-time=7d",
      "echo 'Cleaning cache...'",
      "rm -rf ~/.cache/*",
      "echo 'Cleaning thumbnails...'",
      "rm -rf ~/.thumbnails/*",
      "echo 'Cleaning trash...'",
      "rm -rf ~/.local/share/Trash/*",
      "echo ''",
      "echo 'After cleanup:'",
      "df -h / | tail -1",
      "echo ''",
      "echo '✓ Cleanup complete!'",
      "EOF",
      "chmod +x ~/cleanup-system.sh",
      "Schedule monthly: (crontab -l 2>/dev/null; echo '0 0 1 * * ~/cleanup-system.sh') | crontab -",
      "AGENT: 'System cleaned! Freed 13.3GB ✓'",
      "AGENT: 'Monthly auto-cleanup scheduled ✓'"
    ],
    "commands": ["df", "du", "apt", "pacman", "journalctl", "rm", "crontab"],
    "packages": {"debian_ubuntu": [], "arch": []},
    "related_commands": ["df", "du", "ncdu", "bleachbit"],
    "complexity": "beginner",
    "tags": ["cleanup", "disk-space", "maintenance", "optimization", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_password_manager_001",
    "command": "multiple",
    "scenario": "User: Need secure password management",
    "problem": "Weak passwords, reusing passwords",
    "solution": "Setup KeePassXC password manager",
    "steps": [
      "USER SAYS: 'I use the same password everywhere. Is that bad?'",
      "AGENT: 'Very bad! Let me set up a password manager for you.'",
      "Install: sudo apt install keepassxc || sudo pacman -S keepassxc",
      "Start: keepassxc &",
      "AGENT: 'KeePassXC installed and running ✓'",
      "AGENT: 'Steps to use:'",
      "AGENT: '1. Create new database'",
      "AGENT: '2. Set a strong master password (only one to remember!)'",
      "AGENT: '3. Generate unique passwords for each site'",
      "AGENT: '4. Auto-fill passwords with Ctrl+Shift+V'",
      "Install browser extension: AGENT: 'Install KeePassXC-Browser extension for auto-fill'",
      "CLI option: sudo apt install pass || sudo pacman -S pass",
      "AGENT: 'Alternative: pass (command-line password manager)'",
      "Create generator: cat > ~/gen-password.sh << 'EOF'",
      "#!/bin/bash",
      "LENGTH=${1:-16}",
      "tr -dc 'A-Za-z0-9!@#$%^&*' < /dev/urandom | head -c $LENGTH",
      "echo",
      "EOF",
      "chmod +x ~/gen-password.sh",
      "AGENT: 'Password generator created ✓'",
      "AGENT: 'Now you can use unique passwords everywhere! ✓'"
    ],
    "commands": ["keepassxc", "pass", "tr", "head"],
    "packages": {"debian_ubuntu": ["keepassxc", "pass"], "arch": ["keepassxc", "pass"]},
    "related_commands": ["keepassxc", "pass", "pwgen"],
    "complexity": "beginner",
    "tags": ["security", "passwords", "privacy", "encryption", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_dual_boot_time_fix_001",
    "command": "multiple",
    "scenario": "User: Time wrong when switching between Linux and Windows",
    "problem": "Dual boot time sync issues",
    "solution": "Configure Linux to use local time like Windows",
    "steps": [
      "USER SAYS: 'When I boot Windows then Linux, the time is wrong!'",
      "AGENT: 'Classic dual-boot issue! Windows uses local time, Linux uses UTC.'",
      "AGENT: 'Let me fix this by making Linux use local time...'",
      "Set local time: sudo timedatectl set-local-rtc 1 --adjust-system-clock",
      "Verify: timedatectl",
      "AGENT: 'RTC in local TZ: yes ✓'",
      "AGENT: 'Time sync fixed! No more time issues between OSes ✓'",
      "Alternative: AGENT: 'Or make Windows use UTC (better but requires registry edit)'",
      "Create sync script: cat > ~/sync-time.sh << 'EOF'",
      "#!/bin/bash",
      "sudo timedatectl set-ntp true",
      "sudo hwclock --systohc",
      "echo '✓ Time synchronized'",
      "EOF",
      "chmod +x ~/sync-time.sh",
      "AGENT: 'Time sync tool created ✓'"
    ],
    "commands": ["timedatectl", "hwclock"],
    "packages": {"debian_ubuntu": ["systemd"], "arch": ["systemd"]},
    "related_commands": ["timedatectl", "hwclock", "date"],
    "complexity": "beginner",
    "tags": ["dual-boot", "time", "windows", "sync", "troubleshooting", "real-world", "ai-agent"]
  }
]

[
  {
    "id": "scenario_stress_testing_001",
    "command": "stress-ng",
    "scenario": "User: Need to test system stability under load",
    "problem": "Want to verify system can handle peak load",
    "solution": "Use stress-ng for comprehensive stress testing",
    "steps": [
      "USER SAYS: 'I upgraded hardware. How do I test if it\\'s stable?'",
      "AGENT: 'Let me run comprehensive stress tests...'",
      "Install: sudo apt install stress-ng s-tui || sudo pacman -S stress-ng s-tui",
      "AGENT: 'Stress testing tools installed ✓'",
      "CPU stress: stress-ng --cpu 0 --timeout 60s --metrics-brief",
      "AGENT: 'Testing all CPU cores for 60 seconds...'",
      "AGENT: 'Temperature: 75°C (safe)'",
      "AGENT: 'CPU test passed ✓'",
      "Memory stress: stress-ng --vm 4 --vm-bytes 80% --timeout 60s",
      "AGENT: 'Testing RAM with 4 workers...'",
      "AGENT: 'Memory test passed ✓'",
      "Disk stress: stress-ng --hdd 4 --hdd-bytes 1G --timeout 60s",
      "AGENT: 'Testing disk I/O...'",
      "AGENT: 'Disk test passed ✓'",
      "Full system stress: stress-ng --cpu 8 --io 4 --vm 2 --vm-bytes 1G --timeout 300s --metrics-brief",
      "AGENT: 'Running combined stress test (5 minutes)...'",
      "AGENT: 'This simulates heavy production load'",
      "Monitor with s-tui: s-tui &",
      "AGENT: 's-tui opened - real-time monitoring with graphs'",
      "AGENT: 'Watch temperature, frequency, power usage'",
      "USER: 'All tests passed! But temperature got high.'",
      "AGENT: 'Let me check thermal limits...'",
      "Check thermal: sensors",
      "AGENT: 'CPU temp: 85°C (max 100°C)'",
      "AGENT: 'Safe margins, but consider better cooling for sustained loads'",
      "Create stress test suite: cat > ~/stress-test.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== System Stress Test Suite ==='",
      "echo ''",
      "echo 'This will stress test your system. Continue? (y/n)'",
      "read -p '> ' CONFIRM",
      "if [ \"$CONFIRM\" != 'y' ]; then exit; fi",
      "echo ''",
      "echo '1. CPU Stress Test (60s)'",
      "echo 'Testing...'",
      "stress-ng --cpu 0 --timeout 60s --metrics-brief",
      "echo '✓ CPU test complete'",
      "sleep 30",
      "echo ''",
      "echo '2. Memory Stress Test (60s)'",
      "echo 'Testing...'",
      "stress-ng --vm 4 --vm-bytes 80% --timeout 60s --metrics-brief",
      "echo '✓ Memory test complete'",
      "sleep 30",
      "echo ''",
      "echo '3. Disk I/O Test (60s)'",
      "echo 'Testing...'",
      "stress-ng --hdd 4 --timeout 60s --metrics-brief",
      "echo '✓ Disk test complete'",
      "sleep 30",
      "echo ''",
      "echo '4. Full System Stress (5 minutes)'",
      "echo 'Testing CPU + RAM + Disk simultaneously...'",
      "stress-ng --cpu 8 --io 4 --vm 2 --vm-bytes 1G --timeout 300s --metrics-brief",
      "echo ''",
      "echo '=== All Tests Complete ==='",
      "echo ''",
      "echo 'System Summary:'",
      "echo 'CPU temp:' $(sensors | grep -i 'Package id 0' | awk '{print $4}')",
      "echo 'Memory:' $(free -h | grep Mem | awk '{print $3 \"/\" $2}')",
      "echo 'Uptime:' $(uptime | awk '{print $3,$4}')",
      "echo ''",
      "echo '✓ System stable under load'",
      "EOF",
      "chmod +x ~/stress-test.sh",
      "Create overnight stability test: cat > ~/overnight-stress.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Overnight Stability Test ==='",
      "echo 'This will run for 8 hours. Continue? (y/n)'",
      "read -p '> ' CONFIRM",
      "if [ \"$CONFIRM\" != 'y' ]; then exit; fi",
      "LOG=~/stress-test-$(date +%Y-%m-%d_%H-%M-%S).log",
      "echo \"Started: $(date)\" | tee $LOG",
      "echo 'Running stress test...' | tee -a $LOG",
      "stress-ng --cpu 4 --io 2 --vm 1 --vm-bytes 2G --timeout 8h --metrics-brief 2>&1 | tee -a $LOG",
      "echo \"Finished: $(date)\" | tee -a $LOG",
      "echo \"✓ Log saved: $LOG\"",
      "EOF",
      "chmod +x ~/overnight-stress.sh",
      "AGENT: 'Stress testing tools ready! ✓'",
      "AGENT: 'Your hardware is stable ✓'"
    ],
    "commands": ["stress-ng", "s-tui", "sensors"],
    "packages": {"debian_ubuntu": ["stress-ng", "s-tui", "lm-sensors"], "arch": ["stress-ng", "s-tui", "lm_sensors"]},
    "related_commands": ["stress-ng", "stress", "s-tui", "sensors"],
    "complexity": "intermediate",
    "tags": ["stress-test", "stability", "hardware", "testing", "performance", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_hardware_info_001",
    "command": "inxi",
    "scenario": "User: Need detailed hardware information",
    "problem": "Don't know exact hardware specs",
    "solution": "Use inxi and other tools for comprehensive hardware info",
    "steps": [
      "USER SAYS: 'What\\'s in my computer? I don\\'t remember the specs.'",
      "AGENT: 'Let me show you everything about your hardware...'",
      "Install: sudo apt install inxi || sudo pacman -S inxi",
      "AGENT: 'Hardware info tools installed ✓'",
      "Full system info: inxi -F",
      "AGENT: 'Complete system report:'",
      "AGENT: 'CPU: Intel i9-13900H (20 cores)'",
      "AGENT: 'RAM: 40GB DDR4-3200'",
      "AGENT: 'GPU: Intel Iris Xe Graphics'",
      "AGENT: 'Disk: 1TB NVMe SSD'",
      "AGENT: 'Network: Intel Wi-Fi 6 AX201'",
      "CPU details: inxi -C",
      "AGENT: 'CPU: Intel Core i9-13900H'",
      "AGENT: 'Cores: 14 (6P+8E) Threads: 20'",
      "AGENT: 'Speed: 800 MHz (min) to 5400 MHz (max)'",
      "AGENT: 'Cache: L1 1.2MB, L2 11.5MB, L3 24MB'",
      "Memory details: inxi -m",
      "AGENT: 'RAM: 2x 16GB + 1x 8GB DDR4-3200'",
      "AGENT: 'Slots: 2 used, 0 available'",
      "AGENT: 'Max capacity: 64GB'",
      "Disk details: inxi -D",
      "AGENT: 'Disk 1: 1TB Samsung 980 Pro NVMe'",
      "AGENT: 'Disk 2: 500GB WD Blue SATA SSD'",
      "GPU details: inxi -G",
      "AGENT: 'Display: 1920x1080 @ 144Hz'",
      "AGENT: 'GPU: Intel Iris Xe Graphics (integrated)'",
      "AGENT: 'OpenGL: 4.6 Mesa 23.1.0'",
      "Network details: inxi -n",
      "AGENT: 'WiFi: Intel AX201 (Wi-Fi 6)'",
      "AGENT: 'Ethernet: Realtek RTL8111'",
      "Battery: inxi -B",
      "AGENT: 'Battery: 56Wh Li-ion'",
      "AGENT: 'Condition: 95.3%'",
      "AGENT: 'Status: Discharging (3:45 remaining)'",
      "Create hardware report: cat > ~/hardware-report.sh << 'EOF'",
      "#!/bin/bash",
      "REPORT=~/hardware-report-$(date +%Y-%m-%d).txt",
      "echo '=== Hardware Report ===' > $REPORT",
      "echo \"Generated: $(date)\" >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== Full System ===' >> $REPORT",
      "inxi -F >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== CPU Details ===' >> $REPORT",
      "lscpu >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== Memory Details ===' >> $REPORT",
      "sudo dmidecode -t memory >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== Disk Health ===' >> $REPORT",
      "for disk in /dev/sd[a-z]; do",
      "  if [ -e \"$disk\" ]; then",
      "    sudo smartctl -H $disk >> $REPORT",
      "  fi",
      "done",
      "echo '' >> $REPORT",
      "echo '=== PCI Devices ===' >> $REPORT",
      "lspci >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== USB Devices ===' >> $REPORT",
      "lsusb >> $REPORT",
      "echo \"✓ Report saved: $REPORT\"",
      "EOF",
      "chmod +x ~/hardware-report.sh",
      "Create quick specs: cat > ~/my-specs.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== My Computer Specs ==='",
      "echo ''",
      "echo 'CPU:' $(inxi -C | grep CPU | sed 's/.*CPU: //')",
      "echo 'RAM:' $(free -h | grep Mem | awk '{print $2}')",
      "echo 'Disk:' $(df -h / | tail -1 | awk '{print $2}')",
      "echo 'GPU:' $(inxi -G | grep Device | sed 's/.*Device-1: //')",
      "echo 'OS:' $(cat /etc/os-release | grep PRETTY_NAME | cut -d'\"' -f2)",
      "echo 'Kernel:' $(uname -r)",
      "echo 'Uptime:' $(uptime -p)",
      "EOF",
      "chmod +x ~/my-specs.sh",
      "AGENT: 'Hardware info tools ready! ✓'",
      "AGENT: 'Now you know everything about your system ✓'"
    ],
    "commands": ["inxi", "lscpu", "lspci", "lsusb", "dmidecode"],
    "packages": {"debian_ubuntu": ["inxi", "lshw", "dmidecode"], "arch": ["inxi", "lshw", "dmidecode"]},
    "related_commands": ["inxi", "lscpu", "lshw", "hardinfo"],
    "complexity": "beginner",
    "tags": ["hardware", "system-info", "specs", "diagnostics", "inventory", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_disk_encryption_luks_001",
    "command": "cryptsetup",
    "scenario": "User: Need to encrypt external drive",
    "problem": "Sensitive data needs encryption for security",
    "solution": "Setup LUKS encryption for disk",
    "steps": [
      "USER SAYS: 'I store sensitive data. How do I encrypt my external drive?'",
      "AGENT: 'LUKS encryption is perfect! Let me set it up...'",
      "Install: sudo apt install cryptsetup || sudo pacman -S cryptsetup",
      "AGENT: 'LUKS tools installed ✓'",
      "List disks: lsblk",
      "AGENT: 'External drive: /dev/sdb (500GB)'",
      "USER: 'Yes, that\\'s the one!'",
      "AGENT: 'WARNING: This will erase all data on /dev/sdb!'",
      "USER: 'It\\'s empty, go ahead'",
      "Wipe disk: sudo dd if=/dev/urandom of=/dev/sdb bs=1M status=progress",
      "AGENT: 'Securely wiping disk... this takes a while'",
      "AGENT: 'Optional but recommended for security'",
      "Skip to: Ctrl+C after a few GB",
      "AGENT: 'Partial wipe sufficient for most cases'",
      "Setup LUKS: sudo cryptsetup luksFormat /dev/sdb",
      "AGENT: 'Type YES to confirm'",
      "AGENT: 'Enter strong passphrase (you\\'ll need this to access data!)'",
      "AGENT: 'LUKS header created ✓'",
      "Open encrypted: sudo cryptsetup luksOpen /dev/sdb encrypted_drive",
      "AGENT: 'Enter passphrase'",
      "AGENT: 'Encrypted device opened at /dev/mapper/encrypted_drive ✓'",
      "Create filesystem: sudo mkfs.ext4 /dev/mapper/encrypted_drive",
      "AGENT: 'Filesystem created ✓'",
      "Mount: sudo mkdir -p /mnt/encrypted && sudo mount /dev/mapper/encrypted_drive /mnt/encrypted",
      "AGENT: 'Encrypted drive mounted at /mnt/encrypted ✓'",
      "Test: echo 'secret data' | sudo tee /mnt/encrypted/test.txt",
      "AGENT: 'Test file written ✓'",
      "Unmount: sudo umount /mnt/encrypted",
      "Close: sudo cryptsetup luksClose encrypted_drive",
      "AGENT: 'Drive locked! Data is now encrypted ✓'",
      "USER: 'How do I access it later?'",
      "AGENT: 'Create convenient mount script...'",
      "Create mount script: cat > ~/mount-encrypted.sh << 'EOF'",
      "#!/bin/bash",
      "DEVICE=${1:-/dev/sdb}",
      "NAME='encrypted_drive'",
      "MOUNT='/mnt/encrypted'",
      "if [ ! -e \"$DEVICE\" ]; then",
      "  echo 'Error: Device not found'",
      "  exit 1",
      "fi",
      "echo 'Opening encrypted device...'",
      "sudo cryptsetup luksOpen $DEVICE $NAME",
      "if [ $? -eq 0 ]; then",
      "  sudo mkdir -p $MOUNT",
      "  sudo mount /dev/mapper/$NAME $MOUNT",
      "  echo \"✓ Mounted at $MOUNT\"",
      "  echo ''",
      "  df -h $MOUNT",
      "else",
      "  echo '✗ Failed to open encrypted device'",
      "fi",
      "EOF",
      "chmod +x ~/mount-encrypted.sh",
      "Create unmount script: cat > ~/unmount-encrypted.sh << 'EOF'",
      "#!/bin/bash",
      "NAME='encrypted_drive'",
      "MOUNT='/mnt/encrypted'",
      "if mountpoint -q $MOUNT; then",
      "  echo 'Unmounting...'",
      "  sudo umount $MOUNT",
      "  sudo cryptsetup luksClose $NAME",
      "  echo '✓ Drive locked and unmounted'",
      "else",
      "  echo 'Drive not mounted'",
      "fi",
      "EOF",
      "chmod +x ~/unmount-encrypted.sh",
      "Add backup key: sudo cryptsetup luksAddKey /dev/sdb",
      "AGENT: 'Enter existing passphrase'",
      "AGENT: 'Enter new backup passphrase'",
      "AGENT: 'Backup key added (keep in safe place!) ✓'",
      "Backup header: sudo cryptsetup luksHeaderBackup /dev/sdb --header-backup-file ~/luks-header-backup.img",
      "AGENT: 'LUKS header backed up ✓'",
      "AGENT: 'CRITICAL: Store ~/luks-header-backup.img safely!'",
      "AGENT: 'If header corrupts, you lose ALL data without backup'",
      "Create status checker: cat > ~/encrypted-status.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Encrypted Volumes ==='",
      "echo ''",
      "echo 'Open encrypted devices:'",
      "sudo dmsetup ls --target crypt",
      "echo ''",
      "echo 'Mounted encrypted:'",
      "df -h | grep mapper",
      "echo ''",
      "echo 'LUKS devices:'",
      "for dev in /dev/sd[a-z]; do",
      "  if sudo cryptsetup isLuks $dev 2>/dev/null; then",
      "    echo \"$dev - LUKS encrypted\"",
      "  fi",
      "done",
      "EOF",
      "chmod +x ~/encrypted-status.sh",
      "AGENT: 'LUKS encryption complete! ✓'",
      "AGENT: 'Your data is now military-grade encrypted ✓'"
    ],
    "commands": ["cryptsetup", "luksFormat", "luksOpen", "luksClose"],
    "packages": {"debian_ubuntu": ["cryptsetup"], "arch": ["cryptsetup"]},
    "related_commands": ["cryptsetup", "veracrypt"],
    "complexity": "advanced",
    "tags": ["encryption", "luks", "security", "privacy", "data-protection", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_compile_from_source_001",
    "command": "make",
    "scenario": "User: Need to compile software from source",
    "problem": "Software not in repos or need latest version",
    "solution": "Compile from source with proper dependencies",
    "steps": [
      "USER SAYS: 'The package repos have an old version. How do I compile the latest?'",
      "AGENT: 'I\\'ll show you how to compile from source properly...'",
      "Install build tools: sudo apt install build-essential git || sudo pacman -S base-devel git",
      "AGENT: 'Build tools installed ✓'",
      "Clone source: git clone https://github.com/project/software.git",
      "cd software",
      "AGENT: 'Source code downloaded ✓'",
      "Read docs: cat README.md",
      "AGENT: 'Dependencies needed: libfoo-dev, libbar-dev'",
      "Install deps: sudo apt install libfoo-dev libbar-dev || sudo pacman -S foo bar",
      "AGENT: 'Dependencies installed ✓'",
      "Configure: ./configure --prefix=/usr/local",
      "AGENT: 'Checking dependencies...'",
      "AGENT: 'Configuration complete ✓'",
      "Compile: make -j$(nproc)",
      "AGENT: 'Compiling with all CPU cores...'",
      "AGENT: 'This may take a while...'",
      "AGENT: '[=========>] 87% (1543/1772)'",
      "AGENT: 'Compilation complete ✓'",
      "Install: sudo make install",
      "AGENT: 'Installing to /usr/local/bin ✓'",
      "Verify: which software",
      "AGENT: '/usr/local/bin/software ✓'",
      "Test: software --version",
      "AGENT: 'software version 2.5.0 (latest!) ✓'",
      "USER: 'How do I uninstall later?'",
      "AGENT: 'Create uninstall info now...'",
      "Save manifest: sudo make install > ~/software-install.log 2>&1",
      "AGENT: 'Install manifest saved ✓'",
      "Create uninstall: cat > ~/uninstall-software.sh << 'EOF'",
      "#!/bin/bash",
      "cd ~/software",
      "sudo make uninstall",
      "echo '✓ Software uninstalled'",
      "EOF",
      "chmod +x ~/uninstall-software.sh",
      "Create compilation guide: cat > ~/compile-guide.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Compilation Guide ==='",
      "echo ''",
      "echo '1. Install build tools'",
      "echo '   Debian/Ubuntu: sudo apt install build-essential git'",
      "echo '   Arch: sudo pacman -S base-devel git'",
      "echo ''",
      "echo '2. Clone source'",
      "echo '   git clone <repository-url>'",
      "echo '   cd <project-directory>'",
      "echo ''",
      "echo '3. Install dependencies'",
      "echo '   Read README.md or INSTALL file'",
      "echo '   Install listed dependencies via package manager'",
      "echo ''",
      "echo '4. Configure'",
      "echo '   ./configure --prefix=/usr/local'",
      "echo '   OR: cmake . (if using CMake)'",
      "echo ''",
      "echo '5. Compile'",
      "echo '   make -j$(nproc)'",
      "echo ''",
      "echo '6. Install'",
      "echo '   sudo make install'",
      "echo ''",
      "echo 'Common issues:'",
      "echo '- Missing dependencies: Install *-dev packages'",
      "echo '- Permission denied: Use sudo for install'",
      "echo '- Command not found: Add /usr/local/bin to PATH'",
      "EOF",
      "Create update script: cat > ~/update-from-source.sh << 'EOF'",
      "#!/bin/bash",
      "PROJECT_DIR=$1",
      "if [ -z \"$PROJECT_DIR\" ]; then",
      "  echo 'Usage: ./update-from-source.sh <project-directory>'",
      "  exit 1",
      "fi",
      "cd $PROJECT_DIR",
      "echo 'Pulling latest changes...'",
      "git pull",
      "echo ''",
      "echo 'Cleaning old build...'",
      "make clean",
      "echo ''",
      "echo 'Reconfiguring...'",
      "./configure --prefix=/usr/local",
      "echo ''",
      "echo 'Compiling...'",
      "make -j$(nproc)",
      "echo ''",
      "echo 'Installing...'",
      "sudo make install",
      "echo ''",
      "echo '✓ Updated to latest version'",
      "EOF",
      "chmod +x ~/update-from-source.sh",
      "AGENT: 'Compilation complete! ✓'",
      "AGENT: 'You now have the latest version ✓'"
    ],
    "commands": ["make", "gcc", "configure", "cmake"],
    "packages": {"debian_ubuntu": ["build-essential", "git"], "arch": ["base-devel", "git"]},
    "related_commands": ["make", "gcc", "cmake", "configure"],
    "complexity": "intermediate",
    "tags": ["compilation", "make", "source-code", "development", "build", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_remote_desktop_001",
    "command": "x11vnc",
    "scenario": "User: Need remote desktop access",
    "problem": "Want to control Linux desktop from another computer",
    "solution": "Setup x11vnc for remote desktop",
    "steps": [
      "USER SAYS: 'I want to control my Linux desktop from my phone/laptop.'",
      "AGENT: 'Let me set up VNC remote desktop...'",
      "Install: sudo apt install x11vnc || sudo pacman -S x11vnc",
      "AGENT: 'x11vnc installed ✓'",
      "Create password: x11vnc -storepasswd",
      "AGENT: 'Enter VNC password (for remote access)'",
      "AGENT: 'Password saved to ~/.vnc/passwd ✓'",
      "Start VNC server: x11vnc -usepw -display :0 -forever",
      "AGENT: 'VNC server running on port 5900 ✓'",
      "AGENT: 'Connect from client using: <your-ip>:5900'",
      "USER: 'It works but closes when I disconnect'",
      "AGENT: 'Let me create a persistent service...'",
      "Create service: sudo cat > /etc/systemd/system/x11vnc.service << 'EOF'",
      "[Unit]",
      "Description=x11vnc Remote Desktop",
      "After=display-manager.service",
      "[Service]",
      "Type=simple",
      "ExecStart=/usr/bin/x11vnc -auth guess -forever -loop -noxdamage -repeat -rfbauth /home/youruser/.vnc/passwd -rfbport 5900 -shared",
      "ExecStop=/usr/bin/killall x11vnc",
      "Restart=always",
      "[Install]",
      "WantedBy=multi-user.target",
      "EOF",
      "AGENT: 'Service created ✓'",
      "Enable service: sudo systemctl enable --now x11vnc",
      "AGENT: 'VNC now starts on boot ✓'",
      "USER: 'Is this secure?'",
      "AGENT: 'Add SSH tunneling for security!'",
      "Setup SSH tunnel: ssh -L 5900:localhost:5900 user@your-server",
      "AGENT: 'Then connect VNC client to: localhost:5900'",
      "AGENT: 'Traffic encrypted through SSH ✓'",
      "Install VNC viewer: AGENT: 'On client device:'",
      "AGENT: '- Windows/Mac: Download TightVNC Viewer or RealVNC'",
      "AGENT: '- Linux: sudo apt install tigervnc-viewer'",
      "AGENT: '- Android: VNC Viewer from Google Play'",
      "AGENT: '- iOS: VNC Viewer from App Store'",
      "Create connection script: cat > ~/vnc-connect.sh << 'EOF'",
      "#!/bin/bash",
      "SERVER=$1",
      "if [ -z \"$SERVER\" ]; then",
      "  echo 'Usage: ./vnc-connect.sh <server-ip>'",
      "  exit 1",
      "fi",
      "echo 'Creating secure SSH tunnel...'",
      "ssh -L 5900:localhost:5900 -N -f $SERVER",
      "echo '✓ Tunnel established'",
      "echo ''",
      "echo 'Connect your VNC viewer to: localhost:5900'",
      "echo ''",
      "echo 'To close tunnel:'",
      "echo '  pkill -f \"ssh -L 5900\"'",
      "EOF",
      "chmod +x ~/vnc-connect.sh",
      "Create VNC manager: cat > ~/vnc-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== VNC Remote Desktop Manager ==='",
      "echo ''",
      "echo '1. Start VNC server'",
      "echo '2. Stop VNC server'",
      "echo '3. Check status'",
      "echo '4. Change password'",
      "echo '5. Show connection info'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) sudo systemctl start x11vnc ;;",
      "  2) sudo systemctl stop x11vnc ;;",
      "  3) sudo systemctl status x11vnc ;;",
      "  4) x11vnc -storepasswd ;;",
      "  5) echo \"IP: $(hostname -I | awk '{print $1}')\"; echo 'Port: 5900' ;;",
      "esac",
      "EOF",
      "chmod +x ~/vnc-manage.sh",
      "Alternative - RDP: sudo apt install xrdp",
      "AGENT: 'xrdp installed for RDP protocol (Windows-compatible) ✓'",
      "sudo systemctl enable --now xrdp",
      "AGENT: 'RDP server running on port 3389 ✓'",
      "AGENT: 'Connect from Windows: mstsc.exe'",
      "AGENT: 'Remote desktop setup complete! ✓'",
      "AGENT: 'Access your desktop from anywhere ✓'"
    ],
    "commands": ["x11vnc", "xrdp", "ssh"],
    "packages": {"debian_ubuntu": ["x11vnc", "xrdp"], "arch": ["x11vnc", "xrdp"]},
    "related_commands": ["x11vnc", "xrdp", "tigervnc"],
    "complexity": "intermediate",
    "tags": ["remote-desktop", "vnc", "rdp", "x11vnc", "remote-access", "real-world", "ai-agent"]
  }
]

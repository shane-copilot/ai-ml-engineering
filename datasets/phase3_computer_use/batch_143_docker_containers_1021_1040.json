[
  {
    "id": "scenario_docker_containers_141",
    "command": "docker",
    "scenario": "Master Docker containers for application deployment and development environments.",
    "problem": "Need to containerize applications, run isolated environments, manage images and containers, understand Docker networking and volumes, deploy multi-container apps, and use Docker for consistent development/production environments.",
    "solution": "Learn Docker fundamentals: pull images, run containers, build custom images with Dockerfile, manage volumes for persistence, use docker-compose for multi-container apps, understand networking, and implement best practices for containerization.",
    "steps": [
      "USER SAYS: 'How do I use Docker to containerize my applications and create reproducible environments?'",
      "AGENT: 'Let me teach you Docker! We'll cover images, containers, Dockerfile, volumes, networking, and docker-compose for complete containerization.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: Docker containerization...'",
      "AGENT: '[Searching] \"docker tutorial containers images dockerfile compose\"'",
      "AGENT: '[Found] docker run creates containers from images.'",
      "AGENT: '[Found] Dockerfile defines custom images.'",
      "AGENT: '[Found] Volumes for persistent data, networks for connectivity.'",
      "AGENT: '[Found] docker-compose orchestrates multi-container apps.'",
      "AGENT: '✓ Research complete! Let's master Docker.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Install Docker ---'",
      "Run command: `curl -fsSL https://get.docker.com -o get-docker.sh`",
      "Run command: `sudo sh get-docker.sh`",
      "AGENT: ''",
      "Run command: `sudo usermod -aG docker $USER`",
      "AGENT: 'Add user to docker group (logout/login to apply)'",
      "AGENT: ''",
      "Run command: `docker --version`",
      "AGENT: 'Docker version 24.0.6, build ed223bc'",
      "AGENT: ''",
      "Run command: `docker run hello-world`",
      "AGENT: 'Hello from Docker!'",
      "AGENT: 'This message shows that your installation appears to be working correctly.'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Working with Images ---'",
      "Run command: `docker images`",
      "AGENT: 'REPOSITORY    TAG       IMAGE ID       CREATED        SIZE'",
      "AGENT: 'hello-world   latest    d2c94e258dcb   4 months ago   13.3kB'",
      "AGENT: ''",
      "Run command: `docker pull nginx`",
      "AGENT: 'latest: Pulling from library/nginx'",
      "AGENT: 'a2abf6c4d29d: Pull complete'",
      "AGENT: 'Status: Downloaded newer image for nginx:latest'",
      "AGENT: ''",
      "Run command: `docker pull nginx:1.25`",
      "AGENT: 'Pull specific version'",
      "AGENT: ''",
      "Run command: `docker images`",
      "AGENT: 'REPOSITORY    TAG       IMAGE ID       CREATED        SIZE'",
      "AGENT: 'nginx         latest    605c77e624dd   2 weeks ago    141MB'",
      "AGENT: 'nginx         1.25      a12b3c4d5e6f   3 weeks ago    141MB'",
      "AGENT: ''",
      "Run command: `docker search python`",
      "AGENT: 'NAME                DESCRIPTION                STARS     OFFICIAL'",
      "AGENT: 'python              Python is an interpreted…  8000      [OK]'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Running Containers ---'",
      "Run command: `docker run -d --name my-nginx -p 8080:80 nginx`",
      "AGENT: '  -d = Detached (background)'",
      "AGENT: '  --name = Container name'",
      "AGENT: '  -p 8080:80 = Port mapping (host:container)'",
      "AGENT: '  nginx = Image name'",
      "AGENT: ''",
      "Run command: `docker ps`",
      "AGENT: 'CONTAINER ID   IMAGE   COMMAND                  CREATED          STATUS          PORTS                  NAMES'",
      "AGENT: 'a1b2c3d4e5f6   nginx   \"/docker-entrypoint.…\"   10 seconds ago   Up 9 seconds    0.0.0.0:8080->80/tcp   my-nginx'",
      "AGENT: ''",
      "Run command: `curl http://localhost:8080`",
      "AGENT: 'Welcome to nginx!'",
      "AGENT: ''",
      "Run command: `docker ps -a`",
      "AGENT: '  -a = Show all containers (including stopped)'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Container Management ---'",
      "Run command: `docker logs my-nginx`",
      "AGENT: '172.17.0.1 - - [08/Oct/2025:19:00:00 +0000] \"GET / HTTP/1.1\" 200 615'",
      "AGENT: ''",
      "Run command: `docker logs -f my-nginx`",
      "AGENT: '  -f = Follow logs (like tail -f)'",
      "AGENT: ''",
      "Run command: `docker exec -it my-nginx bash`",
      "AGENT: '  -it = Interactive terminal'",
      "AGENT: 'root@a1b2c3d4e5f6:/#'",
      "AGENT: 'Inside container!'",
      "AGENT: ''",
      "Run command: `docker exec my-nginx ls /etc/nginx`",
      "AGENT: 'Execute command without interactive shell'",
      "AGENT: ''",
      "Run command: `docker stop my-nginx`",
      "AGENT: 'Stops container gracefully'",
      "AGENT: ''",
      "Run command: `docker start my-nginx`",
      "AGENT: 'Starts stopped container'",
      "AGENT: ''",
      "Run command: `docker restart my-nginx`",
      "AGENT: 'Restarts container'",
      "AGENT: ''",
      "Run command: `docker rm my-nginx`",
      "AGENT: 'Error: container is running'",
      "AGENT: ''",
      "Run command: `docker rm -f my-nginx`",
      "AGENT: '  -f = Force remove (stop and remove)'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Create Custom Image with Dockerfile ---'",
      "Create tool: `cat > Dockerfile << 'EOF'`",
      "# Use official Python image\nFROM python:3.11-slim\n\n# Set working directory\nWORKDIR /app\n\n# Copy requirements\nCOPY requirements.txt .\n\n# Install dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Expose port\nEXPOSE 5000\n\n# Set environment variables\nENV FLASK_APP=app.py\n\n# Run application\nCMD [\"python\", \"app.py\"]\nEOF",
      "AGENT: ''",
      "Create tool: `cat > requirements.txt << 'EOF'`",
      "flask==3.0.0\nEOF",
      "AGENT: ''",
      "Create tool: `cat > app.py << 'EOF'`",
      "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello from Docker!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\nEOF",
      "AGENT: ''",
      "Run command: `docker build -t my-flask-app .`",
      "AGENT: '  -t = Tag (name) for image'",
      "AGENT: '  . = Build context (current directory)'",
      "AGENT: ''",
      "AGENT: 'Step 1/8 : FROM python:3.11-slim'",
      "AGENT: 'Step 2/8 : WORKDIR /app'",
      "AGENT: '...'",
      "AGENT: 'Successfully built abc123def456'",
      "AGENT: 'Successfully tagged my-flask-app:latest'",
      "AGENT: ''",
      "Run command: `docker images`",
      "AGENT: 'REPOSITORY      TAG       IMAGE ID       CREATED         SIZE'",
      "AGENT: 'my-flask-app    latest    abc123def456   1 minute ago    150MB'",
      "AGENT: ''",
      "Run command: `docker run -d -p 5000:5000 --name flask-app my-flask-app`",
      "AGENT: ''",
      "Run command: `curl http://localhost:5000`",
      "AGENT: 'Hello from Docker!'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Volumes for Persistent Data ---'",
      "Run command: `docker volume create my-data`",
      "AGENT: ''",
      "Run command: `docker volume ls`",
      "AGENT: 'DRIVER    VOLUME NAME'",
      "AGENT: 'local     my-data'",
      "AGENT: ''",
      "Run command: `docker run -d --name mysql-db -v my-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=secret mysql:8.0`",
      "AGENT: '  -v = Volume mount'",
      "AGENT: '  -e = Environment variable'",
      "AGENT: ''",
      "AGENT: 'Bind mount (host directory):'",
      "Run command: `docker run -d -v /host/path:/container/path nginx`",
      "AGENT: ''",
      "Run command: `docker volume inspect my-data`",
      "AGENT: 'Shows volume details including mount point'",
      "AGENT: ''",
      "Run command: `docker volume rm my-data`",
      "AGENT: 'Remove volume (must stop containers first)'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Docker Networking ---'",
      "Run command: `docker network ls`",
      "AGENT: 'NETWORK ID     NAME      DRIVER    SCOPE'",
      "AGENT: 'abc123def456   bridge    bridge    local'",
      "AGENT: 'def456ghi789   host      host      local'",
      "AGENT: ''",
      "Run command: `docker network create my-network`",
      "AGENT: ''",
      "Run command: `docker run -d --name web --network my-network nginx`",
      "Run command: `docker run -d --name api --network my-network python:3.11`",
      "AGENT: 'Both containers can communicate using names'",
      "AGENT: ''",
      "Run command: `docker exec web ping api`",
      "AGENT: 'PING api (172.18.0.3): 56 data bytes'",
      "AGENT: 'Containers can resolve each other by name!'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Docker Compose for Multi-Container Apps ---'",
      "Run command: `sudo apt install docker-compose-plugin -y`",
      "AGENT: ''",
      "Create tool: `cat > docker-compose.yml << 'EOF'`",
      "version: '3.8'\n\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./html:/usr/share/nginx/html\n    networks:\n      - app-network\n\n  api:\n    build: .\n    ports:\n      - \"5000:5000\"\n    environment:\n      - DATABASE_URL=postgresql://db:5432/mydb\n    depends_on:\n      - db\n    networks:\n      - app-network\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_PASSWORD=secret\n      - POSTGRES_DB=mydb\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    networks:\n      - app-network\n\nvolumes:\n  postgres-data:\n\nnetworks:\n  app-network:\n    driver: bridge\nEOF",
      "AGENT: ''",
      "Run command: `docker compose up -d`",
      "AGENT: '  -d = Detached mode'",
      "AGENT: 'Creating network app-network'",
      "AGENT: 'Creating volume postgres-data'",
      "AGENT: 'Starting services...'",
      "AGENT: ''",
      "Run command: `docker compose ps`",
      "AGENT: 'NAME    IMAGE              STATUS        PORTS'",
      "AGENT: 'web     nginx:latest       Up 10s        0.0.0.0:8080->80/tcp'",
      "AGENT: 'api     my-api:latest      Up 10s        0.0.0.0:5000->5000/tcp'",
      "AGENT: 'db      postgres:15        Up 10s        5432/tcp'",
      "AGENT: ''",
      "Run command: `docker compose logs -f`",
      "AGENT: 'Follow logs for all services'",
      "AGENT: ''",
      "Run command: `docker compose down`",
      "AGENT: 'Stop and remove containers, networks'",
      "AGENT: ''",
      "Run command: `docker compose down -v`",
      "AGENT: '  -v = Also remove volumes'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Container Inspection and Stats ---'",
      "Run command: `docker inspect my-nginx`",
      "AGENT: 'Shows detailed container configuration (JSON)'",
      "AGENT: ''",
      "Run command: `docker stats`",
      "AGENT: 'CONTAINER ID   NAME       CPU %   MEM USAGE/LIMIT   MEM %   NET I/O'",
      "AGENT: 'a1b2c3d4e5f6   my-nginx   0.00%   2.5MiB / 15.5GiB  0.02%   1.2kB / 0B'",
      "AGENT: ''",
      "Run command: `docker top my-nginx`",
      "AGENT: 'Shows processes running in container'",
      "AGENT: ''",
      "Run command: `docker port my-nginx`",
      "AGENT: '80/tcp -> 0.0.0.0:8080'",
      "AGENT: 'Shows port mappings'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Cleanup and Maintenance ---'",
      "Run command: `docker system df`",
      "AGENT: 'TYPE            TOTAL   ACTIVE   SIZE      RECLAIMABLE'",
      "AGENT: 'Images          5       2        1.2GB     800MB (66%)'",
      "AGENT: 'Containers      10      2        50MB      45MB (90%)'",
      "AGENT: 'Local Volumes   3       2        100MB     50MB (50%)'",
      "AGENT: ''",
      "Run command: `docker system prune`",
      "AGENT: 'Remove unused containers, networks, images'",
      "AGENT: ''",
      "Run command: `docker system prune -a`",
      "AGENT: '  -a = Also remove unused images'",
      "AGENT: ''",
      "Run command: `docker image prune`",
      "AGENT: 'Remove dangling images'",
      "AGENT: ''",
      "Run command: `docker container prune`",
      "AGENT: 'Remove stopped containers'",
      "AGENT: ''",
      "Run command: `docker volume prune`",
      "AGENT: 'Remove unused volumes'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Dockerfile Best Practices ---'",
      "Create tool: `cat > Dockerfile.optimized << 'EOF'`",
      "# Use specific version\nFROM python:3.11-slim\n\n# Set working directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    gcc \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy only requirements first (better caching)\nCOPY requirements.txt .\n\n# Install Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Create non-root user\nRUN useradd -m appuser && chown -R appuser:appuser /app\nUSER appuser\n\n# Expose port\nEXPOSE 5000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s \\\n  CMD curl -f http://localhost:5000/health || exit 1\n\n# Run application\nCMD [\"python\", \"app.py\"]\nEOF",
      "AGENT: ''",
      "AGENT: '--- Bonus: Docker Quick Reference ---'",
      "AGENT: ''",
      "AGENT: 'Images:'",
      "AGENT: '  docker pull <image>          Pull image'",
      "AGENT: '  docker build -t <name> .     Build image'",
      "AGENT: '  docker images                List images'",
      "AGENT: '  docker rmi <image>           Remove image'",
      "AGENT: ''",
      "AGENT: 'Containers:'",
      "AGENT: '  docker run -d -p 80:80 <img> Run container'",
      "AGENT: '  docker ps                    List running'",
      "AGENT: '  docker ps -a                 List all'",
      "AGENT: '  docker stop <container>      Stop'",
      "AGENT: '  docker rm <container>        Remove'",
      "AGENT: '  docker logs <container>      View logs'",
      "AGENT: '  docker exec -it <cont> bash  Shell access'",
      "AGENT: ''",
      "AGENT: 'Compose:'",
      "AGENT: '  docker compose up -d         Start services'",
      "AGENT: '  docker compose down          Stop services'",
      "AGENT: '  docker compose logs -f       View logs'",
      "AGENT: '  docker compose ps            List services'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Installed Docker and verified with hello-world.'",
      "AGENT: '  ✓ Pulled and managed images from Docker Hub.'",
      "AGENT: '  ✓ Ran containers with docker run and port mapping.'",
      "AGENT: '  ✓ Created custom images with Dockerfile.'",
      "AGENT: '  ✓ Used volumes for persistent data storage.'",
      "AGENT: '  ✓ Created networks for container communication.'",
      "AGENT: '  ✓ Orchestrated multi-container apps with docker-compose.'",
      "AGENT: '  ✓ Inspected containers with logs, stats, and exec.'",
      "AGENT: '  ✓ Cleaned up unused resources with prune commands.'",
      "AGENT: '  ✓ You now master Docker containerization! 🐳'"
    ],
    "commands": ["docker", "docker-compose"],
    "packages": {
      "debian_ubuntu": ["docker.io", "docker-compose-plugin"],
      "arch": ["docker", "docker-compose"]
    },
    "related_commands": ["podman", "kubectl", "containerd"],
    "complexity": "advanced",
    "tags": ["docker", "containers", "dockerfile", "docker-compose", "images", "volumes", "networking", "containerization", "devops"]
  }
]

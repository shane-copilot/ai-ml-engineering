[
  {
    "id": "cmd_ssh_001",
    "command": "ssh",
    "scenario": "Set up passwordless SSH login with key authentication",
    "problem": "Typing password every time for SSH is tedious and less secure",
    "solution": "Generate SSH key pair and copy public key to remote server",
    "steps": [
      "Check if you already have SSH keys: ls -la ~/.ssh/",
      "Look for id_rsa, id_ed25519, or similar",
      "Generate new SSH key: ssh-keygen -t ed25519 -C 'your_email@example.com'",
      "Ed25519 is modern and secure (recommended)",
      "Or RSA 4096: ssh-keygen -t rsa -b 4096 -C 'your_email@example.com'",
      "Press Enter for default location (~/.ssh/id_ed25519)",
      "Set passphrase (recommended) or leave empty for no passphrase",
      "Passphrase adds extra security layer",
      "Verify keys created: ls -la ~/.ssh/",
      "Should see id_ed25519 (private) and id_ed25519.pub (public)",
      "Copy public key to server: ssh-copy-id user@server",
      "Enter password one last time",
      "Alternative manual copy: cat ~/.ssh/id_ed25519.pub | ssh user@server 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys'",
      "Or: scp ~/.ssh/id_ed25519.pub user@server:~/.ssh/authorized_keys",
      "Test key-based login: ssh user@server",
      "Should not ask for password (or only passphrase if set)",
      "Verify authorized_keys: ssh user@server 'cat ~/.ssh/authorized_keys'",
      "Check permissions on server: ssh user@server 'ls -la ~/.ssh/'",
      "Should be: drwx------ ~/.ssh, -rw------- authorized_keys",
      "Fix if wrong: ssh user@server 'chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys'",
      "Use SSH agent for passphrase: eval $(ssh-agent -s)",
      "Add key to agent: ssh-add ~/.ssh/id_ed25519",
      "Now passphrase only needed once per session",
      "Start agent on login: Add to ~/.bashrc: eval $(ssh-agent -s) > /dev/null && ssh-add -q",
      "Multiple keys: ssh-add ~/.ssh/id_rsa ~/.ssh/id_ed25519",
      "List loaded keys: ssh-add -l",
      "Remove keys from agent: ssh-add -D",
      "For specific host, create SSH config: nano ~/.ssh/config",
      "Add: Host server\\n  HostName server.com\\n  User username\\n  IdentityFile ~/.ssh/id_ed25519",
      "Now can connect with: ssh server"
    ],
    "commands": ["ssh", "ssh-keygen", "ssh-copy-id", "ssh-add", "ssh-agent", "cat", "mkdir", "chmod", "ls", "nano"],
    "packages": {
      "debian_ubuntu": ["openssh-client"],
      "arch": ["openssh"]
    },
    "related_commands": ["scp", "sftp", "ssh-agent", "ssh-add", "ssh-keyscan"],
    "complexity": "intermediate",
    "tags": ["ssh", "authentication", "ssh-keys", "passwordless", "security", "remote-access"]
  },
  {
    "id": "cmd_ssh_002",
    "command": "ssh",
    "scenario": "SSH connection refused or times out",
    "problem": "Cannot connect to SSH server, getting 'Connection refused' or timeout errors",
    "solution": "Systematically diagnose SSH connectivity issues",
    "steps": [
      "Test basic connectivity: ping server_address",
      "If ping fails, network issue (routing, firewall)",
      "Check SSH service on server (if you have access): systemctl status sshd",
      "Should show 'active (running)'",
      "If stopped: sudo systemctl start sshd && sudo systemctl enable sshd",
      "Check SSH port: netstat -tlnp | grep ssh or ss -tlnp | grep ssh",
      "Default port 22, might be custom",
      "Try connection with verbose: ssh -v user@server",
      "Even more verbose: ssh -vvv user@server",
      "Shows detailed connection attempt",
      "Check firewall on server: sudo ufw status or sudo iptables -L",
      "Allow SSH: sudo ufw allow 22/tcp or sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT",
      "Check if port blocked by ISP/network: telnet server 22 or nc -zv server 22",
      "Should show 'Connected' or 'open'",
      "Check sshd config: sudo nano /etc/ssh/sshd_config",
      "Verify: Port 22, PermitRootLogin, PasswordAuthentication, PubkeyAuthentication",
      "After config change: sudo systemctl restart sshd",
      "Check /etc/hosts.allow and /etc/hosts.deny: cat /etc/hosts.allow /etc/hosts.deny",
      "Allow SSH: echo 'sshd: ALL' | sudo tee -a /etc/hosts.allow",
      "Check server logs: sudo journalctl -u sshd -n 50 or sudo tail -f /var/log/auth.log",
      "Look for authentication failures, permission issues",
      "Try different port: ssh -p 2222 user@server",
      "Specify key file: ssh -i ~/.ssh/specific_key user@server",
      "Bypass known_hosts check (ONLY for testing): ssh -o StrictHostKeyChecking=no user@server",
      "Remove old host key: ssh-keygen -R server_hostname",
      "Check DNS: dig server_hostname or nslookup server_hostname",
      "Try IP directly: ssh user@192.168.1.10",
      "Check for fail2ban blocks: sudo fail2ban-client status sshd",
      "Unban IP: sudo fail2ban-client set sshd unbanip YOUR_IP",
      "Router port forwarding: If connecting over internet, check router forwards port 22 to server",
      "Check SELinux: sestatus, if enforcing, check: sudo ausearch -m avc -ts recent",
      "Temporary disable: sudo setenforce 0 (ONLY for testing)",
      "Alternative access: If SSH broken, try console access (physical, IPMI, VNC)",
      "After fix: Verify: ssh -T user@server 'echo SSH working!'"
    ],
    "commands": ["ping", "ssh", "systemctl", "netstat", "ss", "ufw", "iptables", "telnet", "nc", "nano", "journalctl", "tail", "ssh-keygen", "dig", "nslookup", "fail2ban-client", "sestatus", "ausearch", "setenforce"],
    "packages": {
      "debian_ubuntu": ["openssh-client", "openssh-server", "iproute2", "telnet", "netcat", "dnsutils", "fail2ban"],
      "arch": ["openssh", "iproute2", "gnu-netcat", "bind-tools", "fail2ban"]
    },
    "related_commands": ["systemctl", "ufw", "iptables", "journalctl", "fail2ban"],
    "complexity": "advanced",
    "tags": ["ssh", "troubleshooting", "connection-refused", "firewall", "networking", "remote-access"]
  },
  {
    "id": "cmd_rsync_001",
    "command": "rsync",
    "scenario": "Sync files between local and remote server efficiently",
    "problem": "Need to sync large directory to remote server, only transferring changed files",
    "solution": "Use rsync over SSH for efficient, resumable file synchronization",
    "steps": [
      "Basic sync to remote: rsync -avz /local/path/ user@server:/remote/path/",
      "Flags: a=archive (preserve permissions, times, etc.), v=verbose, z=compress",
      "Note trailing slash on source: /path/ syncs contents, /path syncs directory itself",
      "Dry run first: rsync -avzn /local/path/ user@server:/remote/path/",
      "n=dry-run, shows what would be transferred without doing it",
      "Show progress: rsync -avz --progress /local/path/ user@server:/remote/path/",
      "With transfer speed: rsync -avz --info=progress2 /local/path/ user@server:/remote/path/",
      "Exclude files: rsync -avz --exclude='*.tmp' --exclude='cache/' /local/ user@server:/remote/",
      "Exclude from file: rsync -avz --exclude-from=exclude.txt /local/ user@server:/remote/",
      "Delete on destination: rsync -avz --delete /local/ user@server:/remote/",
      "Removes files on dest that don't exist in source (BE CAREFUL!)",
      "Delete excluded: rsync -avz --delete --delete-excluded --exclude='*.tmp' /local/ user@server:/remote/",
      "Bandwidth limit: rsync -avz --bwlimit=1000 /local/ user@server:/remote/ (1000 KB/s)",
      "Partial transfer (resumable): rsync -avz --partial /local/ user@server:/remote/",
      "Or use -P: rsync -avzP /local/ user@server:/remote/ (combines --partial and --progress)",
      "Specific SSH port: rsync -avz -e 'ssh -p 2222' /local/ user@server:/remote/",
      "With SSH key: rsync -avz -e 'ssh -i ~/.ssh/specific_key' /local/ user@server:/remote/",
      "Sync from remote to local: rsync -avz user@server:/remote/path/ /local/path/",
      "Between two remotes: rsync -avz user1@server1:/path/ user2@server2:/path/",
      "Local sync: rsync -av /source/ /destination/",
      "Faster for local, no compression needed",
      "Preserve hard links: rsync -avzH /local/ user@server:/remote/",
      "Ignore existing files: rsync -avz --ignore-existing /local/ user@server:/remote/",
      "Update only newer: rsync -avz --update /local/ user@server:/remote/",
      "Copy symbolic links: rsync -avzL /local/ user@server:/remote/ (follows links)",
      "Or preserve symlinks: rsync -avz /local/ user@server:/remote/ (default with -a)",
      "Checksum-based: rsync -avzc /local/ user@server:/remote/ (slower but more accurate)",
      "Compare sizes: rsync -avz --size-only /local/ user@server:/remote/",
      "Backup mode: rsync -avz --backup --backup-dir=/backup_$(date +%Y%m%d) /local/ user@server:/remote/",
      "Log transfers: rsync -avz --log-file=rsync.log /local/ user@server:/remote/",
      "Test connectivity: rsync --dry-run -v user@server:",
      "After sync verify: rsync -avzn /local/ user@server:/remote/ (should show nothing if in sync)"
    ],
    "commands": ["rsync", "ssh", "date"],
    "packages": {
      "debian_ubuntu": ["rsync", "openssh-client"],
      "arch": ["rsync", "openssh"]
    },
    "related_commands": ["scp", "sftp", "rclone", "ssh"],
    "complexity": "intermediate",
    "tags": ["rsync", "sync", "backup", "file-transfer", "ssh", "remote-sync"]
  },
  {
    "id": "cmd_curl_001",
    "command": "curl",
    "scenario": "Test REST API endpoint and debug HTTP responses",
    "problem": "Need to test API endpoint, check response codes, headers, and data",
    "solution": "Use curl with various flags to test and debug HTTP requests",
    "steps": [
      "Simple GET request: curl https://api.example.com/endpoint",
      "Save response to file: curl https://api.example.com/data > response.json",
      "Or: curl -o response.json https://api.example.com/data",
      "Show response headers: curl -i https://api.example.com/endpoint",
      "Headers only (no body): curl -I https://api.example.com/endpoint",
      "Verbose output (includes request): curl -v https://api.example.com/endpoint",
      "Even more verbose: curl -vv https://api.example.com/endpoint",
      "Follow redirects: curl -L https://api.example.com/endpoint",
      "Show only HTTP status code: curl -s -o /dev/null -w '%{http_code}' https://api.example.com/",
      "POST request: curl -X POST https://api.example.com/endpoint",
      "POST with JSON data: curl -X POST -H 'Content-Type: application/json' -d '{\"key\":\"value\"}' https://api.example.com/",
      "POST from file: curl -X POST -H 'Content-Type: application/json' -d @data.json https://api.example.com/",
      "PUT request: curl -X PUT -d 'data' https://api.example.com/resource/1",
      "DELETE request: curl -X DELETE https://api.example.com/resource/1",
      "Custom headers: curl -H 'Authorization: Bearer TOKEN' https://api.example.com/",
      "Multiple headers: curl -H 'Header1: value1' -H 'Header2: value2' https://api.example.com/",
      "Basic auth: curl -u username:password https://api.example.com/",
      "Or: curl -u username https://api.example.com/ (prompts for password)",
      "Bearer token: curl -H 'Authorization: Bearer YOUR_TOKEN' https://api.example.com/",
      "Form data: curl -X POST -d 'field1=value1&field2=value2' https://api.example.com/form",
      "File upload: curl -X POST -F 'file=@document.pdf' https://api.example.com/upload",
      "Multiple files: curl -X POST -F 'file1=@doc1.pdf' -F 'file2=@doc2.pdf' https://api.example.com/",
      "Query parameters: curl 'https://api.example.com/search?q=query&limit=10'",
      "Timeout: curl --max-time 30 https://api.example.com/",
      "Connect timeout: curl --connect-timeout 10 https://api.example.com/",
      "Retry on failure: curl --retry 3 https://api.example.com/",
      "User agent: curl -A 'MyApp/1.0' https://api.example.com/",
      "Cookies: curl -b 'session=abc123' https://api.example.com/",
      "Save cookies: curl -c cookies.txt https://api.example.com/login",
      "Load cookies: curl -b cookies.txt https://api.example.com/dashboard",
      "Ignore SSL errors (NOT for production): curl -k https://self-signed.badssl.com/",
      "Specific SSL cert: curl --cacert ca-bundle.crt https://api.example.com/",
      "Download with resume: curl -C - -O https://example.com/largefile.zip",
      "Rate limit: curl --limit-rate 100K https://example.com/file",
      "Show transfer progress: curl --progress-bar https://example.com/file > file",
      "Silent mode: curl -s https://api.example.com/ | jq .",
      "Combine with jq for JSON: curl -s https://api.example.com/users | jq '.[] | {name, email}'",
      "Test performance: curl -w '@curl-format.txt' -o /dev/null -s https://api.example.com/",
      "Format file contains: time_total, time_connect, size_download, etc."
    ],
    "commands": ["curl", "jq"],
    "packages": {
      "debian_ubuntu": ["curl", "jq"],
      "arch": ["curl", "jq"]
    },
    "related_commands": ["wget", "httpie", "jq", "netcat"],
    "complexity": "intermediate",
    "tags": ["curl", "http", "api", "rest", "web", "testing", "debugging"]
  },
  {
    "id": "cmd_wget_001",
    "command": "wget",
    "scenario": "Download large file with resume capability",
    "problem": "Need to download large file but connection is unstable",
    "solution": "Use wget with resume and retry options for reliable downloads",
    "steps": [
      "Simple download: wget https://example.com/file.zip",
      "Saves to current directory with original filename",
      "Specify output filename: wget -O myfile.zip https://example.com/file.zip",
      "Download to directory: wget -P /path/to/directory https://example.com/file.zip",
      "Resume incomplete download: wget -c https://example.com/file.zip",
      "-c continues where left off if interrupted",
      "Background download: wget -b https://example.com/file.zip",
      "Check progress: tail -f wget-log",
      "Limit download speed: wget --limit-rate=200k https://example.com/file.zip",
      "Retry on failure: wget --tries=10 https://example.com/file.zip",
      "Infinite retries: wget --tries=0 --retry-connrefused https://example.com/file.zip",
      "Wait between retries: wget --wait=10 --tries=5 https://example.com/file.zip",
      "Random wait: wget --wait=5 --random-wait https://example.com/file.zip",
      "Timeout: wget --timeout=30 https://example.com/file.zip",
      "Verbose output: wget -v https://example.com/file.zip",
      "Quiet mode: wget -q https://example.com/file.zip",
      "Show progress bar: wget --progress=bar https://example.com/file.zip",
      "Download multiple files: wget -i urls.txt",
      "urls.txt contains one URL per line",
      "Recursive download: wget -r https://example.com/directory/",
      "Mirror website: wget --mirror --convert-links --page-requisites https://example.com/",
      "Limit recursion depth: wget -r -l 2 https://example.com/",
      "Download only specific types: wget -r -A '*.pdf,*.doc' https://example.com/",
      "Exclude types: wget -r -R '*.gif,*.jpg' https://example.com/",
      "Follow external links: wget -r -H https://example.com/",
      "Authentication: wget --user=username --password=password https://example.com/file",
      "HTTP headers: wget --header='Authorization: Bearer TOKEN' https://example.com/",
      "User agent: wget --user-agent='Mozilla/5.0' https://example.com/",
      "Cookies: wget --load-cookies=cookies.txt https://example.com/",
      "Ignore SSL certificate: wget --no-check-certificate https://self-signed.com/file",
      "Use proxy: wget -e use_proxy=yes -e http_proxy=proxy.example.com:8080 https://example.com/",
      "FTP download: wget ftp://ftp.example.com/file.txt",
      "FTP with auth: wget --ftp-user=username --ftp-password=password ftp://ftp.example.com/",
      "Check if file newer on server: wget -N https://example.com/file.zip",
      "Only if modified: wget --timestamping https://example.com/file.zip",
      "Spider mode (test): wget --spider https://example.com/file.zip",
      "Log to file: wget -o download.log https://example.com/file.zip",
      "Append to log: wget -a download.log https://example.com/file.zip",
      "After download verify: md5sum file.zip or sha256sum file.zip"
    ],
    "commands": ["wget", "tail", "md5sum", "sha256sum"],
    "packages": {
      "debian_ubuntu": ["wget"],
      "arch": ["wget"]
    },
    "related_commands": ["curl", "aria2c", "axel", "lftp"],
    "complexity": "intermediate",
    "tags": ["wget", "download", "http", "ftp", "resume", "file-transfer"]
  }
]

[
  {
    "id": "scenario_docker_wont_start_001",
    "command": "docker",
    "scenario": "Developer: Docker service won't start after reboot",
    "problem": "Docker daemon fails to start, containers inaccessible",
    "solution": "Diagnose and fix Docker service issues",
    "steps": [
      "USER SAYS: 'I need to run my dev containers but Docker won\\'t start!'",
      "AGENT: 'Let me check the Docker service...'",
      "Check status: sudo systemctl status docker",
      "AGENT: 'docker.service: failed'",
      "AGENT: 'Failed to start Docker Application Container Engine'",
      "Check logs: sudo journalctl -u docker -n 50 --no-pager",
      "AGENT: 'Error: failed to start daemon: Error initializing network controller'",
      "AGENT: 'iptables failed: iptables --wait -t nat -N DOCKER: Fatal: can\\'t open lock file'",
      "USER: 'What does that mean?'",
      "AGENT: 'Docker can\\'t set up its network rules. Common after system updates.'",
      "Check iptables: sudo iptables -L",
      "AGENT: 'iptables: Resource temporarily unavailable (you must be root)'",
      "AGENT: 'Lock file issue detected!'",
      "Kill stuck process: sudo rm /var/run/xtables.lock",
      "AGENT: 'Removed stale lock file ✓'",
      "Try again: sudo systemctl start docker",
      "AGENT: 'Starting Docker...'",
      "Check status: sudo systemctl status docker",
      "AGENT: 'docker.service: active (running) ✓'",
      "Test Docker: docker ps",
      "AGENT: 'CONTAINER ID   IMAGE   COMMAND   CREATED   STATUS   PORTS   NAMES'",
      "AGENT: 'Docker working! ✓'",
      "USER: 'My containers are gone!'",
      "AGENT: 'Let me check...'",
      "List all: docker ps -a",
      "AGENT: 'Found your containers, they\\'re just stopped'",
      "AGENT: 'postgres-dev: Exited (0) 2 hours ago'",
      "AGENT: 'redis-cache: Exited (0) 2 hours ago'",
      "AGENT: 'app-backend: Exited (0) 2 hours ago'",
      "Start containers: docker start postgres-dev redis-cache app-backend",
      "AGENT: 'Starting containers...'",
      "Wait: sleep 3",
      "Check: docker ps",
      "AGENT: 'All 3 containers running! ✓'",
      "Test connectivity: docker exec postgres-dev pg_isready",
      "AGENT: 'accepting connections ✓'",
      "USER: 'How do I prevent this?'",
      "AGENT: 'Configure auto-restart policies...'",
      "Update restart policy: docker update --restart=unless-stopped postgres-dev redis-cache app-backend",
      "AGENT: 'Containers will auto-start with Docker now ✓'",
      "Create startup script: cat > ~/start-dev-env.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Starting Development Environment ==='",
      "echo ''",
      "echo 'Checking Docker...'",
      "if ! sudo systemctl is-active docker >/dev/null 2>&1; then",
      "  echo '  Docker not running, starting...'",
      "  sudo systemctl start docker",
      "  sleep 3",
      "fi",
      "echo '  ✓ Docker running'",
      "echo ''",
      "echo 'Starting containers...'",
      "CONTAINERS=(postgres-dev redis-cache app-backend)",
      "for container in \"${CONTAINERS[@]}\"; do",
      "  if [ \"$(docker ps -q -f name=$container)\" ]; then",
      "    echo \"  ✓ $container already running\"",
      "  else",
      "    docker start $container",
      "    echo \"  ✓ $container started\"",
      "  fi",
      "done",
      "echo ''",
      "echo 'Waiting for services...'",
      "sleep 5",
      "echo ''",
      "echo 'Service status:'",
      "docker exec postgres-dev pg_isready && echo '  ✓ PostgreSQL ready'",
      "docker exec redis-cache redis-cli ping >/dev/null && echo '  ✓ Redis ready'",
      "echo ''",
      "echo '✓ Development environment ready!'",
      "EOF",
      "chmod +x ~/start-dev-env.sh",
      "Create Docker health check: cat > ~/check-docker.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Docker Health Check ==='",
      "echo ''",
      "echo '1. Docker Service:'",
      "sudo systemctl is-active docker && echo '  ✓ Running' || echo '  ✗ Not running'",
      "echo ''",
      "echo '2. Container Status:'",
      "docker ps --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}'",
      "echo ''",
      "echo '3. Disk Usage:'",
      "docker system df",
      "echo ''",
      "echo '4. Network:'",
      "docker network ls",
      "EOF",
      "chmod +x ~/check-docker.sh",
      "Create Docker cleanup: cat > ~/cleanup-docker.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Docker Cleanup ==='",
      "echo ''",
      "echo 'Current disk usage:'",
      "docker system df",
      "echo ''",
      "read -p 'Remove stopped containers, unused images, and networks? (y/n): ' CONFIRM",
      "if [ \"$CONFIRM\" == 'y' ]; then",
      "  docker system prune -a --volumes",
      "  echo ''",
      "  echo 'After cleanup:'",
      "  docker system df",
      "fi",
      "EOF",
      "chmod +x ~/cleanup-docker.sh",
      "AGENT: 'Docker fixed and dev environment restored! ✓'",
      "AGENT: 'Use ~/start-dev-env.sh to quickly start everything ✓'"
    ],
    "commands": ["docker", "systemctl", "journalctl"],
    "packages": {"debian_ubuntu": ["docker.io", "docker-compose"], "arch": ["docker", "docker-compose"]},
    "related_commands": ["docker", "docker-compose", "systemctl"],
    "complexity": "intermediate",
    "tags": ["docker", "containers", "development", "troubleshooting", "service", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_out_of_disk_space_001",
    "command": "df",
    "scenario": "Developer: System freezing, can't save work",
    "problem": "Disk full from logs and Docker images",
    "solution": "Free up disk space quickly",
    "steps": [
      "USER SAYS: 'My system keeps freezing and I can\\'t save my code!'",
      "AGENT: 'Let me check disk space...'",
      "Check disk: df -h",
      "AGENT: '/dev/sda1: 98% used (only 2GB free!)'",
      "AGENT: 'Disk almost full - that\\'s why system is freezing!'",
      "Find large: sudo du -sh /* 2>/dev/null | sort -hr | head -10",
      "AGENT: 'Largest directories:'",
      "AGENT: '/var: 45GB'",
      "AGENT: '/home: 38GB'",
      "AGENT: '/usr: 12GB'",
      "Drill into /var: sudo du -sh /var/* | sort -hr | head -10",
      "AGENT: '/var/log: 18GB (HUGE!)'",
      "AGENT: '/var/lib/docker: 22GB'",
      "AGENT: '/var/cache: 5GB'",
      "USER: 'Why are logs so big?'",
      "AGENT: 'Check log files...'",
      "Check logs: sudo ls -lhS /var/log/ | head -10",
      "AGENT: 'syslog: 8.5GB (!)'",
      "AGENT: 'kern.log: 4.2GB'",
      "AGENT: 'journal: 5.1GB'",
      "AGENT: 'Something is spamming logs!'",
      "Check recent: sudo tail -100 /var/log/syslog",
      "AGENT: 'ACPI Error repeated 1000s of times per second!'",
      "AGENT: 'Known bug with some hardware'",
      "AGENT: 'Let me free space first, then fix the spam...'",
      "Clear old logs: sudo journalctl --vacuum-size=100M",
      "AGENT: 'Reduced journal to 100MB ✓'",
      "AGENT: 'Freed 5GB!'",
      "Rotate logs: sudo logrotate -f /etc/logrotate.conf",
      "AGENT: 'Force log rotation ✓'",
      "Remove old: sudo rm /var/log/*.gz /var/log/*.1",
      "AGENT: 'Removed old compressed logs ✓'",
      "Truncate huge logs: sudo truncate -s 100M /var/log/syslog",
      "sudo truncate -s 100M /var/log/kern.log",
      "AGENT: 'Truncated giant logs ✓'",
      "AGENT: 'Freed 15GB total from logs!'",
      "Check Docker: docker system df",
      "AGENT: 'Images: 12GB'",
      "AGENT: 'Containers: 3GB'",
      "AGENT: 'Volumes: 7GB'",
      "AGENT: '22GB total in Docker'",
      "Clean Docker: docker system prune -a",
      "AGENT: 'Removing unused containers, images, and networks...'",
      "AGENT: 'Freed 18GB from Docker! ✓'",
      "Check space: df -h /",
      "AGENT: '/dev/sda1: 58% used (40GB free)'",
      "AGENT: 'Much better! ✓'",
      "USER: 'How do I prevent log spam?'",
      "AGENT: 'Block the ACPI spam...'",
      "Find spammer: sudo dmesg | tail -100",
      "AGENT: 'ACPI Error: [ECRD] Namespace lookup failure'",
      "Block in syslog: sudo cat >> /etc/rsyslog.d/99-ignore-acpi.conf << 'EOF'",
      ":msg, contains, \"ACPI Error\" stop",
      "EOF",
      "Restart rsyslog: sudo systemctl restart rsyslog",
      "AGENT: 'ACPI errors filtered from syslog ✓'",
      "Limit journal size: sudo sed -i 's/#SystemMaxUse=/SystemMaxUse=500M/' /etc/systemd/journald.conf",
      "sudo systemctl restart systemd-journald",
      "AGENT: 'Journal limited to 500MB max ✓'",
      "Create cleanup script: cat > ~/free-space.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Disk Space Cleanup ==='",
      "echo ''",
      "echo 'Current disk usage:'",
      "df -h / | tail -1",
      "echo ''",
      "echo 'Will clean:'",
      "echo '  1. Old logs'",
      "echo '  2. Package cache'",
      "echo '  3. Docker unused images'",
      "echo '  4. Thumbnail cache'",
      "echo '  5. Trash'",
      "echo ''",
      "read -p 'Continue? (y/n): ' CONFIRM",
      "if [ \"$CONFIRM\" != 'y' ]; then exit; fi",
      "echo ''",
      "echo 'Cleaning logs...'",
      "sudo journalctl --vacuum-size=100M",
      "sudo rm -f /var/log/*.gz /var/log/*.1",
      "echo ''",
      "echo 'Cleaning package cache...'",
      "sudo apt clean",
      "sudo apt autoremove -y",
      "echo ''",
      "echo 'Cleaning Docker...'",
      "docker system prune -a -f",
      "echo ''",
      "echo 'Cleaning user caches...'",
      "rm -rf ~/.cache/thumbnails/*",
      "rm -rf ~/.local/share/Trash/*",
      "echo ''",
      "echo 'After cleanup:'",
      "df -h / | tail -1",
      "echo ''",
      "echo '✓ Cleanup complete'",
      "EOF",
      "chmod +x ~/free-space.sh",
      "Create disk monitor: cat > ~/disk-monitor.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Disk Space Monitor ==='",
      "echo ''",
      "echo 'Overall usage:'",
      "df -h | grep -E '^/dev|^Filesystem'",
      "echo ''",
      "echo 'Largest directories in home:'",
      "du -sh ~/* ~/.* 2>/dev/null | sort -hr | head -10",
      "echo ''",
      "echo 'Docker disk usage:'",
      "if command -v docker &>/dev/null; then",
      "  docker system df",
      "fi",
      "echo ''",
      "echo 'Log sizes:'",
      "sudo du -sh /var/log/* 2>/dev/null | sort -hr | head -5",
      "echo ''",
      "USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')",
      "if [ \"$USAGE\" -gt 90 ]; then",
      "  echo \"⚠️ WARNING: Disk is ${USAGE}% full!\"",
      "  echo 'Run ~/free-space.sh to clean up'",
      "else",
      "  echo \"✓ Disk usage OK (${USAGE}%)\"",
      "fi",
      "EOF",
      "chmod +x ~/disk-monitor.sh",
      "Create large file finder: cat > ~/find-large-files.sh << 'EOF'",
      "#!/bin/bash",
      "SIZE=${1:-100M}",
      "echo \"=== Finding files larger than $SIZE ===\"",
      "echo ''",
      "echo 'Scanning (this may take a while)...'",
      "echo ''",
      "sudo find / -type f -size +$SIZE 2>/dev/null -exec ls -lh {} \\; | awk '{print $5, $9}' | sort -hr | head -20",
      "EOF",
      "chmod +x ~/find-large-files.sh",
      "Setup monitoring: (crontab -l 2>/dev/null; echo '0 9 * * * ~/disk-monitor.sh') | crontab -",
      "AGENT: 'Daily disk monitoring scheduled ✓'",
      "AGENT: 'Disk space freed! System responsive again ✓'",
      "AGENT: 'Log spam blocked to prevent future issues ✓'"
    ],
    "commands": ["df", "du", "journalctl", "docker"],
    "packages": {"debian_ubuntu": [], "arch": []},
    "related_commands": ["df", "du", "ncdu", "baobab"],
    "complexity": "beginner",
    "tags": ["disk-space", "storage", "cleanup", "logs", "docker", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_ssh_keys_not_working_001",
    "command": "ssh",
    "scenario": "Developer: Can't push to GitHub, SSH key issues",
    "problem": "SSH key authentication failing",
    "solution": "Fix SSH key configuration and permissions",
    "steps": [
      "USER SAYS: 'I can\\'t push to GitHub! It keeps asking for my password which doesn\\'t work.'",
      "AGENT: 'SSH key authentication is failing. Let me diagnose...'",
      "Test GitHub: ssh -T git@github.com",
      "AGENT: 'Permission denied (publickey).'",
      "AGENT: 'GitHub doesn\\'t see your SSH key'",
      "Check keys: ls -la ~/.ssh/",
      "AGENT: 'Found: id_rsa, id_rsa.pub ✓'",
      "Check permissions: ls -l ~/.ssh/id_rsa",
      "AGENT: '-rw-rw-rw- (WRONG!)'",
      "AGENT: 'SSH refuses to use keys with wrong permissions'",
      "Fix permissions: chmod 700 ~/.ssh",
      "chmod 600 ~/.ssh/id_rsa",
      "chmod 644 ~/.ssh/id_rsa.pub",
      "AGENT: 'Permissions fixed ✓'",
      "Test again: ssh -T git@github.com",
      "AGENT: 'Still permission denied'",
      "AGENT: 'Let me check if key is loaded...'",
      "Check agent: ssh-add -l",
      "AGENT: 'The agent has no identities.'",
      "AGENT: 'SSH key not loaded in agent!'",
      "Start agent: eval $(ssh-agent -s)",
      "AGENT: 'Agent pid 12345 ✓'",
      "Add key: ssh-add ~/.ssh/id_rsa",
      "AGENT: 'Identity added ✓'",
      "Test: ssh -T git@github.com",
      "AGENT: 'Hi username! You\\'ve successfully authenticated ✓'",
      "USER: 'But why wasn\\'t it loaded?'",
      "AGENT: 'SSH agent doesn\\'t auto-start. Let me fix that...'",
      "Setup auto-start: cat >> ~/.bashrc << 'EOF'",
      "# Start SSH agent if not running",
      "if [ -z \"$SSH_AUTH_SOCK\" ]; then",
      "  eval $(ssh-agent -s) >/dev/null",
      "  ssh-add ~/.ssh/id_rsa 2>/dev/null",
      "fi",
      "EOF",
      "AGENT: 'SSH agent will auto-start now ✓'",
      "Source: source ~/.bashrc",
      "USER: 'Is my key added to GitHub?'",
      "AGENT: 'Let me check...'",
      "Show public key: cat ~/.ssh/id_rsa.pub",
      "AGENT: 'Copy this and check on GitHub → Settings → SSH Keys'",
      "USER: 'It\\'s not there!'",
      "AGENT: 'That\\'s the problem! Let me guide you...'",
      "AGENT: '1. Go to github.com/settings/keys'",
      "AGENT: '2. Click \"New SSH key\"'",
      "AGENT: '3. Title: \"My Laptop\"'",
      "AGENT: '4. Paste the public key I showed you'",
      "AGENT: '5. Click \"Add SSH key\"'",
      "USER: 'Added!'",
      "Test: ssh -T git@github.com",
      "AGENT: 'Hi username! You\\'ve successfully authenticated ✓'",
      "Test push: git push origin main",
      "AGENT: 'Enumerating objects: 3, done.'",
      "AGENT: 'Writing objects: 100% (3/3)'",
      "AGENT: '✓ Push successful!'",
      "Create SSH helper: cat > ~/ssh-helper.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== SSH Key Helper ==='",
      "echo ''",
      "echo '1. Generate new SSH key'",
      "echo '2. Show public key (for GitHub/GitLab)'",
      "echo '3. Test GitHub connection'",
      "echo '4. Test GitLab connection'",
      "echo '5. Fix permissions'",
      "echo '6. Load key in agent'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1)",
      "    read -p 'Email: ' EMAIL",
      "    ssh-keygen -t ed25519 -C \"$EMAIL\"",
      "    echo '✓ Key generated'",
      "    ;;",
      "  2)",
      "    cat ~/.ssh/id_rsa.pub 2>/dev/null || cat ~/.ssh/id_ed25519.pub 2>/dev/null",
      "    echo ''",
      "    echo 'Copy this key to:'",
      "    echo '  GitHub: https://github.com/settings/keys'",
      "    echo '  GitLab: https://gitlab.com/-/profile/keys'",
      "    ;;",
      "  3)",
      "    ssh -T git@github.com",
      "    ;;",
      "  4)",
      "    ssh -T git@gitlab.com",
      "    ;;",
      "  5)",
      "    chmod 700 ~/.ssh",
      "    chmod 600 ~/.ssh/id_* 2>/dev/null",
      "    chmod 644 ~/.ssh/*.pub 2>/dev/null",
      "    echo '✓ Permissions fixed'",
      "    ;;",
      "  6)",
      "    eval $(ssh-agent -s)",
      "    ssh-add ~/.ssh/id_rsa 2>/dev/null || ssh-add ~/.ssh/id_ed25519 2>/dev/null",
      "    echo '✓ Key loaded'",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/ssh-helper.sh",
      "Create SSH config: cat > ~/.ssh/config << 'EOF'",
      "# GitHub",
      "Host github.com",
      "  HostName github.com",
      "  User git",
      "  IdentityFile ~/.ssh/id_rsa",
      "  AddKeysToAgent yes",
      "# GitLab",
      "Host gitlab.com",
      "  HostName gitlab.com",
      "  User git",
      "  IdentityFile ~/.ssh/id_rsa",
      "  AddKeysToAgent yes",
      "EOF",
      "chmod 600 ~/.ssh/config",
      "AGENT: 'SSH config created for auto key selection ✓'",
      "Create git remote checker: cat > ~/check-git-remote.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Git Remote Check ==='",
      "echo ''",
      "if [ ! -d .git ]; then",
      "  echo 'Not in a git repository'",
      "  exit 1",
      "fi",
      "echo 'Current remotes:'",
      "git remote -v",
      "echo ''",
      "REMOTE=$(git remote get-url origin 2>/dev/null)",
      "if [[ $REMOTE == https://* ]]; then",
      "  echo '⚠️ Using HTTPS (requires password)'",
      "  echo ''",
      "  SSH_URL=$(echo $REMOTE | sed 's|https://github.com/|git@github.com:|')",
      "  echo \"Switch to SSH with:\"",
      "  echo \"  git remote set-url origin $SSH_URL\"",
      "elif [[ $REMOTE == git@* ]]; then",
      "  echo '✓ Using SSH'",
      "else",
      "  echo 'Unknown remote type'",
      "fi",
      "EOF",
      "chmod +x ~/check-git-remote.sh",
      "AGENT: 'SSH keys working! ✓'",
      "AGENT: 'GitHub authentication successful ✓'",
      "AGENT: 'Use ~/ssh-helper.sh for future SSH tasks ✓'"
    ],
    "commands": ["ssh", "ssh-add", "ssh-keygen", "git"],
    "packages": {"debian_ubuntu": ["openssh-client", "git"], "arch": ["openssh", "git"]},
    "related_commands": ["ssh", "ssh-add", "ssh-keygen", "ssh-agent"],
    "complexity": "beginner",
    "tags": ["ssh", "git", "github", "authentication", "keys", "development", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_python_venv_broken_001",
    "command": "python",
    "scenario": "Developer: Python virtual environment not activating",
    "problem": "Venv broken after system Python upgrade",
    "solution": "Recreate virtual environment properly",
    "steps": [
      "USER SAYS: 'My Python virtual environment won\\'t activate! I get errors.'",
      "AGENT: 'Let me check what\\'s wrong...'",
      "Try activate: source venv/bin/activate",
      "AGENT: 'Error: /usr/bin/python3.10: bad interpreter: No such file or directory'",
      "AGENT: 'System Python upgraded from 3.10 to 3.11!'",
      "AGENT: 'Old venv is broken, pointing to deleted Python version'",
      "Check system Python: python3 --version",
      "AGENT: 'Python 3.11.4 ✓'",
      "Check venv Python: cat venv/pyvenv.cfg",
      "AGENT: 'home = /usr/bin'",
      "AGENT: 'version = 3.10.12'",
      "AGENT: 'Venv built with Python 3.10, but it\\'s gone'",
      "USER: 'Do I lose all my installed packages?'",
      "AGENT: 'No! I\\'ll save your requirements first...'",
      "Save packages: venv/bin/pip freeze > requirements-backup.txt",
      "AGENT: 'ERROR: pip won\\'t run with broken Python'",
      "AGENT: 'Let me try another way...'",
      "List packages: ls venv/lib/python3.10/site-packages/ > packages-backup.txt",
      "AGENT: 'Package list saved ✓'",
      "Backup venv: mv venv venv-old",
      "AGENT: 'Old venv backed up ✓'",
      "Create new: python3 -m venv venv",
      "AGENT: 'Creating new venv with Python 3.11...'",
      "AGENT: '✓ New venv created'",
      "Activate: source venv/bin/activate",
      "AGENT: '(venv) ✓ Activated successfully!'",
      "Check Python: python --version",
      "AGENT: 'Python 3.11.4 ✓'",
      "USER: 'How do I reinstall my packages?'",
      "AGENT: 'Check if requirements.txt exists...'",
      "Check file: ls requirements.txt",
      "AGENT: 'requirements.txt found ✓'",
      "Install packages: pip install -r requirements.txt",
      "AGENT: 'Collecting flask==2.3.2'",
      "AGENT: 'Collecting django==4.2.1'",
      "AGENT: 'Installing...'",
      "AGENT: 'Successfully installed 45 packages ✓'",
      "Verify: pip list",
      "AGENT: 'All packages installed ✓'",
      "Test import: python -c 'import flask; print(flask.__version__)'",
      "AGENT: '2.3.2 ✓'",
      "Remove old: rm -rf venv-old",
      "AGENT: 'Old broken venv removed ✓'",
      "USER: 'What if I didn\\'t have requirements.txt?'",
      "AGENT: 'Good question! Let me show you prevention...'",
      "Create update script: cat > ~/update-venv.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Virtual Environment Update Tool ==='",
      "echo ''",
      "if [ ! -d venv ]; then",
      "  echo 'No venv found in current directory'",
      "  exit 1",
      "fi",
      "echo '1. Saving current packages...'",
      "if [ -f venv/bin/pip ]; then",
      "  venv/bin/pip freeze > requirements-backup-$(date +%Y%m%d).txt",
      "  echo \"  ✓ Saved to requirements-backup-$(date +%Y%m%d).txt\"",
      "else",
      "  echo '  ⚠️ venv broken, cannot save packages'",
      "  echo '  Looking for existing requirements.txt...'",
      "  if [ ! -f requirements.txt ]; then",
      "    echo '  ✗ No requirements.txt found!'",
      "    echo '  Continue anyway? (y/n)'",
      "    read CONFIRM",
      "    if [ \"$CONFIRM\" != 'y' ]; then exit 1; fi",
      "  fi",
      "fi",
      "echo ''",
      "echo '2. Removing old venv...'",
      "rm -rf venv",
      "echo '  ✓ Removed'",
      "echo ''",
      "echo '3. Creating new venv...'",
      "python3 -m venv venv",
      "echo '  ✓ Created'",
      "echo ''",
      "echo '4. Activating...'",
      "source venv/bin/activate",
      "echo '  ✓ Activated'",
      "echo ''",
      "echo '5. Upgrading pip...'",
      "pip install --upgrade pip >/dev/null 2>&1",
      "echo '  ✓ pip upgraded'",
      "echo ''",
      "if [ -f requirements.txt ]; then",
      "  echo '6. Installing packages...'",
      "  pip install -r requirements.txt",
      "  echo '  ✓ Packages installed'",
      "else",
      "  echo '6. No requirements.txt found'",
      "  echo '  Install packages manually'",
      "fi",
      "echo ''",
      "echo '✓ Virtual environment updated!'",
      "EOF",
      "chmod +x ~/update-venv.sh",
      "Create venv checker: cat > ~/check-venv.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Virtual Environment Health Check ==='",
      "echo ''",
      "if [ -n \"$VIRTUAL_ENV\" ]; then",
      "  echo '✓ Virtual environment active'",
      "  echo \"  Path: $VIRTUAL_ENV\"",
      "  echo \"  Python: $(python --version)\"",
      "  echo \"  Packages: $(pip list --format=freeze | wc -l)\"",
      "else",
      "  echo '✗ No virtual environment active'",
      "  if [ -d venv ]; then",
      "    echo '  Found venv/ - activate with: source venv/bin/activate'",
      "  else",
      "    echo '  No venv/ found - create with: python3 -m venv venv'",
      "  fi",
      "fi",
      "echo ''",
      "echo 'System Python:'",
      "which python3",
      "python3 --version",
      "echo ''",
      "if [ -d venv ]; then",
      "  echo 'Checking venv health...'",
      "  VENV_PYTHON=$(cat venv/pyvenv.cfg 2>/dev/null | grep 'home' | cut -d'=' -f2 | tr -d ' ')",
      "  SYSTEM_PYTHON=$(which python3 | xargs dirname)",
      "  if [ \"$VENV_PYTHON\" != \"$SYSTEM_PYTHON\" ]; then",
      "    echo \"⚠️ venv built with different Python path\"",
      "    echo \"  venv: $VENV_PYTHON\"",
      "    echo \"  system: $SYSTEM_PYTHON\"",
      "    echo \"  May need to recreate venv\"",
      "  else",
      "    echo '✓ venv matches system Python'",
      "  fi",
      "fi",
      "EOF",
      "chmod +x ~/check-venv.sh",
      "Create requirements updater: cat > ~/save-requirements.sh << 'EOF'",
      "#!/bin/bash",
      "if [ -z \"$VIRTUAL_ENV\" ]; then",
      "  echo 'Activate virtual environment first!'",
      "  exit 1",
      "fi",
      "echo 'Saving current packages to requirements.txt...'",
      "pip freeze > requirements.txt",
      "echo \"✓ Saved $(wc -l < requirements.txt) packages\"",
      "echo ''",
      "echo 'Contents:'",
      "cat requirements.txt",
      "EOF",
      "chmod +x ~/save-requirements.sh",
      "AGENT: 'Virtual environment fixed! ✓'",
      "AGENT: 'Always save requirements.txt: pip freeze > requirements.txt ✓'",
      "AGENT: 'Use ~/check-venv.sh to verify venv health ✓'"
    ],
    "commands": ["python3", "pip", "venv"],
    "packages": {"debian_ubuntu": ["python3", "python3-pip", "python3-venv"], "arch": ["python", "python-pip"]},
    "related_commands": ["python3", "pip", "virtualenv"],
    "complexity": "intermediate",
    "tags": ["python", "venv", "virtual-environment", "pip", "development", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_node_modules_corrupted_001",
    "command": "npm",
    "scenario": "Developer: npm install fails, dependencies broken",
    "problem": "Node modules corrupted, can't run project",
    "solution": "Clean and rebuild node_modules properly",
    "steps": [
      "USER SAYS: 'npm install keeps failing! My project won\\'t run!'",
      "AGENT: 'Let me diagnose the npm issue...'",
      "Try install: npm install",
      "AGENT: 'npm ERR! code EINTEGRITY'",
      "AGENT: 'npm ERR! sha512-... integrity checksum failed'",
      "AGENT: 'npm cache is corrupted!'",
      "Check cache: npm cache verify",
      "AGENT: 'Verification complete. Corrupted: 12'",
      "AGENT: 'Found corrupted cache entries'",
      "Clean cache: npm cache clean --force",
      "AGENT: 'npm cache cleared ✓'",
      "Remove modules: rm -rf node_modules package-lock.json",
      "AGENT: 'Removed corrupted node_modules ✓'",
      "Try install: npm install",
      "AGENT: 'Installing packages...'",
      "AGENT: 'added 1234 packages in 45s ✓'",
      "Test run: npm start",
      "AGENT: 'Error: Cannot find module \\'express\\''",
      "AGENT: 'Still broken! Let me check deeper...'",
      "Check package.json: cat package.json",
      "AGENT: 'dependencies look correct'",
      "Check node version: node --version",
      "AGENT: 'v20.5.0'",
      "Check package: cat package.json | grep '\"engines\"'",
      "AGENT: '\"node\": \">=16.0.0\"'",
      "AGENT: 'Node version OK ✓'",
      "USER: 'Wait, I might have installed something globally...'",
      "Check global: npm list -g --depth=0",
      "AGENT: 'express@4.17.1 (global!)'",
      "AGENT: 'Found it! Global package conflicting with local'",
      "Remove global: npm uninstall -g express",
      "AGENT: 'Removed global express ✓'",
      "Fresh install: rm -rf node_modules package-lock.json && npm install",
      "AGENT: 'Clean reinstall...'",
      "AGENT: '✓ Installed successfully'",
      "Test: npm start",
      "AGENT: 'Server listening on port 3000 ✓'",
      "AGENT: 'Project running!'",
      "Create npm helper: cat > ~/npm-helper.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== npm Troubleshooting Tool ==='",
      "echo ''",
      "echo '1. Clean reinstall (safe)'",
      "echo '2. Nuclear reinstall (clean cache + reinstall)'",
      "echo '3. Check for conflicts'",
      "echo '4. Update all packages'",
      "echo '5. Fix permissions'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1)",
      "    echo 'Removing node_modules and package-lock.json...'",
      "    rm -rf node_modules package-lock.json",
      "    echo 'Reinstalling...'",
      "    npm install",
      "    echo '✓ Done'",
      "    ;;",
      "  2)",
      "    echo 'Nuclear option: cleaning everything...'",
      "    npm cache clean --force",
      "    rm -rf node_modules package-lock.json",
      "    npm install",
      "    echo '✓ Done'",
      "    ;;",
      "  3)",
      "    echo 'Checking for global packages...'",
      "    npm list -g --depth=0",
      "    echo ''",
      "    echo 'Checking for duplicate dependencies...'",
      "    npm dedupe",
      "    ;;",
      "  4)",
      "    echo 'Checking for updates...'",
      "    npm outdated",
      "    echo ''",
      "    read -p 'Update all? (y/n): ' UPDATE",
      "    if [ \"$UPDATE\" == 'y' ]; then",
      "      npm update",
      "    fi",
      "    ;;",
      "  5)",
      "    echo 'Fixing npm permissions...'",
      "    sudo chown -R $USER:$USER ~/.npm",
      "    sudo chown -R $USER:$USER node_modules",
      "    echo '✓ Done'",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/npm-helper.sh",
      "Create node version checker: cat > ~/check-node.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Node.js Environment Check ==='",
      "echo ''",
      "echo 'Node version:'",
      "node --version",
      "echo ''",
      "echo 'npm version:'",
      "npm --version",
      "echo ''",
      "if [ -f package.json ]; then",
      "  echo 'Project requirements:'",
      "  cat package.json | grep -A 2 '\"engines\"'",
      "  echo ''",
      "  echo 'Installed packages:'",
      "  npm list --depth=0 2>/dev/null | head -20",
      "else",
      "  echo 'No package.json found'",
      "fi",
      "echo ''",
      "echo 'Global packages:'",
      "npm list -g --depth=0 2>/dev/null | head -10",
      "echo ''",
      "echo 'Cache info:'",
      "npm cache verify | grep -E 'Total|Corrupted'",
      "EOF",
      "chmod +x ~/check-node.sh",
      "Create package updater: cat > ~/update-packages.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Package Update Tool ==='",
      "echo ''",
      "if [ ! -f package.json ]; then",
      "  echo 'No package.json found'",
      "  exit 1",
      "fi",
      "echo 'Checking for outdated packages...'",
      "npm outdated",
      "echo ''",
      "echo 'Update options:'",
      "echo '1. Update patch versions (safe)'",
      "echo '2. Update minor versions (mostly safe)'",
      "echo '3. Update all (risky)'",
      "echo '4. Update specific package'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) npm update --save ;;",
      "  2) npm update ;;",
      "  3) npm update --latest ;;",
      "  4)",
      "    read -p 'Package name: ' PKG",
      "    npm update $PKG --save",
      "    ;;",
      "esac",
      "echo ''",
      "echo 'Testing...'",
      "npm test || echo 'No tests configured'",
      "EOF",
      "chmod +x ~/update-packages.sh",
      "AGENT: 'npm fixed and project running! ✓'",
      "AGENT: 'Always use local dependencies, avoid global ✓'",
      "AGENT: 'Use ~/npm-helper.sh for common npm issues ✓'"
    ],
    "commands": ["npm", "node", "rm"],
    "packages": {"debian_ubuntu": ["nodejs", "npm"], "arch": ["nodejs", "npm"]},
    "related_commands": ["npm", "yarn", "pnpm"],
    "complexity": "beginner",
    "tags": ["npm", "node", "dependencies", "javascript", "development", "troubleshooting", "real-world", "ai-agent"]
  }
]

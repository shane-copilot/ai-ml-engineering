[
  {
    "id": "scenario_raid_setup_001",
    "command": "mdadm",
    "scenario": "User: Need data redundancy with multiple disks",
    "problem": "Fear of losing data if single disk fails",
    "solution": "Setup software RAID with mdadm",
    "steps": [
      "USER SAYS: 'I have 4 drives and want protection against disk failure.'",
      "AGENT: 'Let me set up RAID for redundancy! What level do you want?'",
      "USER: 'What are my options?'",
      "AGENT: 'RAID levels explained:'",
      "AGENT: '- RAID 0: Speed, no redundancy (2+ disks)'",
      "AGENT: '- RAID 1: Mirror, survives 1 disk failure (2+ disks)'",
      "AGENT: '- RAID 5: Balanced, survives 1 failure (3+ disks)'",
      "AGENT: '- RAID 10: Fast + redundant (4+ disks)'",
      "USER: 'RAID 5 sounds good'",
      "AGENT: 'Perfect! Let me configure RAID 5 with your 4 disks...'",
      "Install: sudo apt install mdadm || sudo pacman -S mdadm",
      "AGENT: 'mdadm installed ✓'",
      "List disks: lsblk",
      "AGENT: 'Found: /dev/sdb, /dev/sdc, /dev/sdd, /dev/sde'",
      "Check disks: sudo mdadm --examine /dev/sd[bcde]",
      "AGENT: 'Disks are clean, no existing RAID ✓'",
      "Create RAID 5: sudo mdadm --create --verbose /dev/md0 --level=5 --raid-devices=4 /dev/sdb /dev/sdc /dev/sdd /dev/sde",
      "AGENT: 'RAID 5 array creating...'",
      "Monitor: watch cat /proc/mdstat",
      "AGENT: 'Building array... this takes time for large disks'",
      "AGENT: '[====>....] resync = 25.3% (1.2TB / 4.8TB)'",
      "Create filesystem: sudo mkfs.ext4 /dev/md0",
      "AGENT: 'Filesystem created ✓'",
      "Mount: sudo mkdir -p /mnt/raid && sudo mount /dev/md0 /mnt/raid",
      "AGENT: 'RAID mounted at /mnt/raid ✓'",
      "Save config: sudo mdadm --detail --scan | sudo tee -a /etc/mdadm/mdadm.conf",
      "Update initramfs: sudo update-initramfs -u",
      "AGENT: 'RAID configuration saved ✓'",
      "Auto-mount: echo '/dev/md0 /mnt/raid ext4 defaults,nofail 0 0' | sudo tee -a /etc/fstab",
      "AGENT: 'Auto-mount configured ✓'",
      "Check status: sudo mdadm --detail /dev/md0",
      "AGENT: 'RAID 5 Status:'",
      "AGENT: '- Total size: 12TB (4x 4TB disks)'",
      "AGENT: '- Usable: 12TB (3 disks worth, 1 for parity)'",
      "AGENT: '- State: clean, active'",
      "AGENT: '- Can survive 1 disk failure ✓'",
      "USER: 'What if a disk fails?'",
      "AGENT: 'Let me show you recovery...'",
      "Simulate failure: sudo mdadm --manage /dev/md0 --fail /dev/sdc",
      "AGENT: 'Marked /dev/sdc as failed'",
      "Check: sudo mdadm --detail /dev/md0",
      "AGENT: 'State: degraded (1 disk failed)'",
      "AGENT: 'Data still accessible! ✓'",
      "Remove failed: sudo mdadm --manage /dev/md0 --remove /dev/sdc",
      "AGENT: 'Failed disk removed from array'",
      "Add replacement: sudo mdadm --manage /dev/md0 --add /dev/sdf",
      "AGENT: 'New disk added, rebuilding...'",
      "AGENT: 'Array will rebuild automatically ✓'",
      "Create RAID monitor: cat > ~/raid-monitor.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== RAID Status Monitor ==='",
      "echo ''",
      "cat /proc/mdstat",
      "echo ''",
      "for array in /dev/md*; do",
      "  if [ -e \"$array\" ]; then",
      "    echo \"Details for $array:\"",
      "    sudo mdadm --detail $array | grep -E 'State|Raid Level|Total Size|Failed'",
      "    echo ''",
      "  fi",
      "done",
      "EOF",
      "chmod +x ~/raid-monitor.sh",
      "Create email alerts: sudo cat > /etc/mdadm/mdadm.conf << 'EOF'",
      "MAILADDR your@email.com",
      "EOF",
      "sudo systemctl enable mdmonitor",
      "AGENT: 'Email alerts configured for disk failures ✓'",
      "Create RAID tools: cat > ~/raid-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== RAID Manager ==='",
      "echo ''",
      "echo '1. Show RAID status'",
      "echo '2. Check disk health'",
      "echo '3. Fail a disk (testing)'",
      "echo '4. Add disk to array'",
      "echo '5. Remove failed disk'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) sudo mdadm --detail /dev/md0 ;;",
      "  2) sudo smartctl -a /dev/sdb && sudo smartctl -a /dev/sdc ;;",
      "  3) read -p 'Disk to fail: ' DISK; sudo mdadm --manage /dev/md0 --fail $DISK ;;",
      "  4) read -p 'Disk to add: ' DISK; sudo mdadm --manage /dev/md0 --add $DISK ;;",
      "  5) read -p 'Disk to remove: ' DISK; sudo mdadm --manage /dev/md0 --remove $DISK ;;",
      "esac",
      "EOF",
      "chmod +x ~/raid-manage.sh",
      "AGENT: 'RAID 5 setup complete! ✓'",
      "AGENT: '12TB protected storage ready ✓'"
    ],
    "commands": ["mdadm", "lsblk", "mkfs", "mount"],
    "packages": {"debian_ubuntu": ["mdadm"], "arch": ["mdadm"]},
    "related_commands": ["mdadm", "lsblk", "smartctl"],
    "complexity": "advanced",
    "tags": ["raid", "mdadm", "data-protection", "redundancy", "storage", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_lvm_management_001",
    "command": "lvm",
    "scenario": "User: Need flexible disk management",
    "problem": "Fixed partitions too rigid, can't resize easily",
    "solution": "Use LVM for dynamic volume management",
    "steps": [
      "USER SAYS: 'My /home partition is full but / has lots of free space!'",
      "AGENT: 'LVM would prevent this! Let me set it up for flexibility...'",
      "Install: sudo apt install lvm2 || sudo pacman -S lvm2",
      "AGENT: 'LVM tools installed ✓'",
      "List disks: lsblk",
      "AGENT: 'Available: /dev/sdb (500GB), /dev/sdc (500GB)'",
      "Create physical volumes: sudo pvcreate /dev/sdb /dev/sdc",
      "AGENT: 'Physical volumes created ✓'",
      "Check PVs: sudo pvdisplay",
      "AGENT: 'PV /dev/sdb: 500GB'",
      "AGENT: 'PV /dev/sdc: 500GB'",
      "Create volume group: sudo vgcreate storage_vg /dev/sdb /dev/sdc",
      "AGENT: 'Volume group \"storage_vg\" created (1TB total) ✓'",
      "Check VG: sudo vgdisplay storage_vg",
      "AGENT: 'VG storage_vg: 1TB available'",
      "Create logical volumes: sudo lvcreate -L 200G -n home_lv storage_vg",
      "sudo lvcreate -L 300G -n media_lv storage_vg",
      "sudo lvcreate -L 100G -n backup_lv storage_vg",
      "AGENT: 'Logical volumes created:'",
      "AGENT: '- home_lv: 200GB'",
      "AGENT: '- media_lv: 300GB'",
      "AGENT: '- backup_lv: 100GB'",
      "AGENT: '- Free: 400GB remaining ✓'",
      "Create filesystems: sudo mkfs.ext4 /dev/storage_vg/home_lv",
      "sudo mkfs.ext4 /dev/storage_vg/media_lv",
      "sudo mkfs.ext4 /dev/storage_vg/backup_lv",
      "AGENT: 'Filesystems created ✓'",
      "Mount: sudo mkdir -p /mnt/{home,media,backup}",
      "sudo mount /dev/storage_vg/home_lv /mnt/home",
      "sudo mount /dev/storage_vg/media_lv /mnt/media",
      "sudo mount /dev/storage_vg/backup_lv /mnt/backup",
      "AGENT: 'Volumes mounted ✓'",
      "USER: 'Now home_lv is full! Can I grow it?'",
      "AGENT: 'Easy! This is LVM magic...'",
      "Check space: sudo vgdisplay storage_vg | grep Free",
      "AGENT: '400GB free in volume group'",
      "Extend volume: sudo lvextend -L +100G /dev/storage_vg/home_lv",
      "AGENT: 'Volume extended: 200GB → 300GB ✓'",
      "Grow filesystem: sudo resize2fs /dev/storage_vg/home_lv",
      "AGENT: 'Filesystem resized online (no unmount needed!) ✓'",
      "Verify: df -h /mnt/home",
      "AGENT: '/mnt/home now 300GB ✓'",
      "USER: 'What about shrinking?'",
      "AGENT: 'Possible but requires unmount...'",
      "Unmount: sudo umount /mnt/backup",
      "Check filesystem: sudo e2fsck -f /dev/storage_vg/backup_lv",
      "Shrink FS: sudo resize2fs /dev/storage_vg/backup_lv 50G",
      "Shrink LV: sudo lvreduce -L 50G /dev/storage_vg/backup_lv",
      "AGENT: 'backup_lv shrunk: 100GB → 50GB (50GB freed) ✓'",
      "Remount: sudo mount /dev/storage_vg/backup_lv /mnt/backup",
      "Create LVM snapshot: sudo lvcreate -L 20G -s -n home_snapshot /dev/storage_vg/home_lv",
      "AGENT: 'Snapshot created! Point-in-time copy ✓'",
      "AGENT: 'Perfect for backups or testing'",
      "Create LVM manager: cat > ~/lvm-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== LVM Manager ==='",
      "echo ''",
      "echo '1. Show all volumes'",
      "echo '2. Extend volume'",
      "echo '3. Create snapshot'",
      "echo '4. Remove snapshot'",
      "echo '5. Show VG free space'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) sudo lvdisplay ;;",
      "  2) read -p 'LV path: ' LV; read -p 'Size to add (e.g., +50G): ' SIZE; sudo lvextend -L $SIZE $LV && sudo resize2fs $LV ;;",
      "  3) read -p 'Source LV: ' SRC; read -p 'Snapshot name: ' NAME; sudo lvcreate -L 20G -s -n $NAME $SRC ;;",
      "  4) read -p 'Snapshot path: ' SNAP; sudo lvremove $SNAP ;;",
      "  5) sudo vgdisplay | grep -E 'VG Name|Free' ;;",
      "esac",
      "EOF",
      "chmod +x ~/lvm-manage.sh",
      "Create monitoring: cat > ~/lvm-monitor.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== LVM Status ==='",
      "echo ''",
      "echo 'Physical Volumes:'",
      "sudo pvs",
      "echo ''",
      "echo 'Volume Groups:'",
      "sudo vgs",
      "echo ''",
      "echo 'Logical Volumes:'",
      "sudo lvs",
      "echo ''",
      "echo 'Disk usage:'",
      "df -h | grep mapper",
      "EOF",
      "chmod +x ~/lvm-monitor.sh",
      "AGENT: 'LVM setup complete! ✓'",
      "AGENT: 'Resize volumes anytime without reinstall ✓'"
    ],
    "commands": ["pvcreate", "vgcreate", "lvcreate", "lvextend", "lvreduce"],
    "packages": {"debian_ubuntu": ["lvm2"], "arch": ["lvm2"]},
    "related_commands": ["pvcreate", "vgcreate", "lvcreate", "lvextend", "pvs", "vgs", "lvs"],
    "complexity": "advanced",
    "tags": ["lvm", "storage", "volume-management", "flexibility", "partitions", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_btrfs_snapshots_001",
    "command": "btrfs",
    "scenario": "User: Want instant snapshots and rollback",
    "problem": "Timeshift is slow, want instant snapshots",
    "solution": "Use Btrfs with instant snapshots",
    "steps": [
      "USER SAYS: 'I want instant snapshots like on Mac Time Machine!'",
      "AGENT: 'Btrfs can do that! Let me show you...'",
      "Check filesystem: df -T /",
      "AGENT: 'Current: ext4 (no snapshots)'",
      "AGENT: 'Need Btrfs for instant snapshots'",
      "USER: 'Can I convert without reinstalling?'",
      "AGENT: 'Risky! Better to use Btrfs for new partitions. Let me show on /home...'",
      "Backup: sudo rsync -av /home/ /backup/home/",
      "AGENT: 'Home backed up (safety first!) ✓'",
      "Unmount: sudo umount /home",
      "Format: sudo mkfs.btrfs /dev/sda2",
      "AGENT: 'Btrfs filesystem created ✓'",
      "Mount: sudo mount /dev/sda2 /home",
      "Restore: sudo rsync -av /backup/home/ /home/",
      "AGENT: 'Data restored ✓'",
      "Create subvolumes: sudo btrfs subvolume create /home/@",
      "sudo btrfs subvolume create /home/@snapshots",
      "AGENT: 'Subvolumes created ✓'",
      "Remount with subvol: sudo umount /home && sudo mount -o subvol=@ /dev/sda2 /home",
      "AGENT: 'Now using Btrfs subvolume ✓'",
      "Create snapshot: sudo btrfs subvolume snapshot /home /home/.snapshots/$(date +%Y-%m-%d_%H-%M-%S)",
      "AGENT: 'Snapshot created INSTANTLY! ✓'",
      "AGENT: 'No copying files - uses copy-on-write'",
      "List snapshots: sudo btrfs subvolume list /home",
      "AGENT: 'All snapshots listed'",
      "USER: 'How do I restore?'",
      "AGENT: 'Easy! Browse snapshots...'",
      "Browse: ls /home/.snapshots/",
      "AGENT: 'Snapshots:'",
      "AGENT: '- 2025-10-07_10-30-00'",
      "AGENT: '- 2025-10-07_14-15-30'",
      "Restore file: cp /home/.snapshots/2025-10-07_10-30-00/user/document.txt /home/user/",
      "AGENT: 'File restored from snapshot ✓'",
      "Create auto-snapshot: cat > ~/btrfs-snapshot.sh << 'EOF'",
      "#!/bin/bash",
      "SNAPSHOT_DIR='/home/.snapshots'",
      "TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)",
      "sudo btrfs subvolume snapshot /home \"$SNAPSHOT_DIR/$TIMESTAMP\"",
      "echo \"✓ Snapshot created: $TIMESTAMP\"",
      "# Keep only last 10 snapshots",
      "cd $SNAPSHOT_DIR",
      "ls -t | tail -n +11 | xargs -I {} sudo btrfs subvolume delete {}",
      "echo '✓ Old snapshots cleaned'",
      "EOF",
      "chmod +x ~/btrfs-snapshot.sh",
      "Schedule: (crontab -l 2>/dev/null; echo '0 */4 * * * ~/btrfs-snapshot.sh') | crontab -",
      "AGENT: 'Automatic snapshots every 4 hours ✓'",
      "Create restore script: cat > ~/btrfs-restore.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Btrfs Snapshot Restore ==='",
      "echo ''",
      "echo 'Available snapshots:'",
      "sudo btrfs subvolume list /home | grep snapshots",
      "echo ''",
      "read -p 'Snapshot date (YYYY-MM-DD_HH-MM-SS): ' SNAP",
      "read -p 'File to restore: ' FILE",
      "SNAP_PATH=\"/home/.snapshots/$SNAP$FILE\"",
      "if [ -f \"$SNAP_PATH\" ]; then",
      "  cp \"$SNAP_PATH\" \"$FILE\"",
      "  echo \"✓ Restored: $FILE\"",
      "else",
      "  echo \"✗ File not found in snapshot\"",
      "fi",
      "EOF",
      "chmod +x ~/btrfs-restore.sh",
      "Create compression: sudo mount -o remount,compress=zstd /home",
      "AGENT: 'Enabled compression - saves space! ✓'",
      "Check compression: sudo btrfs filesystem df /home",
      "AGENT: 'Compression ratio: 1.5:1 (saving 33% space) ✓'",
      "Create balance script: cat > ~/btrfs-balance.sh << 'EOF'",
      "#!/bin/bash",
      "echo 'Running Btrfs balance (rebalances data)...'",
      "sudo btrfs balance start -dusage=50 /home",
      "echo '✓ Balance complete'",
      "EOF",
      "chmod +x ~/btrfs-balance.sh",
      "AGENT: 'Btrfs with snapshots configured! ✓'",
      "AGENT: 'Instant snapshots every 4 hours ✓'"
    ],
    "commands": ["btrfs"],
    "packages": {"debian_ubuntu": ["btrfs-progs"], "arch": ["btrfs-progs"]},
    "related_commands": ["btrfs", "snapper"],
    "complexity": "advanced",
    "tags": ["btrfs", "snapshots", "filesystem", "backup", "instant-rollback", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_smart_monitoring_001",
    "command": "smartctl",
    "scenario": "User: Want to predict disk failure",
    "problem": "Disks fail without warning, losing data",
    "solution": "Monitor SMART data for early warnings",
    "steps": [
      "USER SAYS: 'My disk died suddenly and I lost everything!'",
      "AGENT: 'SMART monitoring can predict failures! Let me set it up...'",
      "Install: sudo apt install smartmontools || sudo pacman -S smartmontools",
      "AGENT: 'SMART tools installed ✓'",
      "Check SMART support: sudo smartctl -i /dev/sda",
      "AGENT: 'SMART support: Available'",
      "AGENT: 'SMART enabled: Yes ✓'",
      "Run health test: sudo smartctl -H /dev/sda",
      "AGENT: 'SMART Health Status: PASSED ✓'",
      "Full report: sudo smartctl -a /dev/sda",
      "AGENT: 'Key metrics:'",
      "AGENT: '- Reallocated_Sector_Ct: 0 (good)'",
      "AGENT: '- Current_Pending_Sector: 0 (good)'",
      "AGENT: '- Offline_Uncorrectable: 0 (good)'",
      "AGENT: '- Power_On_Hours: 15,234'",
      "AGENT: '- Temperature: 35°C'",
      "USER: 'What do those numbers mean?'",
      "AGENT: 'Warning signs of failure:'",
      "AGENT: '- Reallocated sectors > 5: Disk replacing bad sectors'",
      "AGENT: '- Pending sectors > 0: Disk found bad sectors'",
      "AGENT: '- Uncorrectable > 0: Can\\'t read some data!'",
      "AGENT: '- Temperature > 50°C: Too hot!'",
      "Enable monitoring: sudo systemctl enable --now smartd",
      "AGENT: 'SMART daemon running ✓'",
      "Configure: sudo cat > /etc/smartd.conf << 'EOF'",
      "/dev/sda -a -o on -S on -s (S/../.././02|L/../../6/03) -m your@email.com",
      "/dev/sdb -a -o on -S on -s (S/../.././02|L/../../6/03) -m your@email.com",
      "EOF",
      "AGENT: 'Config:'",
      "AGENT: '- Monitor all attributes (-a)'",
      "AGENT: '- Short test daily at 2am'",
      "AGENT: '- Long test Saturday at 3am'",
      "AGENT: '- Email alerts on issues ✓'",
      "Restart: sudo systemctl restart smartd",
      "AGENT: 'Monitoring active ✓'",
      "Run short test: sudo smartctl -t short /dev/sda",
      "AGENT: 'Short test started (completes in 2 minutes)'",
      "Check results: sudo smartctl -l selftest /dev/sda",
      "AGENT: 'Test result: Completed without error ✓'",
      "Run long test: sudo smartctl -t long /dev/sda",
      "AGENT: 'Long test started (completes in 90 minutes)'",
      "AGENT: 'Thorough surface scan in progress...'",
      "Create SMART checker: cat > ~/disk-health.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Disk Health Monitor ==='",
      "echo ''",
      "for disk in /dev/sd[a-z]; do",
      "  if [ -e \"$disk\" ]; then",
      "    echo \"Checking $disk...\"",
      "    HEALTH=$(sudo smartctl -H $disk | grep -i 'SMART overall' | awk '{print $6}')",
      "    TEMP=$(sudo smartctl -a $disk | grep Temperature_Celsius | awk '{print $10}')",
      "    REALLOC=$(sudo smartctl -a $disk | grep Reallocated_Sector_Ct | awk '{print $10}')",
      "    echo \"  Health: $HEALTH\"",
      "    echo \"  Temperature: ${TEMP}°C\"",
      "    echo \"  Reallocated Sectors: $REALLOC\"",
      "    if [ \"$HEALTH\" != \"PASSED\" ] || [ \"$TEMP\" -gt 50 ] || [ \"$REALLOC\" -gt 5 ]; then",
      "      echo \"  ⚠️  WARNING: Potential disk issue!\"",
      "    else",
      "      echo \"  ✓ Disk healthy\"",
      "    fi",
      "    echo ''",
      "  fi",
      "done",
      "EOF",
      "chmod +x ~/disk-health.sh",
      "Create detailed report: cat > ~/smart-report.sh << 'EOF'",
      "#!/bin/bash",
      "REPORT_FILE=~/smart-report-$(date +%Y-%m-%d).txt",
      "echo '=== SMART Report ===' > $REPORT_FILE",
      "echo \"Generated: $(date)\" >> $REPORT_FILE",
      "echo '' >> $REPORT_FILE",
      "for disk in /dev/sd[a-z]; do",
      "  if [ -e \"$disk\" ]; then",
      "    echo \"=== $disk ===\" >> $REPORT_FILE",
      "    sudo smartctl -a $disk >> $REPORT_FILE",
      "    echo '' >> $REPORT_FILE",
      "  fi",
      "done",
      "echo \"✓ Report saved: $REPORT_FILE\"",
      "EOF",
      "chmod +x ~/smart-report.sh",
      "Create alert system: cat > ~/disk-alert.sh << 'EOF'",
      "#!/bin/bash",
      "for disk in /dev/sd[a-z]; do",
      "  if [ -e \"$disk\" ]; then",
      "    HEALTH=$(sudo smartctl -H $disk | grep -c PASSED)",
      "    if [ \"$HEALTH\" -eq 0 ]; then",
      "      notify-send 'DISK FAILURE WARNING' \"$disk is failing! Backup immediately!\"",
      "      echo \"$(date): $disk FAILING\" >> ~/disk-alerts.log",
      "    fi",
      "  fi",
      "done",
      "EOF",
      "chmod +x ~/disk-alert.sh",
      "Schedule alerts: (crontab -l 2>/dev/null; echo '0 * * * * ~/disk-alert.sh') | crontab -",
      "AGENT: 'Hourly disk health alerts configured ✓'",
      "AGENT: 'You\\'ll get warnings BEFORE disk dies ✓'"
    ],
    "commands": ["smartctl", "smartd"],
    "packages": {"debian_ubuntu": ["smartmontools"], "arch": ["smartmontools"]},
    "related_commands": ["smartctl", "smartd"],
    "complexity": "intermediate",
    "tags": ["smart", "disk-health", "monitoring", "predictive", "data-protection", "real-world", "ai-agent"]
  }
]

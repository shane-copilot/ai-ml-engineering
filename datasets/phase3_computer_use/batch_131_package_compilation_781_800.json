[
  {
    "id": "scenario_package_compilation_134",
    "command": "make",
    "scenario": "Compile software from source code using make and configure.",
    "problem": "Need to compile software not available in repositories, build custom versions with specific features, install latest versions, understand compilation process, resolve dependencies, and troubleshoot build errors.",
    "solution": "Use ./configure to check dependencies and generate Makefiles, make to compile source code, make install to install binaries, understand common compilation flags, handle dependencies, and troubleshoot common build issues.",
    "steps": [
      "USER SAYS: 'I downloaded source code but don't know how to compile it. What's the process and how do I handle errors?'",
      "AGENT: 'Let me show you software compilation from source! We'll use ./configure, make, and make install - the standard build process.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: Compiling from source...'",
      "AGENT: '[Searching] \"compile source code make configure gcc build-essential\"'",
      "AGENT: '[Found] ./configure checks dependencies and generates Makefile.'",
      "AGENT: '[Found] make compiles source into binaries.'",
      "AGENT: '[Found] make install copies binaries to system directories.'",
      "AGENT: '[Found] build-essential provides gcc, g++, make, and libraries.'",
      "AGENT: '✓ Research complete! Let's compile software.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Install Build Tools ---'",
      "Run command: `sudo apt install build-essential -y`",
      "AGENT: 'Installs:'",
      "AGENT: '  • gcc - C compiler'",
      "AGENT: '  • g++ - C++ compiler'",
      "AGENT: '  • make - Build automation'",
      "AGENT: '  • libc-dev - C standard library'",
      "AGENT: ''",
      "Run command: `gcc --version`",
      "AGENT: 'gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0'",
      "AGENT: ''",
      "Run command: `make --version`",
      "AGENT: 'GNU Make 4.3'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Download and Extract Source ---'",
      "Run command: `wget https://example.com/myapp-1.2.3.tar.gz`",
      "AGENT: ''",
      "Run command: `tar -xzvf myapp-1.2.3.tar.gz`",
      "AGENT: 'myapp-1.2.3/'",
      "AGENT: 'myapp-1.2.3/configure'",
      "AGENT: 'myapp-1.2.3/Makefile.in'",
      "AGENT: 'myapp-1.2.3/src/'",
      "AGENT: '...'",
      "AGENT: ''",
      "Run command: `cd myapp-1.2.3`",
      "AGENT: ''",
      "Run command: `ls`",
      "AGENT: 'configure  Makefile.in  README  INSTALL  src/  docs/'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Read Documentation ---'",
      "Run command: `cat README`",
      "AGENT: 'MyApp v1.2.3'",
      "AGENT: ''",
      "AGENT: 'Requirements:'",
      "AGENT: '  - GCC 7.0 or higher'",
      "AGENT: '  - OpenSSL development libraries'",
      "AGENT: '  - zlib development libraries'",
      "AGENT: ''",
      "AGENT: 'Installation:'",
      "AGENT: '  ./configure'",
      "AGENT: '  make'",
      "AGENT: '  sudo make install'",
      "AGENT: ''",
      "Run command: `cat INSTALL`",
      "AGENT: 'Detailed installation instructions'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Configure Build ---'",
      "Run command: `./configure --help`",
      "AGENT: 'Configuration options:'",
      "AGENT: '  --prefix=PREFIX         Install to PREFIX [/usr/local]'",
      "AGENT: '  --enable-ssl            Enable SSL support'",
      "AGENT: '  --enable-debug          Build with debug symbols'",
      "AGENT: '  --with-ssl-dir=DIR      OpenSSL directory'",
      "AGENT: '  --disable-shared        Build static libraries only'",
      "AGENT: ''",
      "Run command: `./configure`",
      "AGENT: 'checking for gcc... gcc'",
      "AGENT: 'checking whether the C compiler works... yes'",
      "AGENT: 'checking for C compiler default output... a.out'",
      "AGENT: 'checking for library containing pthread_create... -lpthread'",
      "AGENT: 'checking for OpenSSL... yes'",
      "AGENT: 'checking for zlib... yes'",
      "AGENT: 'creating Makefile'",
      "AGENT: 'config.status: creating config.h'",
      "AGENT: ''",
      "AGENT: 'Configuration successful!'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Compile Source Code ---'",
      "Run command: `make`",
      "AGENT: 'gcc -c -o main.o main.c'",
      "AGENT: 'gcc -c -o utils.o utils.c'",
      "AGENT: 'gcc -c -o network.o network.c'",
      "AGENT: 'gcc -o myapp main.o utils.o network.o -lpthread -lssl -lz'",
      "AGENT: ''",
      "AGENT: 'Build completed successfully!'",
      "AGENT: ''",
      "Run command: `ls`",
      "AGENT: 'myapp  main.o  utils.o  network.o  Makefile  ...'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Test Before Installing ---'",
      "Run command: `./myapp --version`",
      "AGENT: 'MyApp version 1.2.3'",
      "AGENT: ''",
      "Run command: `./myapp --help`",
      "AGENT: 'Usage: myapp [options]'",
      "AGENT: '  -h, --help     Show this help'",
      "AGENT: '  -v, --version  Show version'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '✓ Binary works! Ready to install.'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Install Binary ---'",
      "Run command: `sudo make install`",
      "AGENT: 'mkdir -p /usr/local/bin'",
      "AGENT: 'install -m 755 myapp /usr/local/bin/myapp'",
      "AGENT: 'mkdir -p /usr/local/share/man/man1'",
      "AGENT: 'install -m 644 myapp.1 /usr/local/share/man/man1/'",
      "AGENT: ''",
      "AGENT: 'Installation complete!'",
      "AGENT: ''",
      "Run command: `which myapp`",
      "AGENT: '/usr/local/bin/myapp'",
      "AGENT: ''",
      "Run command: `myapp --version`",
      "AGENT: 'MyApp version 1.2.3'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Custom Installation Prefix ---'",
      "Run command: `./configure --prefix=$HOME/local`",
      "AGENT: 'Will install to /home/user/local instead of /usr/local'",
      "AGENT: ''",
      "Run command: `make`",
      "Run command: `make install`",
      "AGENT: 'Installing to /home/user/local/bin'",
      "AGENT: '  No sudo needed!'",
      "AGENT: ''",
      "Run command: `export PATH=\"$HOME/local/bin:$PATH\"`",
      "Run command: `myapp --version`",
      "AGENT: 'MyApp version 1.2.3'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Handle Missing Dependencies ---'",
      "Run command: `./configure`",
      "AGENT: 'checking for OpenSSL... no'",
      "AGENT: 'configure: error: OpenSSL development libraries not found'",
      "AGENT: ''",
      "AGENT: '⚠️ Missing dependency!'",
      "AGENT: ''",
      "Run command: `sudo apt install libssl-dev`",
      "AGENT: 'Installs OpenSSL development headers'",
      "AGENT: ''",
      "Run command: `./configure`",
      "AGENT: 'checking for OpenSSL... yes ✓'",
      "AGENT: ''",
      "AGENT: 'Common development packages:'",
      "AGENT: '  libssl-dev - OpenSSL'",
      "AGENT: '  zlib1g-dev - zlib compression'",
      "AGENT: '  libcurl4-openssl-dev - cURL'",
      "AGENT: '  libpq-dev - PostgreSQL'",
      "AGENT: '  libmysqlclient-dev - MySQL'",
      "AGENT: '  libsqlite3-dev - SQLite'",
      "AGENT: '  libxml2-dev - XML parser'",
      "AGENT: '  libjpeg-dev, libpng-dev - Image libraries'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Troubleshooting Build Errors ---'",
      "AGENT: ''",
      "AGENT: 'Error: \"command not found: ./configure\"'",
      "Run command: `ls`",
      "AGENT: 'Makefile  CMakeLists.txt  ...'",
      "AGENT: 'Solution: This uses CMake, not autotools'",
      "Run command: `mkdir build && cd build`",
      "Run command: `cmake ..`",
      "Run command: `make`",
      "AGENT: ''",
      "AGENT: 'Error: \"gcc: command not found\"'",
      "AGENT: 'Solution:'",
      "Run command: `sudo apt install build-essential`",
      "AGENT: ''",
      "AGENT: 'Error: \"missing separator\" in Makefile'",
      "AGENT: 'Solution: Makefiles require TAB characters, not spaces'",
      "AGENT: ''",
      "AGENT: 'Error: \"undefined reference to \\'pthread_create\\'\"'",
      "AGENT: 'Solution: Link pthread library'",
      "Run command: `make LDFLAGS=\"-lpthread\"`",
      "AGENT: ''",
      "AGENT: 'Error: Compilation warnings'",
      "Run command: `make 2>&1 | tee build.log`",
      "AGENT: 'Saves errors to file for analysis'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Clean and Rebuild ---'",
      "Run command: `make clean`",
      "AGENT: 'rm -f *.o myapp'",
      "AGENT: 'Removes compiled objects and binaries'",
      "AGENT: ''",
      "Run command: `make distclean`",
      "AGENT: 'rm -f Makefile config.h config.status'",
      "AGENT: 'Also removes generated Makefile and config files'",
      "AGENT: ''",
      "Run command: `./configure && make && sudo make install`",
      "AGENT: 'Complete rebuild and install'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Uninstall ---'",
      "Run command: `sudo make uninstall`",
      "AGENT: 'rm -f /usr/local/bin/myapp'",
      "AGENT: 'rm -f /usr/local/share/man/man1/myapp.1'",
      "AGENT: ''",
      "AGENT: 'If no uninstall target:'",
      "Run command: `cat install_manifest.txt`",
      "AGENT: '/usr/local/bin/myapp'",
      "AGENT: '/usr/local/share/man/man1/myapp.1'",
      "Run command: `xargs sudo rm < install_manifest.txt`",
      "AGENT: ''",
      "AGENT: '--- Bonus: Parallel Compilation ---'",
      "Run command: `make -j$(nproc)`",
      "AGENT: '  -j = Parallel jobs'",
      "AGENT: '  $(nproc) = Number of CPU cores'",
      "AGENT: 'Compiles using all available cores (much faster!)'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Complete Build Script ---'",
      "Create tool: `cat > build-from-source.sh << 'EOF'`",
      "#!/bin/bash\nset -euo pipefail\n\nSOURCE_URL=\"${1:-}\"\nINSTALL_PREFIX=\"${2:-/usr/local}\"\n\nif [ -z \"$SOURCE_URL\" ]; then\n    echo \"Usage: $0 <source-url> [install-prefix]\"\n    exit 1\nfi\n\necho \"=== Building from Source ===\"\necho \"Source: $SOURCE_URL\"\necho \"Prefix: $INSTALL_PREFIX\"\necho \"\"\n\n# Install build dependencies\necho \"Installing build tools...\"\nsudo apt update\nsudo apt install -y build-essential\n\n# Download\nFILENAME=$(basename \"$SOURCE_URL\")\necho \"Downloading $FILENAME...\"\nwget -q --show-progress \"$SOURCE_URL\"\n\n# Extract\necho \"Extracting...\"\nif [[ \"$FILENAME\" == *.tar.gz ]] || [[ \"$FILENAME\" == *.tgz ]]; then\n    tar -xzf \"$FILENAME\"\nelif [[ \"$FILENAME\" == *.tar.bz2 ]]; then\n    tar -xjf \"$FILENAME\"\nelif [[ \"$FILENAME\" == *.tar.xz ]]; then\n    tar -xJf \"$FILENAME\"\nfi\n\n# Find directory\nDIR=$(tar -tf \"$FILENAME\" | head -1 | cut -d/ -f1)\ncd \"$DIR\"\n\necho \"\"\necho \"=== Configuring ===\"\nif [ -f \"configure\" ]; then\n    ./configure --prefix=\"$INSTALL_PREFIX\" || {\n        echo \"Configure failed. Check README for dependencies.\"\n        exit 1\n    }\nelif [ -f \"CMakeLists.txt\" ]; then\n    mkdir -p build && cd build\n    cmake .. -DCMAKE_INSTALL_PREFIX=\"$INSTALL_PREFIX\" || {\n        echo \"CMake failed. Check for missing dependencies.\"\n        exit 1\n    }\nelse\n    echo \"Unknown build system. Check README/INSTALL.\"\n    exit 1\nfi\n\necho \"\"\necho \"=== Compiling (using $(nproc) cores) ===\"\nmake -j$(nproc) || {\n    echo \"Build failed. Trying with single core...\"\n    make\n}\n\necho \"\"\necho \"=== Installing ===\"\nif [ \"$INSTALL_PREFIX\" = \"/usr/local\" ] || [[ \"$INSTALL_PREFIX\" == /usr/* ]]; then\n    sudo make install\nelse\n    make install\nfi\n\necho \"\"\necho \"✓ Build complete!\"\necho \"Installed to: $INSTALL_PREFIX\"\nEOF",
      "Run command: `chmod +x build-from-source.sh`",
      "Run command: `./build-from-source.sh https://example.com/myapp-1.2.3.tar.gz`",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Installed build tools with build-essential package.'",
      "AGENT: '  ✓ Downloaded and extracted source tarball.'",
      "AGENT: '  ✓ Read documentation for requirements and build instructions.'",
      "AGENT: '  ✓ Ran ./configure to check dependencies and generate Makefile.'",
      "AGENT: '  ✓ Compiled with make command.'",
      "AGENT: '  ✓ Tested binary before installing.'",
      "AGENT: '  ✓ Installed with sudo make install.'",
      "AGENT: '  ✓ Used custom prefix for user installation without sudo.'",
      "AGENT: '  ✓ Resolved missing dependencies by installing -dev packages.'",
      "AGENT: '  ✓ Troubleshot common build errors.'",
      "AGENT: '  ✓ Used parallel compilation with make -j for speed.'",
      "AGENT: '  ✓ Created automated build script.'",
      "AGENT: '  ✓ You now master compiling software from source! 🔨'"
    ],
    "commands": ["make", "gcc", "g++", "configure", "cmake", "tar", "wget"],
    "packages": {
      "debian_ubuntu": ["build-essential", "cmake"],
      "arch": ["base-devel", "cmake"]
    },
    "related_commands": ["autoconf", "automake", "libtool", "pkg-config"],
    "complexity": "advanced",
    "tags": ["compilation", "make", "gcc", "build", "configure", "source-code", "dependencies", "cmake", "autotools"]
  }
]

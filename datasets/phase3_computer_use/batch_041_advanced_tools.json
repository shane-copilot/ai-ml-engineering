[
  {
    "id": "scenario_systemd_service_creation_001",
    "command": "multiple",
    "scenario": "User: Create a systemd service for my application",
    "problem": "Want application to run as a service with auto-restart",
    "solution": "Create and configure systemd service unit",
    "steps": [
      "USER SAYS: 'I have a Node.js app that needs to run 24/7. How do I make it a service?'",
      "AGENT: 'I'll create a systemd service for your app. What's the app path?'",
      "USER: '/home/user/myapp/server.js'",
      "AGENT: 'Creating systemd service...'",
      "Create service: cat | sudo tee /etc/systemd/system/myapp.service << 'EOF'",
      "[Unit]",
      "Description=My Node.js Application",
      "After=network.target",
      "",
      "[Service]",
      "Type=simple",
      "User=user",
      "WorkingDirectory=/home/user/myapp",
      "ExecStart=/usr/bin/node server.js",
      "Restart=always",
      "RestartSec=10",
      "StandardOutput=journal",
      "StandardError=journal",
      "",
      "[Install]",
      "WantedBy=multi-user.target",
      "EOF",
      "Reload daemon: sudo systemctl daemon-reload",
      "Enable: sudo systemctl enable myapp",
      "Start: sudo systemctl start myapp",
      "Check status: sudo systemctl status myapp",
      "AGENT: 'Service created and running! ✓'",
      "AGENT: 'Features enabled:'",
      "AGENT: '✓ Auto-start on boot'",
      "AGENT: '✓ Auto-restart on crash (10s delay)'",
      "AGENT: '✓ Logs to journalctl'",
      "View logs: sudo journalctl -u myapp -f",
      "AGENT: 'Your app is now a proper system service! ✓'"
    ],
    "commands": ["systemctl", "journalctl", "cat", "tee"],
    "packages": {"debian_ubuntu": ["systemd"], "arch": ["systemd"]},
    "related_commands": ["systemctl", "journalctl"],
    "complexity": "intermediate",
    "tags": ["systemd", "service", "daemon", "auto-start", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_disk_usage_cleanup_001",
    "command": "multiple",
    "scenario": "User: Disk is full, need to free space",
    "problem": "Out of disk space, system slow or failing",
    "solution": "Find and clean large files and directories",
    "steps": [
      "USER SAYS: 'My disk is full! Can't save anything!'",
      "AGENT: 'Let me find what's using all the space...'",
      "Check usage: df -h",
      "AGENT: 'Root partition: 98% full (only 2GB free)'",
      "Find large dirs: sudo du -h / 2>/dev/null | sort -rh | head -20",
      "AGENT: 'Largest directories:'",
      "AGENT: '- /var/log: 15GB'",
      "AGENT: '- /home/user/.cache: 8GB'",
      "AGENT: '- /var/lib/docker: 25GB'",
      "USER: 'Clean these up please!'",
      "Clean logs: sudo journalctl --vacuum-time=7d",
      "AGENT: 'Cleaned old system logs, freed 8GB ✓'",
      "Clean cache: rm -rf ~/.cache/*",
      "AGENT: 'Cleared user cache, freed 8GB ✓'",
      "Docker cleanup: docker system prune -a -f",
      "AGENT: 'Cleaned Docker, freed 18GB ✓'",
      "Clean packages: sudo apt autoremove && sudo apt clean",
      "AGENT: 'Cleaned packages, freed 3GB ✓'",
      "Check again: df -h",
      "AGENT: 'Root partition now: 65% full (37GB free)'",
      "AGENT: 'Freed 37GB total! ✓'"
    ],
    "commands": ["df", "du", "sort", "journalctl", "rm", "docker", "apt"],
    "packages": {"debian_ubuntu": ["coreutils"], "arch": ["coreutils"]},
    "related_commands": ["df", "du", "ncdu", "baobab"],
    "complexity": "beginner",
    "tags": ["disk-space", "cleanup", "storage", "maintenance", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_find_command_mastery_001",
    "command": "find",
    "scenario": "User: Need to find files by various criteria",
    "problem": "Can't find files, need advanced search",
    "solution": "Master find command with examples",
    "steps": [
      "USER SAYS: 'I lost a file somewhere. How do I search for it?'",
      "AGENT: 'The find command is perfect for this. What do you know about the file?'",
      "USER: 'It's called something like project.txt'",
      "Find by name: find ~ -name '*project*.txt' 2>/dev/null",
      "AGENT: 'Found 3 matches in your home directory!'",
      "USER: 'How about files modified today?'",
      "Modified today: find ~ -type f -mtime 0",
      "USER: 'Files larger than 100MB?'",
      "Large files: find ~ -type f -size +100M",
      "USER: 'Python files modified in last week?'",
      "Recent Python: find ~ -name '*.py' -mtime -7",
      "AGENT: 'More useful find examples:'",
      "AGENT: 'Empty files: find ~ -type f -empty'",
      "AGENT: 'Executable files: find ~ -type f -executable'",
      "AGENT: 'Files owned by user: find ~ -user $USER'",
      "AGENT: 'World-writable: find / -perm -002 -type f 2>/dev/null'",
      "Create find helper: cat > ~/find-files.sh << 'EOF'",
      "#!/bin/bash",
      "echo '1. By name: find ~ -name \"*pattern*\"'",
      "echo '2. Modified today: find ~ -mtime 0'",
      "echo '3. Large files (>100MB): find ~ -size +100M'",
      "echo '4. By type: find ~ -name \"*.ext\"'",
      "read -p 'Enter pattern: ' PATTERN",
      "find ~ -name \"*$PATTERN*\" 2>/dev/null",
      "EOF",
      "chmod +x ~/find-files.sh"
    ],
    "commands": ["find", "cat", "chmod"],
    "packages": {"debian_ubuntu": ["findutils"], "arch": ["findutils"]},
    "related_commands": ["find", "locate", "fd"],
    "complexity": "intermediate",
    "tags": ["find", "search", "files", "command-mastery", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_environment_variables_001",
    "command": "multiple",
    "scenario": "User: Understanding and managing environment variables",
    "problem": "Programs can't find paths, need to set environment vars",
    "solution": "Configure PATH and other environment variables",
    "steps": [
      "USER SAYS: 'Command not found but I just installed it!'",
      "AGENT: 'It's probably not in your PATH. Let me check...'",
      "Show PATH: echo $PATH",
      "AGENT: 'Your PATH includes: /usr/bin, /usr/local/bin, ~/bin'",
      "USER: 'Installed to /opt/myapp/bin'",
      "AGENT: 'That's not in PATH. Adding it...'",
      "Add to bashrc: echo 'export PATH=\"/opt/myapp/bin:$PATH\"' >> ~/.bashrc",
      "Apply now: export PATH=\"/opt/myapp/bin:$PATH\"",
      "Test: which mycommand",
      "AGENT: 'Now found at /opt/myapp/bin/mycommand ✓'",
      "AGENT: 'Common environment variables:'",
      "Show all: env | grep -E '^(PATH|HOME|USER|SHELL|EDITOR)='",
      "Set EDITOR: echo 'export EDITOR=vim' >> ~/.bashrc",
      "Set custom var: echo 'export API_KEY=secret123' >> ~/.bashrc",
      "Source: source ~/.bashrc",
      "AGENT: 'Environment variables configured! ✓'",
      "Create env checker: cat > ~/check-env.sh << 'EOF'",
      "#!/bin/bash",
      "echo 'User: '$USER",
      "echo 'Home: '$HOME",
      "echo 'Shell: '$SHELL",
      "echo 'Editor: '$EDITOR",
      "echo 'Path entries:'",
      "echo $PATH | tr ':' '\\n' | nl",
      "EOF",
      "chmod +x ~/check-env.sh"
    ],
    "commands": ["echo", "export", "env", "which", "source", "grep", "tr", "cat", "chmod"],
    "packages": {"debian_ubuntu": ["bash"], "arch": ["bash"]},
    "related_commands": ["export", "env", "printenv", "source"],
    "complexity": "beginner",
    "tags": ["environment", "variables", "path", "shell", "configuration", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_grep_mastery_001",
    "command": "grep",
    "scenario": "User: Search text in files efficiently",
    "problem": "Need to find text patterns in files",
    "solution": "Master grep with useful patterns",
    "steps": [
      "USER SAYS: 'How do I search for text in files?'",
      "AGENT: 'grep is your friend! What are you searching for?'",
      "USER: 'The word \"error\" in log files'",
      "Basic: grep 'error' /var/log/syslog",
      "Case-insensitive: grep -i 'error' /var/log/syslog",
      "With line numbers: grep -n 'error' /var/log/syslog",
      "Recursive: grep -r 'error' /var/log/",
      "AGENT: 'More powerful searches:'",
      "Context: grep -C 3 'error' logfile",
      "AGENT: 'Shows 3 lines before and after match'",
      "Count: grep -c 'error' logfile",
      "AGENT: 'Counts occurrences'",
      "Multiple files: grep 'error' *.log",
      "Regex: grep -E '[0-9]{3}-[0-9]{3}-[0-9]{4}' contacts.txt",
      "AGENT: 'Finds phone numbers with regex'",
      "Exclude: grep -v 'debug' logfile",
      "AGENT: 'Shows lines NOT matching pattern'",
      "Only filenames: grep -l 'error' *.log",
      "AGENT: 'Shows only filenames with matches'",
      "Create grep helper: cat > ~/search-text.sh << 'EOF'",
      "#!/bin/bash",
      "read -p 'Search pattern: ' PATTERN",
      "read -p 'Directory: ' DIR",
      "grep -rni \"$PATTERN\" \"$DIR\" --color=auto",
      "EOF",
      "chmod +x ~/search-text.sh",
      "AGENT: 'grep master tips:'",
      "AGENT: '- Use -i for case-insensitive'",
      "AGENT: '- Use -r for recursive'",
      "AGENT: '- Use -E for extended regex'",
      "AGENT: '- Use -v to invert match'",
      "AGENT: 'You're now a grep master! ✓'"
    ],
    "commands": ["grep", "cat", "chmod"],
    "packages": {"debian_ubuntu": ["grep"], "arch": ["grep"]},
    "related_commands": ["grep", "egrep", "fgrep", "ripgrep"],
    "complexity": "beginner",
    "tags": ["grep", "search", "text", "regex", "command-mastery", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_alias_productivity_001",
    "command": "alias",
    "scenario": "User: Create command shortcuts for efficiency",
    "problem": "Typing long commands repeatedly is tedious",
    "solution": "Create useful aliases",
    "steps": [
      "USER SAYS: 'I keep typing the same long commands. Any shortcuts?'",
      "AGENT: 'Yes! Aliases are command shortcuts. Let me set up useful ones...'",
      "Add to bashrc: cat >> ~/.bashrc << 'EOF'",
      "# Navigation",
      "alias ..='cd ..'",
      "alias ...='cd ../..'",
      "alias ll='ls -lah'",
      "alias la='ls -A'",
      "",
      "# Git shortcuts",
      "alias gs='git status'",
      "alias ga='git add'",
      "alias gc='git commit'",
      "alias gp='git push'",
      "alias gl='git log --oneline'",
      "",
      "# Safety",
      "alias rm='rm -i'",
      "alias cp='cp -i'",
      "alias mv='mv -i'",
      "",
      "# System",
      "alias update='sudo apt update && sudo apt upgrade'",
      "alias ports='sudo netstat -tulpn'",
      "alias myip='curl ifconfig.me'",
      "",
      "# Productivity",
      "alias cls='clear'",
      "alias h='history'",
      "alias j='jobs -l'",
      "EOF",
      "Source: source ~/.bashrc",
      "AGENT: 'Aliases created! Try typing: ll'",
      "Test: ll",
      "AGENT: 'Works! Shows detailed file list.'",
      "USER: 'Can I create custom aliases?'",
      "AGENT: 'Yes! Add to ~/.bashrc or use alias command:'",
      "Example: alias backup='rsync -av ~/Documents /backup/'",
      "Save permanently: echo \"alias backup='rsync -av ~/Documents /backup/'\" >> ~/.bashrc",
      "List aliases: alias",
      "Remove alias: unalias backup",
      "AGENT: 'Pro tip: Use functions for complex commands:'",
      "Add function: cat >> ~/.bashrc << 'EOF'",
      "# Function to extract archives",
      "extract() {",
      "  if [ -f $1 ]; then",
      "    case $1 in",
      "      *.tar.gz) tar xzf $1 ;;",
      "      *.zip) unzip $1 ;;",
      "      *.tar.bz2) tar xjf $1 ;;",
      "      *) echo 'Unknown format' ;;",
      "    esac",
      "  fi",
      "}",
      "EOF",
      "Source: source ~/.bashrc",
      "AGENT: 'Now you can: extract file.tar.gz ✓'",
      "AGENT: 'Your productivity just increased! ✓'"
    ],
    "commands": ["alias", "cat", "source", "echo", "unalias"],
    "packages": {"debian_ubuntu": ["bash"], "arch": ["bash"]},
    "related_commands": ["alias", "function", "source"],
    "complexity": "beginner",
    "tags": ["alias", "shortcuts", "productivity", "bash", "efficiency", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_process_management_001",
    "command": "multiple",
    "scenario": "User: Manage running processes and jobs",
    "problem": "Programs frozen or consuming resources",
    "solution": "Master process control commands",
    "steps": [
      "USER SAYS: 'A program is frozen and I can't close it!'",
      "AGENT: 'Let me help you manage processes. What program?'",
      "USER: 'Firefox is completely frozen'",
      "Find process: ps aux | grep firefox",
      "AGENT: 'Found firefox with PID 1234'",
      "Kill nicely: kill 1234",
      "Wait: sleep 3",
      "Check: ps -p 1234",
      "If still running: kill -9 1234",
      "AGENT: 'Process terminated. ✓'",
      "AGENT: 'Process management commands:'",
      "AGENT: '- ps aux: list all processes'",
      "AGENT: '- top/htop: interactive viewer'",
      "AGENT: '- kill PID: terminate process'",
      "AGENT: '- killall name: kill by name'",
      "AGENT: '- pkill pattern: kill by pattern'",
      "Background jobs: AGENT: 'Running long command? Use &:'",
      "Example: long-command &",
      "AGENT: 'This runs in background'",
      "List jobs: jobs",
      "Bring to foreground: fg %1",
      "Send to background: bg %1",
      "Stop job: Ctrl+Z",
      "Create process helper: cat > ~/manage-processes.sh << 'EOF'",
      "#!/bin/bash",
      "echo '1. List all processes'",
      "echo '2. Kill process by PID'",
      "echo '3. Kill process by name'",
      "echo '4. Show CPU usage'",
      "echo '5. Show memory usage'",
      "read -p 'Choose (1-5): ' OPT",
      "case $OPT in",
      "  1) ps aux | less ;;",
      "  2) read -p 'PID: ' PID; kill $PID ;;",
      "  3) read -p 'Name: ' NAME; killall $NAME ;;",
      "  4) ps aux --sort=-pcpu | head -10 ;;",
      "  5) ps aux --sort=-rss | head -10 ;;",
      "esac",
      "EOF",
      "chmod +x ~/manage-processes.sh",
      "AGENT: 'Process manager created! ✓'"
    ],
    "commands": ["ps", "kill", "killall", "pkill", "top", "htop", "jobs", "fg", "bg", "cat", "chmod"],
    "packages": {"debian_ubuntu": ["procps", "htop"], "arch": ["procps-ng", "htop"]},
    "related_commands": ["ps", "kill", "top", "htop", "jobs"],
    "complexity": "beginner",
    "tags": ["processes", "jobs", "kill", "management", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_text_processing_awk_001",
    "command": "awk",
    "scenario": "User: Process and manipulate text data",
    "problem": "Need to extract and transform text data",
    "solution": "Use awk for text processing",
    "steps": [
      "USER SAYS: 'I have a CSV file and need to extract specific columns.'",
      "AGENT: 'awk is perfect for this! Show me the file format.'",
      "USER: 'name,age,city - comma separated'",
      "Extract column: awk -F',' '{print $1}' file.csv",
      "AGENT: 'This prints first column (names)'",
      "Multiple columns: awk -F',' '{print $1, $3}' file.csv",
      "AGENT: 'Prints names and cities'",
      "With header: awk -F',' 'NR==1{print \"NAME\",\"AGE\"} NR>1{print $1,$2}' file.csv",
      "Filter rows: awk -F',' '$2 > 30 {print $1}' file.csv",
      "AGENT: 'Shows names where age > 30'",
      "Calculate sum: awk -F',' '{sum+=$2} END {print sum}' file.csv",
      "AGENT: 'Sums all ages'",
      "AGENT: 'Useful awk patterns:'",
      "AGENT: '- Print column: {print $1}'",
      "AGENT: '- Set delimiter: -F\",\"'",
      "AGENT: '- Condition: $2>30'",
      "AGENT: '- Count lines: END {print NR}'",
      "AGENT: '- Skip header: NR>1'",
      "Real example: ps aux | awk '{print $1, $11}'",
      "AGENT: 'Shows username and command'",
      "Memory usage: free -h | awk '/^Mem/{print $3\"/\"$2}'",
      "AGENT: 'Shows used/total memory'",
      "Create awk helper: cat > ~/process-csv.sh << 'EOF'",
      "#!/bin/bash",
      "read -p 'CSV file: ' FILE",
      "read -p 'Columns to extract (e.g., 1,3): ' COLS",
      "IFS=',' read -ra COLS_ARR <<< \"$COLS\"",
      "CMD=\"awk -F',' '{print\"",
      "for col in \"${COLS_ARR[@]}\"; do",
      "  CMD=\"$CMD \\$${col},\"",
      "done",
      "CMD=\"${CMD%,}}' $FILE\"",
      "eval $CMD",
      "EOF",
      "chmod +x ~/process-csv.sh",
      "AGENT: 'CSV processor created! ✓'"
    ],
    "commands": ["awk", "cat", "chmod"],
    "packages": {"debian_ubuntu": ["gawk"], "arch": ["gawk"]},
    "related_commands": ["awk", "sed", "cut", "paste"],
    "complexity": "intermediate",
    "tags": ["awk", "text-processing", "csv", "data", "parsing", "real-world", "ai-agent"]
  }
]

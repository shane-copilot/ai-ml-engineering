[
  {
    "id": "scenario_background_jobs_nohup_131",
    "command": "nohup",
    "scenario": "Run commands in background, detach from terminal, and manage long-running processes.",
    "problem": "Need to run long scripts that continue after SSH disconnect, start background processes, prevent terminal hangup from killing jobs, manage multiple background tasks, and check job status.",
    "solution": "Use nohup to prevent hangup signals, & for background execution, disown to detach jobs, screen/tmux for persistent sessions, jobs/fg/bg for job control, and proper output redirection.",
    "steps": [
      "USER SAYS: 'I need to run a long script over SSH but it dies when I disconnect. How do I keep processes running after I log out?'",
      "AGENT: 'Let me show you background job management! We'll use nohup, disown, screen/tmux, and job control to keep processes running.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: Background jobs and process persistence...'",
      "AGENT: '[Searching] \"nohup disown background jobs terminal hangup\"'",
      "AGENT: '[Found] nohup ignores HUP (hangup) signal.'",
      "AGENT: '[Found] & runs command in background.'",
      "AGENT: '[Found] disown removes job from shell\\'s job table.'",
      "AGENT: '[Found] screen/tmux create persistent terminal sessions.'",
      "AGENT: '✓ Research complete! Let's manage background jobs.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Basic Background Execution ---'",
      "Run command: `./long-script.sh &`",
      "AGENT: '[1] 12345  ← Job number and PID'",
      "AGENT: ''",
      "Run command: `jobs`",
      "AGENT: '[1]+  Running                 ./long-script.sh &'",
      "AGENT: ''",
      "AGENT: '⚠️ Problem: Dies when terminal closes!'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: nohup - Hangup-Proof Execution ---'",
      "Run command: `nohup ./long-script.sh &`",
      "AGENT: 'nohup: ignoring input and appending output to 'nohup.out'",
      "AGENT: '[1] 12346'",
      "AGENT: ''",
      "AGENT: '✓ Now survives terminal disconnect!'",
      "AGENT: ''",
      "Run command: `cat nohup.out`",
      "AGENT: 'Script started...'",
      "AGENT: 'Processing data...'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: 'Custom output file:'",
      "Run command: `nohup ./long-script.sh > my-output.log 2>&1 &`",
      "AGENT: '  > = Redirect stdout'",
      "AGENT: '  2>&1 = Redirect stderr to stdout'",
      "AGENT: '  & = Background'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Running Command Already Started ---'",
      "Run command: `./long-script.sh`",
      "AGENT: 'Oops, forgot to use nohup!'",
      "AGENT: ''",
      "AGENT: 'Press Ctrl+Z to suspend:'",
      "AGENT: '[1]+  Stopped                 ./long-script.sh'",
      "AGENT: ''",
      "Run command: `bg`",
      "AGENT: '[1]+ ./long-script.sh &'",
      "AGENT: 'Moved to background'",
      "AGENT: ''",
      "Run command: `disown -h %1`",
      "AGENT: '  -h = Keep in job table but ignore HUP'",
      "AGENT: '  %1 = Job number 1'",
      "AGENT: ''",
      "AGENT: 'Or completely detach:'",
      "Run command: `disown %1`",
      "AGENT: 'Removes from job table entirely'",
      "AGENT: ''",
      "Run command: `jobs`",
      "AGENT: '(empty) ← Job gone from shell, but still running!'",
      "AGENT: ''",
      "Run command: `ps aux | grep long-script`",
      "AGENT: 'user  12346  0.5  0.1  ./long-script.sh'",
      "AGENT: '✓ Still running!'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Job Control Commands ---'",
      "Run command: `jobs`",
      "AGENT: '[1]   Running                 ./script1.sh &'",
      "AGENT: '[2]-  Running                 ./script2.sh &'",
      "AGENT: '[3]+  Stopped                 ./script3.sh'",
      "AGENT: ''",
      "AGENT: 'Bring job to foreground:'",
      "Run command: `fg %1`",
      "AGENT: './script1.sh'",
      "AGENT: 'Now in foreground - can Ctrl+C to stop'",
      "AGENT: ''",
      "AGENT: 'Resume stopped job in background:'",
      "Run command: `bg %3`",
      "AGENT: '[3]+ ./script3.sh &'",
      "AGENT: ''",
      "AGENT: 'Kill background job:'",
      "Run command: `kill %2`",
      "AGENT: '[2]-  Terminated              ./script2.sh'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: screen - Persistent Terminal Sessions ---'",
      "Run command: `sudo apt install screen -y`",
      "AGENT: ''",
      "Run command: `screen -S mysession`",
      "AGENT: 'Creates new screen session named \"mysession\"'",
      "AGENT: ''",
      "AGENT: 'Inside screen, run your command:'",
      "Run command: `./long-script.sh`",
      "AGENT: ''",
      "AGENT: 'Detach from screen: Press Ctrl+A then D'",
      "AGENT: '[detached from mysession]'",
      "AGENT: ''",
      "Run command: `screen -ls`",
      "AGENT: 'There is a screen on:'",
      "AGENT: '        12350.mysession    (Detached)'",
      "AGENT: ''",
      "Run command: `screen -r mysession`",
      "AGENT: 'Reattach to session - script still running!'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: tmux - Modern Alternative to screen ---'",
      "Run command: `sudo apt install tmux -y`",
      "AGENT: ''",
      "Run command: `tmux new -s work`",
      "AGENT: 'Creates new tmux session'",
      "AGENT: ''",
      "AGENT: 'Run commands in tmux:'",
      "Run command: `./long-script.sh`",
      "AGENT: ''",
      "AGENT: 'Detach: Press Ctrl+B then D'",
      "AGENT: '[detached (from session work)]'",
      "AGENT: ''",
      "Run command: `tmux ls`",
      "AGENT: 'work: 1 windows (created Tue Oct  8 18:30:00 2025)'",
      "AGENT: ''",
      "Run command: `tmux attach -t work`",
      "AGENT: 'Reattaches to session'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Multiple Background Commands ---'",
      "Run command: `(command1 && command2 && command3) > output.log 2>&1 &`",
      "AGENT: 'Run sequence in background'",
      "AGENT: ''",
      "Run command: `{ command1; command2; command3; } > output.log 2>&1 &`",
      "AGENT: 'Alternative syntax'",
      "AGENT: ''",
      "AGENT: 'Parallel execution:'",
      "Run command: `command1 > out1.log 2>&1 & command2 > out2.log 2>&1 & command3 > out3.log 2>&1 &`",
      "AGENT: 'All three run simultaneously'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Monitoring Background Jobs ---'",
      "Run command: `jobs -l`",
      "AGENT: '  -l = Show PIDs'",
      "AGENT: '[1]  12345 Running                 ./script1.sh &'",
      "AGENT: '[2]  12346 Running                 ./script2.sh &'",
      "AGENT: ''",
      "Run command: `jobs -r`",
      "AGENT: '  -r = Running jobs only'",
      "AGENT: ''",
      "Run command: `jobs -s`",
      "AGENT: '  -s = Stopped jobs only'",
      "AGENT: ''",
      "AGENT: 'Monitor output in real-time:'",
      "Run command: `tail -f nohup.out`",
      "AGENT: 'Processing item 1234...'",
      "AGENT: 'Processing item 1235...'",
      "AGENT: '...'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: at - Schedule One-Time Job ---'",
      "Run command: `echo \"./backup.sh\" | at now + 5 minutes`",
      "AGENT: 'job 1 at Tue Oct  8 18:35:00 2025'",
      "AGENT: ''",
      "Run command: `echo \"./maintenance.sh\" | at 02:00`",
      "AGENT: 'Runs at 2 AM'",
      "AGENT: ''",
      "Run command: `atq`",
      "AGENT: '1    Tue Oct  8 02:00:00 2025 a user'",
      "AGENT: 'Lists pending at jobs'",
      "AGENT: ''",
      "Run command: `atrm 1`",
      "AGENT: 'Removes job 1'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Complete Background Job Manager ---'",
      "Create tool: `cat > job-manager.sh << 'EOF'`",
      "#!/bin/bash\nset -euo pipefail\n\nJOB_DIR=\"$HOME/.background-jobs\"\nmkdir -p \"$JOB_DIR\"\n\nstart_job() {\n    local name=\"$1\"\n    local command=\"$2\"\n    local logfile=\"$JOB_DIR/$name.log\"\n    local pidfile=\"$JOB_DIR/$name.pid\"\n    \n    if [ -f \"$pidfile\" ] && kill -0 $(cat \"$pidfile\") 2>/dev/null; then\n        echo \"Job '$name' already running (PID: $(cat \"$pidfile\"))\"\n        return 1\n    fi\n    \n    echo \"Starting job '$name'...\"\n    nohup bash -c \"$command\" > \"$logfile\" 2>&1 &\n    echo $! > \"$pidfile\"\n    echo \"Job started (PID: $!, log: $logfile)\"\n}\n\nstop_job() {\n    local name=\"$1\"\n    local pidfile=\"$JOB_DIR/$name.pid\"\n    \n    if [ ! -f \"$pidfile\" ]; then\n        echo \"Job '$name' not found\"\n        return 1\n    fi\n    \n    local pid=$(cat \"$pidfile\")\n    if kill \"$pid\" 2>/dev/null; then\n        echo \"Job '$name' stopped (PID: $pid)\"\n        rm \"$pidfile\"\n    else\n        echo \"Job '$name' not running (cleaning up)\"\n        rm \"$pidfile\"\n    fi\n}\n\nstatus_job() {\n    local name=\"$1\"\n    local pidfile=\"$JOB_DIR/$name.pid\"\n    \n    if [ ! -f \"$pidfile\" ]; then\n        echo \"Job '$name': Not running\"\n        return 1\n    fi\n    \n    local pid=$(cat \"$pidfile\")\n    if kill -0 \"$pid\" 2>/dev/null; then\n        echo \"Job '$name': Running (PID: $pid)\"\n        ps -p \"$pid\" -o pid,ppid,%cpu,%mem,etime,cmd\n    else\n        echo \"Job '$name': Dead (cleaning up)\"\n        rm \"$pidfile\"\n    fi\n}\n\nlist_jobs() {\n    echo \"=== Background Jobs ===\"\n    for pidfile in \"$JOB_DIR\"/*.pid; do\n        [ -f \"$pidfile\" ] || continue\n        local name=$(basename \"$pidfile\" .pid)\n        status_job \"$name\"\n    done\n}\n\nshow_log() {\n    local name=\"$1\"\n    local lines=\"${2:-50}\"\n    local logfile=\"$JOB_DIR/$name.log\"\n    \n    if [ ! -f \"$logfile\" ]; then\n        echo \"No log file for job '$name'\"\n        return 1\n    fi\n    \n    tail -n \"$lines\" \"$logfile\"\n}\n\ncase \"${1:-}\" in\n    start)\n        [ -z \"${2:-}\" ] && echo \"Usage: $0 start <name> <command>\" && exit 1\n        [ -z \"${3:-}\" ] && echo \"Usage: $0 start <name> <command>\" && exit 1\n        start_job \"$2\" \"$3\"\n        ;;\n    stop)\n        [ -z \"${2:-}\" ] && echo \"Usage: $0 stop <name>\" && exit 1\n        stop_job \"$2\"\n        ;;\n    status)\n        [ -z \"${2:-}\" ] && echo \"Usage: $0 status <name>\" && exit 1\n        status_job \"$2\"\n        ;;\n    list)\n        list_jobs\n        ;;\n    log)\n        [ -z \"${2:-}\" ] && echo \"Usage: $0 log <name> [lines]\" && exit 1\n        show_log \"$2\" \"${3:-50}\"\n        ;;\n    *)\n        echo \"Usage: $0 {start|stop|status|list|log} [args]\"\n        echo \"\"\n        echo \"Examples:\"\n        echo \"  $0 start backup './backup.sh'\"\n        echo \"  $0 status backup\"\n        echo \"  $0 log backup 100\"\n        echo \"  $0 list\"\n        echo \"  $0 stop backup\"\n        exit 1\n        ;;\nesac\nEOF",
      "Run command: `chmod +x job-manager.sh`",
      "AGENT: ''",
      "AGENT: 'Usage:'",
      "Run command: `./job-manager.sh start backup './backup.sh'`",
      "AGENT: 'Starting job \\'backup\\'...'",
      "AGENT: 'Job started (PID: 12360, log: /home/user/.background-jobs/backup.log)'",
      "AGENT: ''",
      "Run command: `./job-manager.sh list`",
      "AGENT: '=== Background Jobs ==='",
      "AGENT: 'Job \\'backup\\': Running (PID: 12360)'",
      "AGENT: '  PID  PPID %CPU %MEM     ELAPSED CMD'",
      "AGENT: '12360     1  5.2  0.8       00:30 ./backup.sh'",
      "AGENT: ''",
      "Run command: `./job-manager.sh log backup 20`",
      "AGENT: 'Backing up /var/www...'",
      "AGENT: 'Backed up 1.2GB'",
      "AGENT: '...'",
      "AGENT: ''",
      "Run command: `./job-manager.sh stop backup`",
      "AGENT: 'Job \\'backup\\' stopped (PID: 12360)'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Best Practices ---'",
      "AGENT: ''",
      "AGENT: '✅ DO:'",
      "AGENT: '  • Use nohup for SSH scripts: nohup ./script.sh &'",
      "AGENT: '  • Redirect output: > output.log 2>&1'",
      "AGENT: '  • Use screen/tmux for interactive sessions'",
      "AGENT: '  • Monitor with tail -f logfile'",
      "AGENT: '  • Store PIDs for process management'",
      "AGENT: ''",
      "AGENT: '❌ DON\\'T:'",
      "AGENT: '  • Leave scripts running without output redirection'",
      "AGENT: '  • Forget to test script before nohup'",
      "AGENT: '  • Use & without nohup over SSH'",
      "AGENT: '  • Run without error handling'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Quick Reference ---'",
      "AGENT: ''",
      "AGENT: 'Start background job:'",
      "AGENT: '  nohup ./script.sh > output.log 2>&1 &'",
      "AGENT: ''",
      "AGENT: 'Suspend and background:'",
      "AGENT: '  Ctrl+Z, then: bg'",
      "AGENT: ''",
      "AGENT: 'Detach from shell:'",
      "AGENT: '  disown -h %1'",
      "AGENT: ''",
      "AGENT: 'Check status:'",
      "AGENT: '  jobs -l'",
      "AGENT: '  ps aux | grep script'",
      "AGENT: ''",
      "AGENT: 'Screen session:'",
      "AGENT: '  screen -S name    # Create'",
      "AGENT: '  Ctrl+A D          # Detach'",
      "AGENT: '  screen -r name    # Reattach'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Used nohup to prevent hangup signal killing jobs.'",
      "AGENT: '  ✓ Ran commands in background with &.'",
      "AGENT: '  ✓ Detached running jobs with disown.'",
      "AGENT: '  ✓ Created persistent sessions with screen and tmux.'",
      "AGENT: '  ✓ Managed jobs with jobs, fg, bg commands.'",
      "AGENT: '  ✓ Redirected output to log files properly.'",
      "AGENT: '  ✓ Built comprehensive job manager script.'",
      "AGENT: '  ✓ Scheduled one-time jobs with at command.'",
      "AGENT: '  ✓ You now master background job management! 🔄'"
    ],
    "commands": ["nohup", "bg", "fg", "jobs", "disown", "screen", "tmux", "at", "atq", "atrm", "kill"],
    "packages": {
      "debian_ubuntu": ["coreutils", "screen", "tmux", "at"],
      "arch": ["coreutils", "screen", "tmux", "at"]
    },
    "related_commands": ["systemd", "supervisord", "pm2"],
    "complexity": "intermediate",
    "tags": ["nohup", "background-jobs", "job-control", "screen", "tmux", "disown", "persistence", "ssh", "process-management"]
  }
]

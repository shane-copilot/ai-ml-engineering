[
  {
    "id": "scenario_kubernetes_pod_crashloop_089",
    "command": "kubectl",
    "scenario": "Debug a Kubernetes pod stuck in CrashLoopBackOff state.",
    "problem": "A developer deployed a new application to Kubernetes, but the pod keeps restarting in a CrashLoopBackOff loop. They need to find out why the container is crashing and fix it.",
    "solution": "Use kubectl to check pod status, view logs from the crashing container, describe the pod for events, and check resource constraints. Identify the root cause (missing environment variable, health check failure, etc.) and fix the deployment.",
    "steps": [
      "USER SAYS: 'I deployed my app to Kubernetes but the pod status shows CrashLoopBackOff. It keeps restarting every few seconds. How do I figure out what's wrong?'",
      "AGENT: 'CrashLoopBackOff means your container starts, crashes immediately, and Kubernetes keeps trying to restart it with exponential backoff. Let me help you debug this systematically.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: Kubernetes CrashLoopBackOff debugging...'",
      "AGENT: '[Searching] \"kubernetes pod crashloopbackoff debug\"'",
      "AGENT: '[Found] Check pod logs with `kubectl logs` - add `--previous` flag to see logs from the crashed container.'",
      "AGENT: '[Found] Use `kubectl describe pod` to see events and resource issues.'",
      "AGENT: '[Found] Common causes: missing config/secrets, failed health checks, insufficient resources, application bugs.'",
      "AGENT: '‚úì Research complete! Let's investigate.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Check Pod Status ---'",
      "Run command: `kubectl get pods`",
      "AGENT: 'NAME                        READY   STATUS             RESTARTS   AGE'",
      "AGENT: 'myapp-7d8f9c6b5-x4k2m       0/1     CrashLoopBackOff   5          3m'",
      "AGENT: ''",
      "AGENT: 'üí° The pod has restarted 5 times in 3 minutes. Let's see why.'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: View Container Logs ---'",
      "AGENT: 'First, try to get logs from the current container:'",
      "Run command: `kubectl logs myapp-7d8f9c6b5-x4k2m`",
      "AGENT: 'Error from server (BadRequest): container \"myapp\" in pod \"myapp-7d8f9c6b5-x4k2m\" is waiting to start: CrashLoopBackOff'",
      "AGENT: ''",
      "AGENT: 'If the container is currently crashed, we need logs from the previous instance:'",
      "Run command: `kubectl logs myapp-7d8f9c6b5-x4k2m --previous`",
      "AGENT: 'Starting application...'",
      "AGENT: 'Loading configuration...'",
      "AGENT: 'Error: DATABASE_URL environment variable not set'",
      "AGENT: 'Fatal: Cannot start without database connection'",
      "AGENT: 'Exiting with code 1'",
      "AGENT: ''",
      "AGENT: 'üéØ FOUND IT! The application is crashing because DATABASE_URL is missing.'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Describe Pod for More Details ---'",
      "Run command: `kubectl describe pod myapp-7d8f9c6b5-x4k2m`",
      "AGENT: 'Name:         myapp-7d8f9c6b5-x4k2m'",
      "AGENT: 'Namespace:    default'",
      "AGENT: 'Node:         worker-1'",
      "AGENT: 'Status:       Running'",
      "AGENT: 'Containers:'",
      "AGENT: '  myapp:'",
      "AGENT: '    State:          Waiting'",
      "AGENT: '      Reason:       CrashLoopBackOff'",
      "AGENT: '    Last State:     Terminated'",
      "AGENT: '      Reason:       Error'",
      "AGENT: '      Exit Code:    1'",
      "AGENT: 'Events:'",
      "AGENT: '  Type     Reason     Age                 From               Message'",
      "AGENT: '  ----     ------     ----                ----               -------'",
      "AGENT: '  Normal   Scheduled  4m                  default-scheduler  Successfully assigned default/myapp-7d8f9c6b5-x4k2m to worker-1'",
      "AGENT: '  Normal   Pulled     3m (x4 over 4m)     kubelet            Container image pulled'",
      "AGENT: '  Normal   Created    3m (x4 over 4m)     kubelet            Created container myapp'",
      "AGENT: '  Normal   Started    3m (x4 over 4m)     kubelet            Started container myapp'",
      "AGENT: '  Warning  BackOff    1m (x8 over 3m)     kubelet            Back-off restarting failed container'",
      "AGENT: ''",
      "AGENT: 'The events confirm it's restarting repeatedly with exit code 1.'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Check Deployment Configuration ---'",
      "Run command: `kubectl get deployment myapp -o yaml | grep -A 10 env:`",
      "AGENT: '        env:'",
      "AGENT: '        - name: APP_ENV'",
      "AGENT: '          value: \"production\"'",
      "AGENT: '        - name: PORT'",
      "AGENT: '          value: \"8080\"'",
      "AGENT: ''",
      "AGENT: 'üí° DATABASE_URL is indeed missing from the environment variables!'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Fix the Deployment ---'",
      "AGENT: 'Edit the deployment to add the missing environment variable:'",
      "Run command: `kubectl edit deployment myapp`",
      "AGENT: 'Add this to the env section:'",
      "AGENT: '```yaml'",
      "AGENT: '        - name: DATABASE_URL'",
      "AGENT: '          value: \"postgresql://user:pass@db-service:5432/mydb\"'",
      "AGENT: '```'",
      "AGENT: 'Or better yet, use a Secret:'",
      "AGENT: '```yaml'",
      "AGENT: '        - name: DATABASE_URL'",
      "AGENT: '          valueFrom:'",
      "AGENT: '            secretKeyRef:'",
      "AGENT: '              name: myapp-secrets'",
      "AGENT: '              key: database-url'",
      "AGENT: '```'",
      "AGENT: ''",
      "AGENT: 'Save and exit. Kubernetes will automatically roll out the change:'",
      "AGENT: 'deployment.apps/myapp edited'",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Verify the Fix ---'",
      "Run command: `kubectl get pods -w`",
      "AGENT: 'NAME                        READY   STATUS              RESTARTS   AGE'",
      "AGENT: 'myapp-7d8f9c6b5-x4k2m       0/1     Terminating         5          5m'",
      "AGENT: 'myapp-8f6a4d9c2-p7h3n       0/1     ContainerCreating   0          5s'",
      "AGENT: 'myapp-8f6a4d9c2-p7h3n       1/1     Running             0          15s'",
      "AGENT: ''",
      "AGENT: '‚úÖ SUCCESS! The new pod is Running with READY 1/1!'",
      "AGENT: ''",
      "Run command: `kubectl logs myapp-8f6a4d9c2-p7h3n`",
      "AGENT: 'Starting application...'",
      "AGENT: 'Loading configuration...'",
      "AGENT: 'Connected to database successfully'",
      "AGENT: 'Server listening on port 8080'",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Identified CrashLoopBackOff status with kubectl get pods.'",
      "AGENT: '  ‚úì Retrieved logs from previous crashed container with --previous flag.'",
      "AGENT: '  ‚úì Found root cause: missing DATABASE_URL environment variable.'",
      "AGENT: '  ‚úì Used kubectl describe to confirm exit code and restart pattern.'",
      "AGENT: '  ‚úì Fixed deployment configuration by adding missing environment variable.'",
      "AGENT: '  ‚úì Verified new pod started successfully and application is running! ‚ò∏Ô∏è'"
    ],
    "commands": ["kubectl"],
    "packages": {
      "debian_ubuntu": ["kubectl"],
      "arch": ["kubectl"]
    },
    "related_commands": ["docker", "helm", "k9s"],
    "complexity": "intermediate",
    "tags": ["kubernetes", "k8s", "containers", "crashloopbackoff", "debugging", "devops", "troubleshooting", "cloud-native"]
  },
  {
    "id": "scenario_nginx_reverse_proxy_setup_090",
    "command": "nginx",
    "scenario": "Configure Nginx as a reverse proxy for a backend application with load balancing.",
    "problem": "A developer has multiple instances of a Node.js application running on ports 3000, 3001, and 3002. They want Nginx to handle incoming traffic on port 80, distribute requests across the backends, and serve static files directly without hitting the application servers.",
    "solution": "Configure Nginx as a reverse proxy with an upstream block for load balancing across multiple backend servers. Set up location blocks to serve static files directly and proxy API requests to the backends. Add health checks and configure caching for better performance.",
    "steps": [
      "USER SAYS: 'I have 3 instances of my Node.js app running on different ports. How do I set up Nginx to load balance between them and also serve my static files?'",
      "AGENT: 'Perfect! This is exactly what Nginx excels at - acting as a reverse proxy with load balancing and static file serving. Let me set this up for you.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: Nginx reverse proxy with load balancing...'",
      "AGENT: '[Searching] \"nginx reverse proxy load balancing multiple backends\"'",
      "AGENT: '[Found] Use `upstream` block to define backend servers.'",
      "AGENT: '[Found] Default load balancing is round-robin. Can use `least_conn` or `ip_hash` for other strategies.'",
      "AGENT: '[Found] `proxy_pass` directive forwards requests to upstream backends.'",
      "AGENT: '[Found] Static files should be served with `root` directive, bypassing the proxy.'",
      "AGENT: '‚úì Research complete! Let's configure Nginx.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Install Nginx ---'",
      "Run command: `sudo apt update && sudo apt install nginx -y`",
      "AGENT: 'nginx is already the newest version (1.24.0-1)'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Create Nginx Configuration ---'",
      "Run command: `sudo nano /etc/nginx/sites-available/myapp`",
      "AGENT: 'Add this configuration:'",
      "AGENT: '```nginx'",
      "AGENT: '# Define backend servers'",
      "AGENT: 'upstream myapp_backend {'",
      "AGENT: '    least_conn;  # Use least connections algorithm'",
      "AGENT: '    server localhost:3000 max_fails=3 fail_timeout=30s;'",
      "AGENT: '    server localhost:3001 max_fails=3 fail_timeout=30s;'",
      "AGENT: '    server localhost:3002 max_fails=3 fail_timeout=30s;'",
      "AGENT: '}'",
      "AGENT: ''",
      "AGENT: 'server {'",
      "AGENT: '    listen 80;'",
      "AGENT: '    server_name myapp.example.com;'",
      "AGENT: ''",
      "AGENT: '    # Access and error logs'",
      "AGENT: '    access_log /var/log/nginx/myapp_access.log;'",
      "AGENT: '    error_log /var/log/nginx/myapp_error.log;'",
      "AGENT: ''",
      "AGENT: '    # Serve static files directly'",
      "AGENT: '    location /static/ {'",
      "AGENT: '        alias /var/www/myapp/static/;'",
      "AGENT: '        expires 30d;'",
      "AGENT: '        add_header Cache-Control \"public, immutable\";'",
      "AGENT: '    }'",
      "AGENT: ''",
      "AGENT: '    # Proxy API requests to backend'",
      "AGENT: '    location / {'",
      "AGENT: '        proxy_pass http://myapp_backend;'",
      "AGENT: '        proxy_http_version 1.1;'",
      "AGENT: ''",
      "AGENT: '        # Forward headers'",
      "AGENT: '        proxy_set_header Upgrade $http_upgrade;'",
      "AGENT: '        proxy_set_header Connection \"upgrade\";'",
      "AGENT: '        proxy_set_header Host $host;'",
      "AGENT: '        proxy_set_header X-Real-IP $remote_addr;'",
      "AGENT: '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;'",
      "AGENT: '        proxy_set_header X-Forwarded-Proto $scheme;'",
      "AGENT: ''",
      "AGENT: '        # Timeouts'",
      "AGENT: '        proxy_connect_timeout 60s;'",
      "AGENT: '        proxy_send_timeout 60s;'",
      "AGENT: '        proxy_read_timeout 60s;'",
      "AGENT: '    }'",
      "AGENT: ''",
      "AGENT: '    # Health check endpoint'",
      "AGENT: '    location /health {'",
      "AGENT: '        access_log off;'",
      "AGENT: '        return 200 \"healthy\\n\";'",
      "AGENT: '        add_header Content-Type text/plain;'",
      "AGENT: '    }'",
      "AGENT: '}'",
      "AGENT: '```'",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Enable the Site ---'",
      "Run command: `sudo ln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/`",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Test Configuration ---'",
      "Run command: `sudo nginx -t`",
      "AGENT: 'nginx: the configuration file /etc/nginx/nginx.conf syntax is ok'",
      "AGENT: 'nginx: configuration file /etc/nginx/nginx.conf test is successful'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Reload Nginx ---'",
      "Run command: `sudo systemctl reload nginx`",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Test Load Balancing ---'",
      "AGENT: 'Make several requests and check which backend handles each one:'",
      "Run command: `for i in {1..6}; do curl -s http://localhost/ | grep \"Server\"; done`",
      "AGENT: 'Served by backend: localhost:3000'",
      "AGENT: 'Served by backend: localhost:3001'",
      "AGENT: 'Served by backend: localhost:3002'",
      "AGENT: 'Served by backend: localhost:3000'",
      "AGENT: 'Served by backend: localhost:3001'",
      "AGENT: 'Served by backend: localhost:3002'",
      "AGENT: ''",
      "AGENT: '‚úÖ Perfect! Requests are being distributed evenly across all backends.'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Verify Static File Serving ---'",
      "Run command: `curl -I http://localhost/static/logo.png`",
      "AGENT: 'HTTP/1.1 200 OK'",
      "AGENT: 'Server: nginx/1.24.0'",
      "AGENT: 'Content-Type: image/png'",
      "AGENT: 'Cache-Control: public, immutable'",
      "AGENT: 'Expires: Wed, 06 Nov 2025 21:00:00 GMT'",
      "AGENT: ''",
      "AGENT: '‚úÖ Static files are being served directly by Nginx with caching headers!'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Monitor Backend Health ---'",
      "Run command: `sudo tail -f /var/log/nginx/myapp_access.log`",
      "AGENT: 'You can watch requests in real-time and see which backend handled each one.'",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Configured Nginx upstream block with 3 backend servers using least_conn algorithm.'",
      "AGENT: '  ‚úì Set up health checks with max_fails and fail_timeout for automatic backend failure detection.'",
      "AGENT: '  ‚úì Configured static file serving with long-term caching to reduce backend load.'",
      "AGENT: '  ‚úì Set up proper proxy headers for X-Real-IP, X-Forwarded-For, and WebSocket support.'",
      "AGENT: '  ‚úì Verified load balancing is distributing traffic evenly across backends.'",
      "AGENT: '  ‚úì You now have a production-ready reverse proxy with load balancing! üîÑ'"
    ],
    "commands": ["apt", "nano", "ln", "nginx", "systemctl", "curl", "tail"],
    "packages": {
      "debian_ubuntu": ["nginx"],
      "arch": ["nginx"]
    },
    "related_commands": ["haproxy", "apache2", "caddy"],
    "complexity": "intermediate",
    "tags": ["nginx", "reverse-proxy", "load-balancing", "web-server", "devops", "performance", "high-availability"]
  }
]

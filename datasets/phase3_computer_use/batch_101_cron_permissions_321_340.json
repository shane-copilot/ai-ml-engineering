[
  {
    "id": "scenario_cron_automation_105",
    "command": "cron",
    "scenario": "Set up automated tasks with cron for backups, log rotation, and system maintenance.",
    "problem": "Manual daily tasks are being forgotten: database backups, log cleanup, SSL certificate renewal checks. The team needs scheduled automation that runs reliably even when no one is logged in.",
    "solution": "Create cron jobs using crontab with proper scheduling syntax, error handling, logging, and email notifications. Set up system-wide and user-specific scheduled tasks.",
    "steps": [
      "USER SAYS: 'I need to automate database backups every night at 2 AM and clean up old logs weekly. How do I schedule these tasks reliably?'",
      "AGENT: 'Cron is perfect for scheduled automation! It's been the Unix standard for decades. Let me show you how to set up reliable, well-logged cron jobs.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: Cron scheduling and best practices...'",
      "AGENT: '[Searching] \"cron syntax examples best practices logging\"'",
      "AGENT: '[Found] Cron syntax: minute hour day month weekday command'",
      "AGENT: '[Found] Use `crontab -e` to edit user cron jobs, files in `/etc/cron.d/` for system jobs.'",
      "AGENT: '[Found] Always redirect output to log files: `command >> /var/log/job.log 2>&1`'",
      "AGENT: '[Found] Use absolute paths in cron jobs - PATH variable may be limited.'",
      "AGENT: '‚úì Research complete! Let's create production-ready cron jobs.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Understand Cron Syntax ---'",
      "AGENT: 'Format: * * * * * command'",
      "AGENT: '         ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ'",
      "AGENT: '         ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ Day of week (0-7, Sunday=0 or 7)'",
      "AGENT: '         ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ Month (1-12)'",
      "AGENT: '         ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Day of month (1-31)'",
      "AGENT: '         ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Hour (0-23)'",
      "AGENT: '         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Minute (0-59)'",
      "AGENT: ''",
      "AGENT: 'Common examples:'",
      "AGENT: '  0 2 * * *       ‚Üí Daily at 2:00 AM'",
      "AGENT: '  */15 * * * *    ‚Üí Every 15 minutes'",
      "AGENT: '  0 */6 * * *     ‚Üí Every 6 hours'",
      "AGENT: '  0 0 * * 0       ‚Üí Every Sunday at midnight'",
      "AGENT: '  30 3 1 * *      ‚Üí First day of month at 3:30 AM'",
      "AGENT: '  0 9-17 * * 1-5  ‚Üí Every hour 9AM-5PM, Monday-Friday'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Create Database Backup Script ---'",
      "Create tool: `cat > /usr/local/bin/backup-database.sh << 'EOF'`",
      "#!/bin/bash\nset -euo pipefail\n\n# Configuration\nDB_NAME=\"myapp\"\nDB_USER=\"backup_user\"\nBACKUP_DIR=\"/var/backups/postgres\"\nRETENTION_DAYS=30\nLOG_FILE=\"/var/log/db-backup.log\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Generate timestamp\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"${BACKUP_DIR}/${DB_NAME}_${TIMESTAMP}.sql.gz\"\n\n# Function to log messages\nlog() {\n    echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $*\" | tee -a \"$LOG_FILE\"\n}\n\nlog \"Starting database backup for $DB_NAME\"\n\n# Perform backup\nif pg_dump -U \"$DB_USER\" \"$DB_NAME\" | gzip > \"$BACKUP_FILE\"; then\n    SIZE=$(du -h \"$BACKUP_FILE\" | cut -f1)\n    log \"SUCCESS: Backup completed - $BACKUP_FILE ($SIZE)\"\nelse\n    log \"ERROR: Backup failed!\"\n    exit 1\nfi\n\n# Clean old backups\nlog \"Cleaning backups older than $RETENTION_DAYS days\"\nfind \"$BACKUP_DIR\" -name \"${DB_NAME}_*.sql.gz\" -mtime +\"$RETENTION_DAYS\" -delete\n\n# Report status\nBACKUP_COUNT=$(ls -1 \"$BACKUP_DIR\" | wc -l)\nlog \"Backup complete. Total backups retained: $BACKUP_COUNT\"\nEOF",
      "Run command: `sudo chmod +x /usr/local/bin/backup-database.sh`",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Edit User Crontab ---'",
      "Run command: `crontab -e`",
      "AGENT: 'Opens editor. Add these lines:'",
      "AGENT: ''",
      "AGENT: '# Database backup every night at 2 AM'",
      "AGENT: '0 2 * * * /usr/local/bin/backup-database.sh >> /var/log/cron-backup.log 2>&1'",
      "AGENT: ''",
      "AGENT: '# Clean old logs weekly on Sunday at 3 AM'",
      "AGENT: '0 3 * * 0 find /var/log/myapp -name \"*.log\" -mtime +30 -delete'",
      "AGENT: ''",
      "AGENT: '# Check SSL certificates weekly'",
      "AGENT: '0 9 * * 1 /usr/local/bin/check-ssl-certs.sh'",
      "AGENT: ''",
      "AGENT: '# Restart application daily at 4 AM (if needed)'",
      "AGENT: '0 4 * * * /usr/bin/systemctl restart myapp.service'",
      "AGENT: ''",
      "AGENT: 'Save and exit. You'll see:'",
      "AGENT: 'crontab: installing new crontab'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: View Current Cron Jobs ---'",
      "Run command: `crontab -l`",
      "AGENT: '# Database backup every night at 2 AM'",
      "AGENT: '0 2 * * * /usr/local/bin/backup-database.sh >> /var/log/cron-backup.log 2>&1'",
      "AGENT: '# Clean old logs weekly on Sunday at 3 AM'",
      "AGENT: '0 3 * * 0 find /var/log/myapp -name \"*.log\" -mtime +30 -delete'",
      "AGENT: '# Check SSL certificates weekly'",
      "AGENT: '0 9 * * 1 /usr/local/bin/check-ssl-certs.sh'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Create System-Wide Cron Job ---'",
      "AGENT: 'For system tasks, create file in /etc/cron.d/:'",
      "Create tool: `sudo tee /etc/cron.d/system-maintenance << 'EOF'`",
      "# System maintenance tasks\nSHELL=/bin/bash\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=admin@example.com\n\n# Update package cache daily at 1 AM\n0 1 * * * root apt-get update -qq >> /var/log/apt-update.log 2>&1\n\n# System health check every 5 minutes\n*/5 * * * * root /usr/local/bin/health-check.sh\n\n# Disk space alert hourly\n0 * * * * root /usr/local/bin/check-disk-space.sh\nEOF",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Test Cron Job Manually ---'",
      "Run command: `sudo -u postgres /usr/local/bin/backup-database.sh`",
      "AGENT: '[2025-10-08 10:00:00] Starting database backup for myapp'",
      "AGENT: '[2025-10-08 10:00:03] SUCCESS: Backup completed - /var/backups/postgres/myapp_20251008_100000.sql.gz (2.3M)'",
      "AGENT: '[2025-10-08 10:00:03] Cleaning backups older than 30 days'",
      "AGENT: '[2025-10-08 10:00:03] Backup complete. Total backups retained: 15'",
      "AGENT: ''",
      "AGENT: '‚úÖ Backup script works!'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Monitor Cron Execution ---'",
      "Run command: `grep CRON /var/log/syslog | tail -10`",
      "AGENT: 'Oct  8 02:00:01 server CRON[12345]: (root) CMD (/usr/local/bin/backup-database.sh >> /var/log/cron-backup.log 2>&1)'",
      "AGENT: 'Oct  8 03:00:01 server CRON[12346]: (root) CMD (find /var/log/myapp -name \"*.log\" -mtime +30 -delete)'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Advanced Cron Examples ---'",
      "AGENT: ''",
      "AGENT: 'Run on specific days:'",
      "AGENT: '0 8 1,15 * * /path/to/script.sh  # 1st and 15th of month'",
      "AGENT: ''",
      "AGENT: 'Run Monday-Friday only:'",
      "AGENT: '30 9 * * 1-5 /path/to/workday-task.sh'",
      "AGENT: ''",
      "AGENT: 'Run every 2 hours:'",
      "AGENT: '0 */2 * * * /path/to/task.sh'",
      "AGENT: ''",
      "AGENT: 'Run at reboot:'",
      "AGENT: '@reboot /path/to/startup-script.sh'",
      "AGENT: ''",
      "AGENT: 'Other special strings:'",
      "AGENT: '@yearly   = 0 0 1 1 *'",
      "AGENT: '@monthly  = 0 0 1 * *'",
      "AGENT: '@weekly   = 0 0 * * 0'",
      "AGENT: '@daily    = 0 0 * * *'",
      "AGENT: '@hourly   = 0 * * * *'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Cron with Error Notifications ---'",
      "Create tool: `cat > /usr/local/bin/cron-wrapper.sh << 'EOF'`",
      "#!/bin/bash\n# Wrapper script for cron jobs with error handling\n\nSCRIPT=\"$1\"\nLOG_FILE=\"${2:-/var/log/cron-wrapper.log}\"\n\nlog() {\n    echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $*\" >> \"$LOG_FILE\"\n}\n\nlog \"Starting: $SCRIPT\"\n\nif \"$SCRIPT\" >> \"$LOG_FILE\" 2>&1; then\n    log \"SUCCESS: $SCRIPT\"\nelse\n    EXIT_CODE=$?\n    log \"ERROR: $SCRIPT failed with exit code $EXIT_CODE\"\n    \n    # Send email notification\n    echo \"Cron job failed: $SCRIPT (exit code $EXIT_CODE)\" | \\\n        mail -s \"Cron Job Failure Alert\" admin@example.com\n    \n    exit $EXIT_CODE\nfi\nEOF",
      "Run command: `sudo chmod +x /usr/local/bin/cron-wrapper.sh`",
      "AGENT: ''",
      "AGENT: 'Use in crontab:'",
      "AGENT: '0 2 * * * /usr/local/bin/cron-wrapper.sh /usr/local/bin/backup-database.sh'",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Debugging Cron Issues ---'",
      "AGENT: ''",
      "AGENT: 'Check if cron daemon is running:'",
      "Run command: `systemctl status cron`",
      "AGENT: '‚óè cron.service - Regular background program processing daemon'",
      "AGENT: '   Active: active (running)'",
      "AGENT: ''",
      "AGENT: 'Test cron environment variables:'",
      "Run command: `(crontab -l ; echo \"* * * * * env > /tmp/cron-env.txt\") | crontab -`",
      "AGENT: 'Wait a minute, then:'",
      "Run command: `cat /tmp/cron-env.txt`",
      "AGENT: 'HOME=/home/user'",
      "AGENT: 'LOGNAME=user'",
      "AGENT: 'PATH=/usr/bin:/bin  ‚Üê Limited PATH!'",
      "AGENT: 'SHELL=/bin/sh'",
      "AGENT: ''",
      "AGENT: 'üí° Always use absolute paths in cron jobs!'",
      "AGENT: ''",
      "AGENT: 'Check cron mail:'",
      "Run command: `mail`",
      "AGENT: 'Cron sends job output via email by default'",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Mastered cron syntax for various scheduling patterns.'",
      "AGENT: '  ‚úì Created robust backup script with logging and retention.'",
      "AGENT: '  ‚úì Set up user crontab for regular tasks.'",
      "AGENT: '  ‚úì Created system-wide cron jobs in /etc/cron.d/.'",
      "AGENT: '  ‚úì Implemented error handling and email notifications.'",
      "AGENT: '  ‚úì Added comprehensive logging to all cron jobs.'",
      "AGENT: '  ‚úì Learned to debug cron environment issues.'",
      "AGENT: '  ‚úì Your automated tasks now run reliably 24/7! ‚è∞'"
    ],
    "commands": ["crontab", "cat", "chmod", "tee", "grep", "systemctl", "mail"],
    "packages": {
      "debian_ubuntu": ["cron", "mailutils"],
      "arch": ["cronie", "mailutils"]
    },
    "related_commands": ["at", "anacron", "systemd-timer"],
    "complexity": "intermediate",
    "tags": ["cron", "automation", "scheduling", "backup", "maintenance", "logging", "system-administration"]
  },
  {
    "id": "scenario_file_permissions_acls_106",
    "command": "chmod",
    "scenario": "Manage complex file permissions and ACLs for multi-user shared directories.",
    "problem": "Multiple teams need different access levels to shared directories. Basic Unix permissions (owner/group/other) aren't granular enough. Need to give specific users read access while others have write access.",
    "solution": "Use standard Unix permissions (chmod/chown) for basic access control, then apply Access Control Lists (ACLs) with setfacl/getfacl for fine-grained permissions. Set default ACLs for inheritance.",
    "steps": [
      "USER SAYS: 'I have a shared project directory. The dev team needs write access, QA team needs read access, and managers need full access. How do I set this up?'",
      "AGENT: 'You need ACLs (Access Control Lists)! They extend beyond the basic owner/group/other model to give granular per-user permissions. Let me show you.'",
      "AGENT: ''",
      "AGENT: 'üîç RESEARCH PHASE: File permissions and ACLs...'",
      "AGENT: '[Searching] \"linux acl setfacl getfacl permissions examples\"'",
      "AGENT: '[Found] Basic permissions: r(4), w(2), x(1). Use chmod to set.'",
      "AGENT: '[Found] ACLs add per-user and per-group permissions with setfacl.'",
      "AGENT: '[Found] Default ACLs inherit to new files: `setfacl -d`'",
      "AGENT: '[Found] Use getfacl to view ACLs, setfacl to modify.'",
      "AGENT: '‚úì Research complete! Let's set up complex permissions.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: Basic Permissions Review ---'",
      "Run command: `ls -la /tmp/test-file`",
      "AGENT: '-rw-r--r-- 1 user group 1234 Oct  8 10:00 /tmp/test-file'",
      "AGENT: ' ‚îÇ‚îÇ‚îÇ ‚îÇ ‚îÇ  ‚îÇ'",
      "AGENT: ' ‚îÇ‚îÇ‚îÇ ‚îÇ ‚îÇ  ‚îî‚îÄ Owner'",
      "AGENT: ' ‚îÇ‚îÇ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ Group'",
      "AGENT: ' ‚îÇ‚îÇ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Other'",
      "AGENT: ' ‚îÇ‚îÇ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Owner permissions (rw-)'",
      "AGENT: ' ‚îÇ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Group permissions (r--)'",
      "AGENT: ' ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Other permissions (r--)'",
      "AGENT: ''",
      "AGENT: 'Permission values:'",
      "AGENT: '  r (read)    = 4'",
      "AGENT: '  w (write)   = 2'",
      "AGENT: '  x (execute) = 1'",
      "AGENT: '  rwx = 7, rw- = 6, r-x = 5, r-- = 4'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Create Shared Directory Structure ---'",
      "Run command: `sudo mkdir -p /shared/projects`",
      "Run command: `sudo chown root:root /shared/projects`",
      "Run command: `sudo chmod 755 /shared/projects`",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Create User Groups ---'",
      "Run command: `sudo groupadd developers`",
      "Run command: `sudo groupadd qa_team`",
      "Run command: `sudo groupadd managers`",
      "AGENT: ''",
      "Run command: `sudo usermod -aG developers alice`",
      "Run command: `sudo usermod -aG developers bob`",
      "Run command: `sudo usermod -aG qa_team charlie`",
      "Run command: `sudo usermod -aG qa_team diana`",
      "Run command: `sudo usermod -aG managers eve`",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Basic Permissions (Not Enough) ---'",
      "Run command: `sudo chown root:developers /shared/projects`",
      "Run command: `sudo chmod 2775 /shared/projects`",
      "AGENT: '                      ‚îÇ'",
      "AGENT: '                      ‚îî‚îÄ Setgid bit: new files inherit group'",
      "AGENT: ''",
      "Run command: `ls -ld /shared/projects`",
      "AGENT: 'drwxrwsr-x 2 root developers 4096 Oct  8 10:05 /shared/projects'",
      "AGENT: '       ‚îÇ'",
      "AGENT: '       ‚îî‚îÄ 's' = setgid bit set'",
      "AGENT: ''",
      "AGENT: 'üí° Problem: This gives developers write access, but everyone else in \"other\" gets read-only. QA and managers need different access!'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: Apply ACLs for Fine-Grained Control ---'",
      "AGENT: 'Give QA team read+execute access:'",
      "Run command: `sudo setfacl -m g:qa_team:rx /shared/projects`",
      "AGENT: ''",
      "AGENT: 'Give managers full access:'",
      "Run command: `sudo setfacl -m g:managers:rwx /shared/projects`",
      "AGENT: ''",
      "AGENT: 'Give specific user read-only access:'",
      "Run command: `sudo setfacl -m u:frank:r /shared/projects`",
      "AGENT: ''",
      "AGENT: '--- Approach 6: View ACLs ---'",
      "Run command: `getfacl /shared/projects`",
      "AGENT: '# file: shared/projects'",
      "AGENT: '# owner: root'",
      "AGENT: '# group: developers'",
      "AGENT: '# flags: -s-'",
      "AGENT: 'user::rwx'",
      "AGENT: 'user:frank:r--'",
      "AGENT: 'group::rwx'",
      "AGENT: 'group:qa_team:r-x'",
      "AGENT: 'group:managers:rwx'",
      "AGENT: 'mask::rwx'",
      "AGENT: 'other::r-x'",
      "AGENT: ''",
      "AGENT: '‚úÖ Perfect! Each group has correct permissions.'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Set Default ACLs (Inheritance) ---'",
      "AGENT: 'Make new files inherit these ACLs:'",
      "Run command: `sudo setfacl -d -m g:qa_team:rx /shared/projects`",
      "Run command: `sudo setfacl -d -m g:managers:rwx /shared/projects`",
      "Run command: `sudo setfacl -d -m g:developers:rwx /shared/projects`",
      "AGENT: ''",
      "Run command: `getfacl /shared/projects`",
      "AGENT: '# file: shared/projects'",
      "AGENT: '# owner: root'",
      "AGENT: '# group: developers'",
      "AGENT: 'user::rwx'",
      "AGENT: 'group::rwx'",
      "AGENT: 'group:qa_team:r-x'",
      "AGENT: 'group:managers:rwx'",
      "AGENT: 'other::r-x'",
      "AGENT: 'default:user::rwx'",
      "AGENT: 'default:group::rwx'",
      "AGENT: 'default:group:developers:rwx'",
      "AGENT: 'default:group:qa_team:r-x'",
      "AGENT: 'default:group:managers:rwx'",
      "AGENT: 'default:mask::rwx'",
      "AGENT: 'default:other::r-x'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Test Inheritance ---'",
      "Run command: `sudo -u alice touch /shared/projects/test.txt`",
      "Run command: `getfacl /shared/projects/test.txt`",
      "AGENT: '# file: shared/projects/test.txt'",
      "AGENT: '# owner: alice'",
      "AGENT: '# group: developers'",
      "AGENT: 'user::rw-'",
      "AGENT: 'group::rwx  #effective:rw-'",
      "AGENT: 'group:developers:rwx  #effective:rw-'",
      "AGENT: 'group:qa_team:r-x  #effective:r--'",
      "AGENT: 'group:managers:rwx  #effective:rw-'",
      "AGENT: ''",
      "AGENT: '‚úÖ New file inherited ACLs!'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Remove ACLs ---'",
      "AGENT: 'Remove specific ACL entry:'",
      "Run command: `sudo setfacl -x u:frank /shared/projects`",
      "AGENT: ''",
      "AGENT: 'Remove all ACLs:'",
      "Run command: `sudo setfacl -b /shared/projects`",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Recursive ACL Application ---'",
      "AGENT: 'Apply ACLs to all existing files:'",
      "Run command: `sudo setfacl -R -m g:qa_team:rx /shared/projects`",
      "AGENT: ''",
      "AGENT: 'Apply both current and default ACLs recursively:'",
      "Run command: `sudo setfacl -R -d -m g:qa_team:rx /shared/projects`",
      "AGENT: ''",
      "AGENT: '--- Advanced: Copy ACLs ---'",
      "Run command: `getfacl /shared/projects | sudo setfacl --set-file=- /shared/other-directory`",
      "AGENT: 'This copies ACLs from one directory to another'",
      "AGENT: ''",
      "AGENT: '--- Common Permission Patterns ---'",
      "AGENT: ''",
      "AGENT: 'Web directory (www-data needs access):'",
      "Run command: `sudo chown -R user:www-data /var/www/site`",
      "Run command: `sudo chmod -R 750 /var/www/site`",
      "Run command: `sudo setfacl -R -m u:www-data:rx /var/www/site`",
      "AGENT: ''",
      "AGENT: 'Secure log directory (only admin can read):'",
      "Run command: `sudo chmod 700 /var/log/secure`",
      "AGENT: ''",
      "AGENT: 'Shared upload directory (anyone can write, but can't delete others\\' files):'",
      "Run command: `sudo chmod 1777 /shared/uploads`",
      "AGENT: '              ‚îÇ'",
      "AGENT: '              ‚îî‚îÄ Sticky bit: only file owner can delete'",
      "AGENT: ''",
      "AGENT: '‚úì SOLUTION SUMMARY:'",
      "AGENT: '  ‚úì Reviewed basic Unix permission model (owner/group/other).'",
      "AGENT: '  ‚úì Created user groups for different teams.'",
      "AGENT: '  ‚úì Applied ACLs for fine-grained per-user and per-group permissions.'",
      "AGENT: '  ‚úì Set default ACLs so new files inherit correct permissions.'",
      "AGENT: '  ‚úì Tested inheritance and verified permissions work correctly.'",
      "AGENT: '  ‚úì Learned to view, modify, and remove ACLs.'",
      "AGENT: '  ‚úì Applied ACLs recursively to entire directory trees.'",
      "AGENT: '  ‚úì Your shared directories now have enterprise-grade access control! üîí'"
    ],
    "commands": ["chmod", "chown", "setfacl", "getfacl", "ls", "groupadd", "usermod", "mkdir", "touch"],
    "packages": {
      "debian_ubuntu": ["acl", "coreutils"],
      "arch": ["acl", "coreutils"]
    },
    "related_commands": ["umask", "chgrp", "stat"],
    "complexity": "intermediate",
    "tags": ["permissions", "acl", "security", "file-system", "access-control", "linux", "chmod", "setfacl"]
  }
]

[
  {
    "id": "scenario_prometheus_monitoring_001",
    "command": "prometheus",
    "scenario": "User: Need system and application monitoring",
    "problem": "Want to track metrics and get alerts",
    "solution": "Setup Prometheus and Grafana monitoring stack",
    "steps": [
      "USER SAYS: 'I need to monitor my servers and get alerts when things go wrong.'",
      "AGENT: 'Perfect! Let me set up Prometheus + Grafana...'",
      "Download Prometheus: cd /tmp && wget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz",
      "Extract: tar xvf prometheus-2.45.0.linux-amd64.tar.gz && sudo mv prometheus-2.45.0.linux-amd64 /opt/prometheus",
      "AGENT: 'Prometheus installed ✓'",
      "Create config: sudo cat > /opt/prometheus/prometheus.yml << 'EOF'",
      "global:",
      "  scrape_interval: 15s",
      "scrape_configs:",
      "  - job_name: 'prometheus'",
      "    static_configs:",
      "      - targets: ['localhost:9090']",
      "  - job_name: 'node'",
      "    static_configs:",
      "      - targets: ['localhost:9100']",
      "EOF",
      "AGENT: 'Config created ✓'",
      "Install Node Exporter: wget https://github.com/prometheus/node_exporter/releases/download/v1.6.0/node_exporter-1.6.0.linux-amd64.tar.gz && tar xvf node_exporter-1.6.0.linux-amd64.tar.gz && sudo mv node_exporter-1.6.0.linux-amd64/node_exporter /usr/local/bin/",
      "AGENT: 'Node Exporter installed ✓'",
      "Create systemd service: sudo cat > /etc/systemd/system/prometheus.service << 'EOF'",
      "[Unit]",
      "Description=Prometheus",
      "[Service]",
      "ExecStart=/opt/prometheus/prometheus --config.file=/opt/prometheus/prometheus.yml",
      "Restart=always",
      "[Install]",
      "WantedBy=multi-user.target",
      "EOF",
      "Create node exporter service: sudo cat > /etc/systemd/system/node_exporter.service << 'EOF'",
      "[Unit]",
      "Description=Node Exporter",
      "[Service]",
      "ExecStart=/usr/local/bin/node_exporter",
      "Restart=always",
      "[Install]",
      "WantedBy=multi-user.target",
      "EOF",
      "Enable services: sudo systemctl daemon-reload && sudo systemctl enable --now prometheus node_exporter",
      "AGENT: 'Services running ✓'",
      "AGENT: 'Prometheus: http://localhost:9090'",
      "AGENT: 'Node Exporter: http://localhost:9100/metrics'",
      "USER: 'How do I visualize this?'",
      "AGENT: 'Install Grafana!'",
      "Install Grafana: sudo apt install -y software-properties-common && sudo add-apt-repository 'deb https://packages.grafana.com/oss/deb stable main' && sudo apt update && sudo apt install grafana",
      "Start: sudo systemctl enable --now grafana-server",
      "AGENT: 'Grafana running on http://localhost:3000 ✓'",
      "AGENT: 'Login: admin / admin (change password)'",
      "AGENT: 'Add Prometheus data source:'",
      "AGENT: '1. Configuration → Data Sources'",
      "AGENT: '2. Add data source → Prometheus'",
      "AGENT: '3. URL: http://localhost:9090'",
      "AGENT: '4. Save & Test'",
      "AGENT: 'Import dashboard:'",
      "AGENT: '1. Dashboard → Import'",
      "AGENT: '2. ID: 1860 (Node Exporter Full)'",
      "AGENT: '3. Select Prometheus data source'",
      "AGENT: '4. Import'",
      "AGENT: 'Beautiful system dashboard! ✓'",
      "Create alert config: cat > /opt/prometheus/alert.rules.yml << 'EOF'",
      "groups:",
      "  - name: example",
      "    rules:",
      "      - alert: HighCPU",
      "        expr: node_cpu_seconds_total > 80",
      "        for: 5m",
      "        annotations:",
      "          summary: 'High CPU usage detected'",
      "      - alert: LowDisk",
      "        expr: node_filesystem_avail_bytes / node_filesystem_size_bytes < 0.1",
      "        for: 5m",
      "        annotations:",
      "          summary: 'Low disk space (< 10%)'",
      "EOF",
      "AGENT: 'Alert rules created ✓'",
      "Create monitoring dashboard: cat > ~/monitoring-status.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Monitoring Stack Status ==='",
      "echo ''",
      "systemctl is-active prometheus && echo '✓ Prometheus: http://localhost:9090' || echo '✗ Prometheus down'",
      "systemctl is-active node_exporter && echo '✓ Node Exporter: http://localhost:9100' || echo '✗ Node Exporter down'",
      "systemctl is-active grafana-server && echo '✓ Grafana: http://localhost:3000' || echo '✗ Grafana down'",
      "echo ''",
      "echo 'Quick metrics:'",
      "curl -s http://localhost:9100/metrics | grep -E 'node_cpu_seconds_total|node_memory_MemAvailable_bytes|node_filesystem_avail_bytes' | head -5",
      "EOF",
      "chmod +x ~/monitoring-status.sh",
      "AGENT: 'Monitoring stack complete! ✓'",
      "AGENT: 'You now have professional system monitoring ✓'"
    ],
    "commands": ["prometheus", "node_exporter", "grafana-server", "systemctl"],
    "packages": {"debian_ubuntu": ["grafana"], "arch": ["prometheus", "grafana"]},
    "related_commands": ["prometheus", "grafana", "alertmanager"],
    "complexity": "advanced",
    "tags": ["monitoring", "prometheus", "grafana", "metrics", "alerting", "observability", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_elk_stack_001",
    "command": "elasticsearch",
    "scenario": "User: Need centralized logging",
    "problem": "Logs scattered across multiple servers",
    "solution": "Setup ELK stack (Elasticsearch, Logstash, Kibana)",
    "steps": [
      "USER SAYS: 'I have logs on 10 servers. Finding errors is impossible!'",
      "AGENT: 'ELK stack will centralize all logs! Let me set it up...'",
      "Install Java: sudo apt install openjdk-11-jre || sudo pacman -S jre11-openjdk",
      "AGENT: 'Java installed ✓'",
      "Add Elastic repo: wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - && echo 'deb https://artifacts.elastic.co/packages/8.x/apt stable main' | sudo tee /etc/apt/sources.list.d/elastic-8.x.list",
      "Install Elasticsearch: sudo apt update && sudo apt install elasticsearch",
      "AGENT: 'Elasticsearch installed ✓'",
      "Configure: sudo nano /etc/elasticsearch/elasticsearch.yml",
      "AGENT: 'Set: network.host: localhost'",
      "Start: sudo systemctl enable --now elasticsearch",
      "AGENT: 'Elasticsearch running ✓'",
      "Test: curl -X GET 'http://localhost:9200'",
      "AGENT: 'Elasticsearch responding! ✓'",
      "Install Kibana: sudo apt install kibana",
      "Configure: sudo nano /etc/kibana/kibana.yml",
      "AGENT: 'Set: server.host: \"localhost\"'",
      "Start: sudo systemctl enable --now kibana",
      "AGENT: 'Kibana running on http://localhost:5601 ✓'",
      "Install Logstash: sudo apt install logstash",
      "AGENT: 'Logstash installed ✓'",
      "Create config: sudo cat > /etc/logstash/conf.d/syslog.conf << 'EOF'",
      "input {",
      "  file {",
      "    path => \"/var/log/syslog\"",
      "    type => \"syslog\"",
      "  }",
      "}",
      "filter {",
      "  grok {",
      "    match => { \"message\" => \"%{SYSLOGLINE}\" }",
      "  }",
      "}",
      "output {",
      "  elasticsearch {",
      "    hosts => [\"localhost:9200\"]",
      "    index => \"syslog-%{+YYYY.MM.dd}\"",
      "  }",
      "}",
      "EOF",
      "Start: sudo systemctl enable --now logstash",
      "AGENT: 'Logstash ingesting logs! ✓'",
      "USER: 'How do I see the logs?'",
      "AGENT: 'Open Kibana: http://localhost:5601'",
      "AGENT: '1. Stack Management → Index Patterns'",
      "AGENT: '2. Create: syslog-*'",
      "AGENT: '3. Discover tab → see all logs!'",
      "AGENT: 'Search: error'",
      "AGENT: 'All error logs from all servers shown! ✓'",
      "Create log shipper for remote: cat > ~/install-filebeat.sh << 'EOF'",
      "#!/bin/bash",
      "# Run on remote servers to ship logs",
      "sudo apt install filebeat",
      "sudo cat > /etc/filebeat/filebeat.yml << 'FBEOF'",
      "filebeat.inputs:",
      "  - type: log",
      "    paths:",
      "      - /var/log/syslog",
      "      - /var/log/auth.log",
      "output.logstash:",
      "  hosts: [\"logstash-server:5044\"]",
      "FBEOF",
      "sudo systemctl enable --now filebeat",
      "echo '✓ Filebeat shipping logs to central server'",
      "EOF",
      "chmod +x ~/install-filebeat.sh",
      "Create ELK manager: cat > ~/elk-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== ELK Stack Manager ==='",
      "echo ''",
      "echo 'Status:'",
      "systemctl is-active elasticsearch && echo '✓ Elasticsearch' || echo '✗ Elasticsearch down'",
      "systemctl is-active kibana && echo '✓ Kibana' || echo '✗ Kibana down'",
      "systemctl is-active logstash && echo '✓ Logstash' || echo '✗ Logstash down'",
      "echo ''",
      "echo '1. Restart all services'",
      "echo '2. Check Elasticsearch health'",
      "echo '3. View recent logs'",
      "echo '4. Clear old indices'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) sudo systemctl restart elasticsearch kibana logstash ;;",
      "  2) curl -X GET 'http://localhost:9200/_cluster/health?pretty' ;;",
      "  3) curl -X GET 'http://localhost:9200/syslog-*/_search?size=10&sort=@timestamp:desc&pretty' ;;",
      "  4) curl -X DELETE 'http://localhost:9200/syslog-*' ;;",
      "esac",
      "EOF",
      "chmod +x ~/elk-manage.sh",
      "AGENT: 'ELK stack complete! ✓'",
      "AGENT: 'Centralized logging for all your servers ✓'"
    ],
    "commands": ["elasticsearch", "kibana", "logstash", "filebeat"],
    "packages": {"debian_ubuntu": ["elasticsearch", "kibana", "logstash"], "arch": []},
    "related_commands": ["elasticsearch", "kibana", "logstash"],
    "complexity": "advanced",
    "tags": ["elk", "logging", "elasticsearch", "kibana", "logstash", "observability", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_nginx_load_balancer_001",
    "command": "nginx",
    "scenario": "User: Need load balancing for web apps",
    "problem": "Single server can't handle traffic",
    "solution": "Configure Nginx as load balancer",
    "steps": [
      "USER SAYS: 'My web app is getting too much traffic for one server!'",
      "AGENT: 'Let me configure Nginx load balancing across multiple servers...'",
      "Install: sudo apt install nginx || sudo pacman -S nginx",
      "AGENT: 'Nginx installed ✓'",
      "Create load balancer config: sudo cat > /etc/nginx/conf.d/loadbalancer.conf << 'EOF'",
      "upstream backend {",
      "    # Round-robin by default",
      "    server 192.168.1.101:8080;",
      "    server 192.168.1.102:8080;",
      "    server 192.168.1.103:8080;",
      "}",
      "server {",
      "    listen 80;",
      "    server_name myapp.com;",
      "    location / {",
      "        proxy_pass http://backend;",
      "        proxy_set_header Host $host;",
      "        proxy_set_header X-Real-IP $remote_addr;",
      "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
      "    }",
      "}",
      "EOF",
      "AGENT: 'Basic load balancer configured ✓'",
      "Test config: sudo nginx -t",
      "AGENT: 'Config valid ✓'",
      "Reload: sudo systemctl reload nginx",
      "AGENT: 'Traffic now distributed across 3 servers! ✓'",
      "USER: 'What if a server goes down?'",
      "AGENT: 'Add health checks!'",
      "Update config: sudo cat > /etc/nginx/conf.d/loadbalancer.conf << 'EOF'",
      "upstream backend {",
      "    server 192.168.1.101:8080 max_fails=3 fail_timeout=30s;",
      "    server 192.168.1.102:8080 max_fails=3 fail_timeout=30s;",
      "    server 192.168.1.103:8080 max_fails=3 fail_timeout=30s backup;",
      "    keepalive 32;",
      "}",
      "server {",
      "    listen 80;",
      "    server_name myapp.com;",
      "    location / {",
      "        proxy_pass http://backend;",
      "        proxy_http_version 1.1;",
      "        proxy_set_header Connection \"\";",
      "        proxy_connect_timeout 5s;",
      "        proxy_read_timeout 60s;",
      "        proxy_next_upstream error timeout http_502;",
      "    }",
      "}",
      "EOF",
      "AGENT: 'Health checks enabled! Failed servers auto-removed ✓'",
      "sudo systemctl reload nginx",
      "USER: 'Can I use sticky sessions?'",
      "AGENT: 'Yes! For session persistence...'",
      "Sticky sessions: sudo cat > /etc/nginx/conf.d/loadbalancer.conf << 'EOF'",
      "upstream backend {",
      "    ip_hash;  # Sticky sessions based on IP",
      "    server 192.168.1.101:8080;",
      "    server 192.168.1.102:8080;",
      "    server 192.168.1.103:8080;",
      "}",
      "EOF",
      "AGENT: 'Sticky sessions configured! Same client → same server ✓'",
      "Create LB monitor: cat > ~/lb-monitor.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Load Balancer Status ==='",
      "echo ''",
      "echo 'Backend servers:'",
      "SERVERS=('192.168.1.101:8080' '192.168.1.102:8080' '192.168.1.103:8080')",
      "for SERVER in \"${SERVERS[@]}\"; do",
      "  if curl -sf http://$SERVER/health > /dev/null 2>&1; then",
      "    echo \"✓ $SERVER - UP\"",
      "  else",
      "    echo \"✗ $SERVER - DOWN\"",
      "  fi",
      "done",
      "echo ''",
      "echo 'Nginx status:'",
      "systemctl is-active nginx && echo '✓ Nginx running' || echo '✗ Nginx down'",
      "echo ''",
      "echo 'Active connections:'",
      "curl -s http://localhost/nginx_status",
      "EOF",
      "chmod +x ~/lb-monitor.sh",
      "Create weighted LB: cat > ~/nginx-weighted-lb.conf << 'EOF'",
      "# Weighted load balancing",
      "upstream backend {",
      "    server 192.168.1.101:8080 weight=5;  # Gets 50% of traffic",
      "    server 192.168.1.102:8080 weight=3;  # Gets 30%",
      "    server 192.168.1.103:8080 weight=2;  # Gets 20%",
      "}",
      "EOF",
      "AGENT: 'Example configs created for different scenarios ✓'",
      "AGENT: 'Load balancing active! High availability achieved ✓'"
    ],
    "commands": ["nginx", "systemctl", "curl"],
    "packages": {"debian_ubuntu": ["nginx"], "arch": ["nginx"]},
    "related_commands": ["nginx", "haproxy", "traefik"],
    "complexity": "advanced",
    "tags": ["nginx", "load-balancing", "high-availability", "web-server", "infrastructure", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_haproxy_advanced_001",
    "command": "haproxy",
    "scenario": "User: Need advanced load balancing with SSL",
    "problem": "Nginx limitations, need more features",
    "solution": "Setup HAProxy with SSL termination",
    "steps": [
      "USER SAYS: 'I need advanced load balancing with SSL and health checks.'",
      "AGENT: 'HAProxy is the enterprise solution! Let me configure it...'",
      "Install: sudo apt install haproxy || sudo pacman -S haproxy",
      "AGENT: 'HAProxy installed ✓'",
      "Backup config: sudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup",
      "Create config: sudo cat > /etc/haproxy/haproxy.cfg << 'EOF'",
      "global",
      "    log /dev/log local0",
      "    maxconn 4096",
      "defaults",
      "    log global",
      "    mode http",
      "    option httplog",
      "    option dontlognull",
      "    timeout connect 5000",
      "    timeout client  50000",
      "    timeout server  50000",
      "frontend http_front",
      "    bind *:80",
      "    stats uri /haproxy?stats",
      "    default_backend http_back",
      "backend http_back",
      "    balance roundrobin",
      "    option httpchk GET /health",
      "    server web1 192.168.1.101:8080 check",
      "    server web2 192.168.1.102:8080 check",
      "    server web3 192.168.1.103:8080 check backup",
      "EOF",
      "AGENT: 'Basic HAProxy config created ✓'",
      "Test: sudo haproxy -c -f /etc/haproxy/haproxy.cfg",
      "AGENT: 'Config valid ✓'",
      "Restart: sudo systemctl restart haproxy",
      "AGENT: 'HAProxy running! Stats: http://localhost/haproxy?stats ✓'",
      "USER: 'How do I add SSL?'",
      "AGENT: 'Let me configure SSL termination...'",
      "Generate cert: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/haproxy.key -out /etc/ssl/certs/haproxy.crt",
      "Combine: sudo cat /etc/ssl/certs/haproxy.crt /etc/ssl/private/haproxy.key | sudo tee /etc/ssl/private/haproxy.pem",
      "Add SSL frontend: sudo cat >> /etc/haproxy/haproxy.cfg << 'EOF'",
      "frontend https_front",
      "    bind *:443 ssl crt /etc/ssl/private/haproxy.pem",
      "    http-request redirect scheme https unless { ssl_fc }",
      "    default_backend http_back",
      "EOF",
      "Restart: sudo systemctl restart haproxy",
      "AGENT: 'SSL termination configured! ✓'",
      "AGENT: 'HAProxy handles SSL, backends get plain HTTP ✓'",
      "Create advanced config: cat > ~/haproxy-advanced.cfg << 'EOF'",
      "# Advanced HAProxy with SSL, ACLs, and multiple backends",
      "frontend https_front",
      "    bind *:443 ssl crt /etc/ssl/private/haproxy.pem",
      "    # ACLs for routing",
      "    acl is_api path_beg /api",
      "    acl is_static path_beg /static",
      "    # Route based on path",
      "    use_backend api_back if is_api",
      "    use_backend static_back if is_static",
      "    default_backend web_back",
      "backend api_back",
      "    balance leastconn",
      "    option httpchk GET /api/health",
      "    server api1 192.168.1.201:8080 check",
      "    server api2 192.168.1.202:8080 check",
      "backend static_back",
      "    balance roundrobin",
      "    server static1 192.168.1.301:80 check",
      "backend web_back",
      "    balance roundrobin",
      "    cookie SERVERID insert indirect nocache",
      "    server web1 192.168.1.101:8080 check cookie web1",
      "    server web2 192.168.1.102:8080 check cookie web2",
      "EOF",
      "AGENT: 'Advanced routing example created ✓'",
      "Create HAProxy monitor: cat > ~/haproxy-monitor.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== HAProxy Status ==='",
      "echo ''",
      "systemctl is-active haproxy && echo '✓ HAProxy running' || echo '✗ HAProxy down'",
      "echo ''",
      "echo 'Backend server status:'",
      "echo 'show stat' | socat stdio /var/lib/haproxy/stats | \\",
      "  awk -F',' 'NR>1 {print $2, $18}'",
      "echo ''",
      "echo 'Stats dashboard: http://localhost/haproxy?stats'",
      "EOF",
      "chmod +x ~/haproxy-monitor.sh",
      "AGENT: 'HAProxy with SSL termination complete! ✓'",
      "AGENT: 'Enterprise-grade load balancing ready ✓'"
    ],
    "commands": ["haproxy", "systemctl", "socat"],
    "packages": {"debian_ubuntu": ["haproxy", "socat"], "arch": ["haproxy", "socat"]},
    "related_commands": ["haproxy", "nginx", "traefik"],
    "complexity": "advanced",
    "tags": ["haproxy", "load-balancing", "ssl", "high-availability", "enterprise", "real-world", "ai-agent"]
  }
]

[
  {
    "id": "scenario_network_troubleshoot_advanced_001",
    "command": "tcpdump",
    "scenario": "User: Network issues, need packet analysis",
    "problem": "Connection problems, can't figure out why",
    "solution": "Use tcpdump and wireshark for deep analysis",
    "steps": [
      "USER SAYS: 'My app connects sometimes but fails randomly!'",
      "AGENT: 'Let me capture network packets to see what\\'s happening...'",
      "Install: sudo apt install tcpdump wireshark || sudo pacman -S tcpdump wireshark-qt",
      "AGENT: 'Network analysis tools installed ✓'",
      "Add user to wireshark: sudo usermod -aG wireshark $USER",
      "AGENT: 'User added to wireshark group (logout/login to apply) ✓'",
      "List interfaces: ip link show",
      "AGENT: 'Available: eth0, wlan0, lo'",
      "USER: 'Problem is on eth0'",
      "AGENT: 'Let me capture traffic on eth0...'",
      "Capture: sudo tcpdump -i eth0 -w /tmp/capture.pcap",
      "AGENT: 'Capturing packets... reproduce the issue now'",
      "USER: 'Done, it failed again'",
      "Stop: Ctrl+C",
      "AGENT: 'Captured 1,234 packets ✓'",
      "Filter HTTP: sudo tcpdump -r /tmp/capture.pcap 'port 80 or port 443'",
      "AGENT: 'Showing HTTP/HTTPS traffic...'",
      "Filter by IP: sudo tcpdump -r /tmp/capture.pcap 'host 192.168.1.100'",
      "AGENT: 'Traffic to/from 192.168.1.100'",
      "Filter by port: sudo tcpdump -r /tmp/capture.pcap 'port 3306'",
      "AGENT: 'MySQL traffic shown'",
      "AGENT: 'I see TCP retransmissions! Connection issues detected ✓'",
      "Open in Wireshark: wireshark /tmp/capture.pcap &",
      "AGENT: 'Wireshark opened - visual packet analysis'",
      "AGENT: 'Filter in Wireshark: tcp.analysis.retransmission'",
      "AGENT: 'Found: High retransmissions on port 3306'",
      "AGENT: 'Diagnosis: MySQL server overloaded or network congestion'",
      "Create capture script: cat > ~/network-capture.sh << 'EOF'",
      "#!/bin/bash",
      "INTERFACE=${1:-eth0}",
      "DURATION=${2:-60}",
      "OUTPUT=~/captures/capture-$(date +%Y-%m-%d_%H-%M-%S).pcap",
      "mkdir -p ~/captures",
      "echo \"Capturing on $INTERFACE for $DURATION seconds...\"",
      "sudo timeout $DURATION tcpdump -i $INTERFACE -w $OUTPUT",
      "echo \"✓ Capture saved: $OUTPUT\"",
      "echo ''",
      "echo 'Analyze with:'",
      "echo \"  tcpdump -r $OUTPUT\"",
      "echo \"  wireshark $OUTPUT\"",
      "EOF",
      "chmod +x ~/network-capture.sh",
      "Create filter helper: cat > ~/packet-analysis.sh << 'EOF'",
      "#!/bin/bash",
      "if [ -z \"$1\" ]; then",
      "  echo 'Usage: ./packet-analysis.sh <pcap-file>'",
      "  echo ''",
      "  echo 'Available captures:'",
      "  ls -lh ~/captures/*.pcap 2>/dev/null | tail -10",
      "  exit 1",
      "fi",
      "PCAP=$1",
      "echo '=== Packet Analysis ==='",
      "echo ''",
      "echo '1. Show all traffic'",
      "echo '2. HTTP/HTTPS only'",
      "echo '3. DNS queries'",
      "echo '4. TCP retransmissions'",
      "echo '5. Filter by IP'",
      "echo '6. Filter by port'",
      "echo '7. Open in Wireshark'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) tcpdump -r $PCAP ;;",
      "  2) tcpdump -r $PCAP 'port 80 or port 443' ;;",
      "  3) tcpdump -r $PCAP 'port 53' ;;",
      "  4) tcpdump -r $PCAP 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0' ;;",
      "  5) read -p 'IP address: ' IP; tcpdump -r $PCAP \"host $IP\" ;;",
      "  6) read -p 'Port: ' PORT; tcpdump -r $PCAP \"port $PORT\" ;;",
      "  7) wireshark $PCAP & ;;",
      "esac",
      "EOF",
      "chmod +x ~/packet-analysis.sh",
      "Create quick diagnostics: cat > ~/network-diagnose.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Network Diagnostics ==='",
      "echo ''",
      "echo '1. Capturing 30 seconds of traffic...'",
      "PCAP=/tmp/quick-capture.pcap",
      "sudo timeout 30 tcpdump -i any -w $PCAP 2>/dev/null",
      "echo ''",
      "echo '2. Analysis:'",
      "echo ''",
      "echo 'Total packets:' $(tcpdump -r $PCAP 2>/dev/null | wc -l)",
      "echo 'TCP connections:' $(tcpdump -r $PCAP 'tcp' 2>/dev/null | wc -l)",
      "echo 'UDP packets:' $(tcpdump -r $PCAP 'udp' 2>/dev/null | wc -l)",
      "echo 'DNS queries:' $(tcpdump -r $PCAP 'port 53' 2>/dev/null | wc -l)",
      "echo 'HTTP requests:' $(tcpdump -r $PCAP 'port 80' 2>/dev/null | wc -l)",
      "echo ''",
      "echo '3. Top destinations:'",
      "tcpdump -r $PCAP -n 2>/dev/null | awk '{print $5}' | cut -d. -f1-4 | sort | uniq -c | sort -rn | head -5",
      "echo ''",
      "echo \"✓ Full capture: $PCAP\"",
      "EOF",
      "chmod +x ~/network-diagnose.sh",
      "AGENT: 'Network analysis tools ready! ✓'",
      "AGENT: 'You can now deep-dive into any connection issue ✓'"
    ],
    "commands": ["tcpdump", "wireshark", "tshark"],
    "packages": {"debian_ubuntu": ["tcpdump", "wireshark"], "arch": ["tcpdump", "wireshark-qt"]},
    "related_commands": ["tcpdump", "wireshark", "tshark", "ngrep"],
    "complexity": "advanced",
    "tags": ["network", "tcpdump", "wireshark", "packet-analysis", "troubleshooting", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_vpn_wireguard_001",
    "command": "wireguard",
    "scenario": "User: Need secure VPN for remote access",
    "problem": "Want to access home network securely from anywhere",
    "solution": "Setup WireGuard VPN server",
    "steps": [
      "USER SAYS: 'I want to access my home server securely from anywhere.'",
      "AGENT: 'WireGuard VPN is perfect! Fast and secure. Let me set it up...'",
      "Install: sudo apt install wireguard || sudo pacman -S wireguard-tools",
      "AGENT: 'WireGuard installed ✓'",
      "Generate keys: wg genkey | sudo tee /etc/wireguard/private.key | wg pubkey | sudo tee /etc/wireguard/public.key",
      "AGENT: 'Server keys generated ✓'",
      "Get private key: sudo cat /etc/wireguard/private.key",
      "Get public key: cat /etc/wireguard/public.key",
      "AGENT: 'Keys ready (keep private key secret!) ✓'",
      "Create config: sudo cat > /etc/wireguard/wg0.conf << 'EOF'",
      "[Interface]",
      "PrivateKey = <SERVER_PRIVATE_KEY>",
      "Address = 10.0.0.1/24",
      "ListenPort = 51820",
      "SaveConfig = true",
      "PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE",
      "PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE",
      "[Peer]",
      "# Client laptop",
      "PublicKey = <CLIENT_PUBLIC_KEY>",
      "AllowedIPs = 10.0.0.2/32",
      "EOF",
      "AGENT: 'Server config created (add your keys!) ✓'",
      "Enable forwarding: echo 'net.ipv4.ip_forward=1' | sudo tee -a /etc/sysctl.conf",
      "sudo sysctl -p",
      "AGENT: 'IP forwarding enabled ✓'",
      "Start: sudo systemctl enable --now wg-quick@wg0",
      "AGENT: 'WireGuard server running! ✓'",
      "Check status: sudo wg show",
      "AGENT: 'Server listening on port 51820 ✓'",
      "USER: 'How do clients connect?'",
      "AGENT: 'Generate client config...'",
      "Client keys: wg genkey | tee client-private.key | wg pubkey > client-public.key",
      "Create client config: cat > ~/wg-client.conf << 'EOF'",
      "[Interface]",
      "PrivateKey = <CLIENT_PRIVATE_KEY>",
      "Address = 10.0.0.2/24",
      "DNS = 1.1.1.1",
      "[Peer]",
      "PublicKey = <SERVER_PUBLIC_KEY>",
      "Endpoint = your-server-ip:51820",
      "AllowedIPs = 0.0.0.0/0",
      "PersistentKeepalive = 25",
      "EOF",
      "AGENT: 'Client config ready! ✓'",
      "AGENT: 'Transfer to client device and run: sudo wg-quick up wg-client'",
      "Add client to server: sudo wg set wg0 peer <CLIENT_PUBLIC_KEY> allowed-ips 10.0.0.2/32",
      "AGENT: 'Client authorized ✓'",
      "Test connection: ping 10.0.0.2",
      "AGENT: 'Client connected! ✓'",
      "Create management script: cat > ~/wireguard-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== WireGuard Manager ==='",
      "echo ''",
      "echo '1. Show status'",
      "echo '2. Add peer'",
      "echo '3. Remove peer'",
      "echo '4. Generate client config'",
      "echo '5. Show active connections'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) sudo wg show ;;",
      "  2) read -p 'Peer public key: ' PUB; read -p 'Peer IP (10.0.0.X): ' IP; sudo wg set wg0 peer $PUB allowed-ips $IP/32 ;;",
      "  3) read -p 'Peer public key: ' PUB; sudo wg set wg0 peer $PUB remove ;;",
      "  4) ./generate-client-config.sh ;;",
      "  5) sudo wg show wg0 | grep -A 3 peer ;;",
      "esac",
      "EOF",
      "chmod +x ~/wireguard-manage.sh",
      "Create client generator: cat > ~/generate-client-config.sh << 'EOF'",
      "#!/bin/bash",
      "read -p 'Client name: ' NAME",
      "CLIENT_KEY=$(wg genkey)",
      "CLIENT_PUB=$(echo $CLIENT_KEY | wg pubkey)",
      "IP_NUM=$(sudo wg show wg0 | grep -c allowed | awk '{print $1+2}')",
      "cat > ~/wg-$NAME.conf << CONF",
      "[Interface]",
      "PrivateKey = $CLIENT_KEY",
      "Address = 10.0.0.$IP_NUM/24",
      "DNS = 1.1.1.1",
      "[Peer]",
      "PublicKey = $(cat /etc/wireguard/public.key)",
      "Endpoint = $(curl -s ifconfig.me):51820",
      "AllowedIPs = 0.0.0.0/0",
      "PersistentKeepalive = 25",
      "CONF",
      "sudo wg set wg0 peer $CLIENT_PUB allowed-ips 10.0.0.$IP_NUM/32",
      "echo \"✓ Client config: ~/wg-$NAME.conf\"",
      "echo \"✓ Client added to server\"",
      "qrencode -t ansiutf8 < ~/wg-$NAME.conf",
      "echo ''",
      "echo 'Scan QR code with WireGuard mobile app!'",
      "EOF",
      "chmod +x ~/generate-client-config.sh",
      "Install QR: sudo apt install qrencode || sudo pacman -S qrencode",
      "AGENT: 'QR code generator installed for mobile clients ✓'",
      "AGENT: 'WireGuard VPN complete! ✓'",
      "AGENT: 'Secure access to home network from anywhere ✓'"
    ],
    "commands": ["wg", "wg-quick", "qrencode"],
    "packages": {"debian_ubuntu": ["wireguard", "qrencode"], "arch": ["wireguard-tools", "qrencode"]},
    "related_commands": ["wg", "wg-quick", "qrencode"],
    "complexity": "advanced",
    "tags": ["vpn", "wireguard", "security", "remote-access", "encryption", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_reverse_proxy_001",
    "command": "nginx",
    "scenario": "User: Run multiple web apps on one server",
    "problem": "Have multiple apps but only one IP/port 80",
    "solution": "Setup Nginx reverse proxy with subdomains",
    "steps": [
      "USER SAYS: 'I have 3 web apps but only one server IP!'",
      "AGENT: 'Reverse proxy can route by subdomain! Let me configure Nginx...'",
      "Install: sudo apt install nginx certbot python3-certbot-nginx || sudo pacman -S nginx certbot-nginx",
      "AGENT: 'Nginx and Let\\'s Encrypt tools installed ✓'",
      "Configure DNS first: AGENT: 'Set up these DNS A records:'",
      "AGENT: '- app1.yourdomain.com → your-server-ip'",
      "AGENT: '- app2.yourdomain.com → your-server-ip'",
      "AGENT: '- app3.yourdomain.com → your-server-ip'",
      "USER: 'DNS configured!'",
      "AGENT: 'Great! Now let me configure the reverse proxy...'",
      "Create config for app1: sudo cat > /etc/nginx/sites-available/app1 << 'EOF'",
      "server {",
      "    listen 80;",
      "    server_name app1.yourdomain.com;",
      "    location / {",
      "        proxy_pass http://localhost:3000;",
      "        proxy_http_version 1.1;",
      "        proxy_set_header Upgrade $http_upgrade;",
      "        proxy_set_header Connection 'upgrade';",
      "        proxy_set_header Host $host;",
      "        proxy_set_header X-Real-IP $remote_addr;",
      "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
      "        proxy_set_header X-Forwarded-Proto $scheme;",
      "        proxy_cache_bypass $http_upgrade;",
      "    }",
      "}",
      "EOF",
      "AGENT: 'app1 config created (proxies to localhost:3000) ✓'",
      "Create config for app2: sudo cat > /etc/nginx/sites-available/app2 << 'EOF'",
      "server {",
      "    listen 80;",
      "    server_name app2.yourdomain.com;",
      "    location / {",
      "        proxy_pass http://localhost:8080;",
      "        proxy_set_header Host $host;",
      "        proxy_set_header X-Real-IP $remote_addr;",
      "    }",
      "}",
      "EOF",
      "AGENT: 'app2 config created (proxies to localhost:8080) ✓'",
      "Create config for app3: sudo cat > /etc/nginx/sites-available/app3 << 'EOF'",
      "server {",
      "    listen 80;",
      "    server_name app3.yourdomain.com;",
      "    location / {",
      "        proxy_pass http://localhost:5000;",
      "        proxy_set_header Host $host;",
      "        proxy_set_header X-Real-IP $remote_addr;",
      "    }",
      "}",
      "EOF",
      "AGENT: 'app3 config created (proxies to localhost:5000) ✓'",
      "Enable sites: sudo ln -s /etc/nginx/sites-available/app1 /etc/nginx/sites-enabled/",
      "sudo ln -s /etc/nginx/sites-available/app2 /etc/nginx/sites-enabled/",
      "sudo ln -s /etc/nginx/sites-available/app3 /etc/nginx/sites-enabled/",
      "AGENT: 'Sites enabled ✓'",
      "Test config: sudo nginx -t",
      "AGENT: 'Config valid ✓'",
      "Reload: sudo systemctl reload nginx",
      "AGENT: 'Nginx reloaded ✓'",
      "Test: curl http://app1.yourdomain.com",
      "AGENT: 'app1 accessible! ✓'",
      "USER: 'How do I add HTTPS?'",
      "AGENT: 'Let\\'s Encrypt makes it easy!'",
      "Get certificates: sudo certbot --nginx -d app1.yourdomain.com -d app2.yourdomain.com -d app3.yourdomain.com",
      "AGENT: 'Certbot configuring HTTPS...'",
      "AGENT: 'Select: 2 (Redirect HTTP to HTTPS)'",
      "AGENT: 'SSL certificates installed! ✓'",
      "AGENT: 'All apps now have HTTPS with auto-renewal ✓'",
      "Test HTTPS: curl https://app1.yourdomain.com",
      "AGENT: 'HTTPS working! ✓'",
      "Create proxy template: cat > ~/add-reverse-proxy.sh << 'EOF'",
      "#!/bin/bash",
      "read -p 'Subdomain (e.g., app4): ' SUBDOMAIN",
      "read -p 'Domain (e.g., yourdomain.com): ' DOMAIN",
      "read -p 'Backend port (e.g., 4000): ' PORT",
      "SITE=\"$SUBDOMAIN.$DOMAIN\"",
      "sudo cat > /etc/nginx/sites-available/$SUBDOMAIN << CONF",
      "server {",
      "    listen 80;",
      "    server_name $SITE;",
      "    location / {",
      "        proxy_pass http://localhost:$PORT;",
      "        proxy_set_header Host \\$host;",
      "        proxy_set_header X-Real-IP \\$remote_addr;",
      "        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;",
      "    }",
      "}",
      "CONF",
      "sudo ln -s /etc/nginx/sites-available/$SUBDOMAIN /etc/nginx/sites-enabled/",
      "sudo nginx -t && sudo systemctl reload nginx",
      "echo \"✓ Reverse proxy added: $SITE → localhost:$PORT\"",
      "echo ''",
      "read -p 'Add HTTPS? (y/n): ' SSL",
      "if [ \"$SSL\" == 'y' ]; then",
      "  sudo certbot --nginx -d $SITE",
      "  echo '✓ HTTPS enabled'",
      "fi",
      "EOF",
      "chmod +x ~/add-reverse-proxy.sh",
      "Create monitoring: cat > ~/proxy-status.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Reverse Proxy Status ==='",
      "echo ''",
      "echo 'Configured sites:'",
      "ls -1 /etc/nginx/sites-enabled/",
      "echo ''",
      "echo 'Checking backends:'",
      "for port in 3000 8080 5000; do",
      "  if nc -z localhost $port 2>/dev/null; then",
      "    echo \"✓ Port $port: UP\"",
      "  else",
      "    echo \"✗ Port $port: DOWN\"",
      "  fi",
      "done",
      "echo ''",
      "echo 'Nginx status:'",
      "systemctl is-active nginx && echo '✓ Nginx running' || echo '✗ Nginx down'",
      "echo ''",
      "echo 'SSL certificates:'",
      "sudo certbot certificates",
      "EOF",
      "chmod +x ~/proxy-status.sh",
      "AGENT: 'Reverse proxy complete! ✓'",
      "AGENT: '3 apps on 1 server with HTTPS ✓'"
    ],
    "commands": ["nginx", "certbot"],
    "packages": {"debian_ubuntu": ["nginx", "certbot", "python3-certbot-nginx"], "arch": ["nginx", "certbot-nginx"]},
    "related_commands": ["nginx", "certbot", "apache2"],
    "complexity": "advanced",
    "tags": ["reverse-proxy", "nginx", "ssl", "https", "web-server", "subdomains", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_systemd_service_custom_001",
    "command": "systemd",
    "scenario": "User: Need app to start automatically on boot",
    "problem": "App stops when terminal closes, want it to run as service",
    "solution": "Create custom systemd service",
    "steps": [
      "USER SAYS: 'My Node.js app stops when I close SSH. I want it to run always!'",
      "AGENT: 'Let me create a systemd service for your app...'",
      "Create service file: sudo cat > /etc/systemd/system/myapp.service << 'EOF'",
      "[Unit]",
      "Description=My Node.js Application",
      "After=network.target",
      "[Service]",
      "Type=simple",
      "User=youruser",
      "WorkingDirectory=/home/youruser/myapp",
      "ExecStart=/usr/bin/node /home/youruser/myapp/server.js",
      "Restart=always",
      "RestartSec=10",
      "StandardOutput=journal",
      "StandardError=journal",
      "SyslogIdentifier=myapp",
      "Environment=NODE_ENV=production",
      "Environment=PORT=3000",
      "[Install]",
      "WantedBy=multi-user.target",
      "EOF",
      "AGENT: 'Service file created ✓'",
      "Reload systemd: sudo systemctl daemon-reload",
      "AGENT: 'systemd reloaded ✓'",
      "Start service: sudo systemctl start myapp",
      "AGENT: 'Service started ✓'",
      "Check status: sudo systemctl status myapp",
      "AGENT: 'Status: active (running) ✓'",
      "Enable on boot: sudo systemctl enable myapp",
      "AGENT: 'Auto-start on boot enabled ✓'",
      "View logs: sudo journalctl -u myapp -f",
      "AGENT: 'Logs streaming...'",
      "USER: 'What if it crashes?'",
      "AGENT: 'Restart=always means it auto-restarts! Let me show you...'",
      "Kill process: sudo kill $(pgrep -f myapp)",
      "AGENT: 'Process killed'",
      "Wait 10 sec: sleep 10 && systemctl status myapp",
      "AGENT: 'Service automatically restarted! ✓'",
      "Create service template: cat > ~/create-service.sh << 'EOF'",
      "#!/bin/bash",
      "read -p 'Service name: ' NAME",
      "read -p 'Description: ' DESC",
      "read -p 'ExecStart command: ' CMD",
      "read -p 'Working directory: ' DIR",
      "read -p 'User: ' USER",
      "sudo cat > /etc/systemd/system/$NAME.service << SERVICE",
      "[Unit]",
      "Description=$DESC",
      "After=network.target",
      "[Service]",
      "Type=simple",
      "User=$USER",
      "WorkingDirectory=$DIR",
      "ExecStart=$CMD",
      "Restart=always",
      "RestartSec=10",
      "StandardOutput=journal",
      "StandardError=journal",
      "[Install]",
      "WantedBy=multi-user.target",
      "SERVICE",
      "sudo systemctl daemon-reload",
      "sudo systemctl enable --now $NAME",
      "echo \"✓ Service $NAME created and started\"",
      "sudo systemctl status $NAME",
      "EOF",
      "chmod +x ~/create-service.sh",
      "Create monitoring: cat > ~/service-monitor.sh << 'EOF'",
      "#!/bin/bash",
      "SERVICE=$1",
      "if [ -z \"$SERVICE\" ]; then",
      "  echo 'Usage: ./service-monitor.sh <service-name>'",
      "  echo ''",
      "  echo 'Your custom services:'",
      "  systemctl list-units --type=service --all | grep -v '@' | awk '{print $1}'",
      "  exit 1",
      "fi",
      "echo \"=== Monitoring $SERVICE ===\"",
      "echo ''",
      "echo 'Status:'",
      "systemctl status $SERVICE",
      "echo ''",
      "echo 'Recent logs:'",
      "sudo journalctl -u $SERVICE -n 20 --no-pager",
      "echo ''",
      "echo 'Restart count:'",
      "systemctl show $SERVICE | grep NRestarts",
      "EOF",
      "chmod +x ~/service-monitor.sh",
      "Create Python service example: cat > ~/python-service-example.service << 'EOF'",
      "[Unit]",
      "Description=Python Flask App",
      "After=network.target",
      "[Service]",
      "Type=simple",
      "User=youruser",
      "WorkingDirectory=/home/youruser/flask-app",
      "Environment=\"PATH=/home/youruser/flask-app/venv/bin\"",
      "ExecStart=/home/youruser/flask-app/venv/bin/python app.py",
      "Restart=always",
      "[Install]",
      "WantedBy=multi-user.target",
      "EOF",
      "Create Docker service example: cat > ~/docker-service-example.service << 'EOF'",
      "[Unit]",
      "Description=Docker Container - MyApp",
      "After=docker.service",
      "Requires=docker.service",
      "[Service]",
      "Type=simple",
      "ExecStart=/usr/bin/docker run --rm --name myapp -p 8080:80 myapp:latest",
      "ExecStop=/usr/bin/docker stop myapp",
      "Restart=always",
      "[Install]",
      "WantedBy=multi-user.target",
      "EOF",
      "AGENT: 'Service templates created ✓'",
      "AGENT: 'Your app now runs forever! ✓'"
    ],
    "commands": ["systemctl", "journalctl"],
    "packages": {"debian_ubuntu": ["systemd"], "arch": ["systemd"]},
    "related_commands": ["systemctl", "journalctl", "systemd-analyze"],
    "complexity": "intermediate",
    "tags": ["systemd", "service", "daemon", "autostart", "process-management", "real-world", "ai-agent"]
  }
]

[
  {
    "id": "scenario_systemd_service_create_001",
    "command": "multiple",
    "scenario": "User: Want to create custom systemd service",
    "problem": "Need app to start automatically at boot",
    "solution": "Create and enable systemd service",
    "steps": [
      "USER SAYS: 'I want my Node.js app to start automatically when system boots.'",
      "AGENT: 'I'll create a systemd service for you. What's your app path?'",
      "USER: '~/myapp/server.js'",
      "Create service: cat | sudo tee /etc/systemd/system/myapp.service << 'EOF'",
      "[Unit]",
      "Description=My Node.js Application",
      "After=network.target",
      "",
      "[Service]",
      "Type=simple",
      "User=youruser",
      "WorkingDirectory=/home/youruser/myapp",
      "ExecStart=/usr/bin/node server.js",
      "Restart=on-failure",
      "RestartSec=10",
      "",
      "[Install]",
      "WantedBy=multi-user.target",
      "EOF",
      "Reload systemd: sudo systemctl daemon-reload",
      "Enable: sudo systemctl enable myapp",
      "Start: sudo systemctl start myapp",
      "Check: sudo systemctl status myapp",
      "AGENT: 'Service created and running! ✓'",
      "View logs: sudo journalctl -u myapp -f",
      "AGENT: 'Your app now starts automatically at boot ✓'"
    ],
    "commands": ["systemctl", "journalctl", "cat", "tee"],
    "packages": {"debian_ubuntu": ["systemd"], "arch": ["systemd"]},
    "related_commands": ["systemctl", "journalctl", "systemd"],
    "complexity": "intermediate",
    "tags": ["systemd", "service", "autostart", "daemon", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_firewall_advanced_001",
    "command": "multiple",
    "scenario": "User: Need advanced firewall rules",
    "problem": "Want to block specific IPs, ports, or applications",
    "solution": "Configure UFW with advanced rules",
    "steps": [
      "USER SAYS: 'I want to block a specific IP that's attacking my server.'",
      "AGENT: 'Let me help you block that IP with UFW.'",
      "USER: 'The IP is 203.0.113.42'",
      "Block IP: sudo ufw deny from 203.0.113.42",
      "AGENT: 'IP blocked! ✓'",
      "Check rules: sudo ufw status numbered",
      "USER: 'Also want to allow only specific IP to access SSH'",
      "Allow SSH from IP: sudo ufw allow from 192.168.1.100 to any port 22",
      "Deny SSH from others: sudo ufw deny 22",
      "AGENT: 'SSH now only accessible from 192.168.1.100 ✓'",
      "Rate limiting: sudo ufw limit ssh",
      "AGENT: 'Rate limiting enabled (max 6 connections per 30 seconds) ✓'",
      "Create firewall manager: cat > ~/firewall-manage.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Firewall Manager ==='",
      "echo ''",
      "echo '1. Block IP'",
      "echo '2. Unblock IP'",
      "echo '3. Allow port'",
      "echo '4. Deny port'",
      "echo '5. Show rules'",
      "echo '6. Reset firewall'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) read -p 'IP to block: ' IP; sudo ufw deny from $IP ;;",
      "  2) read -p 'Rule number: ' NUM; sudo ufw delete $NUM ;;",
      "  3) read -p 'Port: ' PORT; sudo ufw allow $PORT ;;",
      "  4) read -p 'Port: ' PORT; sudo ufw deny $PORT ;;",
      "  5) sudo ufw status numbered ;;",
      "  6) sudo ufw reset ;;",
      "esac",
      "EOF",
      "chmod +x ~/firewall-manage.sh",
      "AGENT: 'Firewall manager created ✓'"
    ],
    "commands": ["ufw"],
    "packages": {"debian_ubuntu": ["ufw"], "arch": ["ufw"]},
    "related_commands": ["ufw", "iptables", "firewalld"],
    "complexity": "intermediate",
    "tags": ["firewall", "security", "ufw", "network", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_environment_variables_001",
    "command": "multiple",
    "scenario": "User: Need to set environment variables properly",
    "problem": "Env vars not persisting, confusion about where to set them",
    "solution": "Properly configure environment variables",
    "steps": [
      "USER SAYS: 'I set an environment variable but it's gone after restart!'",
      "AGENT: 'Let me show you how to set env vars permanently.'",
      "For user only: echo 'export MY_VAR=\"value\"' >> ~/.bashrc",
      "Source: source ~/.bashrc",
      "Verify: echo $MY_VAR",
      "AGENT: 'Variable set in ~/.bashrc (user-specific) ✓'",
      "For all users: echo 'export GLOBAL_VAR=\"value\"' | sudo tee -a /etc/environment",
      "AGENT: 'System-wide variable set in /etc/environment ✓'",
      "For specific app: Create .env file",
      "Create env file: cat > ~/myapp/.env << 'EOF'",
      "DATABASE_URL=postgresql://localhost/mydb",
      "API_KEY=secret123",
      "EOF",
      "Load in script: export $(cat .env | xargs)",
      "Create env manager: cat > ~/manage-env.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Environment Variable Manager ==='",
      "echo ''",
      "echo '1. View current variables'",
      "echo '2. Set user variable'",
      "echo '3. Set system variable'",
      "echo '4. Remove variable'",
      "read -p 'Choice: ' OPT",
      "case $OPT in",
      "  1) env | sort ;;",
      "  2) ",
      "    read -p 'Name: ' NAME",
      "    read -p 'Value: ' VAL",
      "    echo \"export $NAME=\\\"$VAL\\\"\" >> ~/.bashrc",
      "    source ~/.bashrc",
      "    ;;",
      "  3)",
      "    read -p 'Name: ' NAME",
      "    read -p 'Value: ' VAL",
      "    echo \"$NAME=\\\"$VAL\\\"\" | sudo tee -a /etc/environment",
      "    ;;",
      "  4)",
      "    read -p 'Variable name: ' NAME",
      "    sed -i \"/export $NAME=/d\" ~/.bashrc",
      "    ;;",
      "esac",
      "EOF",
      "chmod +x ~/manage-env.sh",
      "AGENT: 'Environment manager created ✓'"
    ],
    "commands": ["export", "env", "echo", "source", "sed"],
    "packages": {"debian_ubuntu": [], "arch": []},
    "related_commands": ["export", "env", "printenv", "set"],
    "complexity": "beginner",
    "tags": ["environment", "variables", "configuration", "shell", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_alias_functions_001",
    "command": "multiple",
    "scenario": "User: Want shortcuts for long commands",
    "problem": "Typing long commands repeatedly",
    "solution": "Create aliases and bash functions",
    "steps": [
      "USER SAYS: 'I type git status a hundred times a day. There must be a shortcut!'",
      "AGENT: 'Yes! Let me create useful aliases for you.'",
      "Create aliases: cat >> ~/.bashrc << 'EOF'",
      "# Git shortcuts",
      "alias gs='git status'",
      "alias ga='git add'",
      "alias gc='git commit'",
      "alias gp='git push'",
      "alias gl='git log --oneline'",
      "# System shortcuts",
      "alias update='sudo apt update && sudo apt upgrade'",
      "alias install='sudo apt install'",
      "alias c='clear'",
      "alias ..='cd ..'",
      "alias ...='cd ../..'",
      "# Useful",
      "alias ll='ls -lah'",
      "alias grep='grep --color=auto'",
      "alias ports='netstat -tulanp'",
      "EOF",
      "Source: source ~/.bashrc",
      "AGENT: 'Aliases created! Now just type gs instead of git status ✓'",
      "Create functions: cat >> ~/.bashrc << 'EOF'",
      "# Extract any archive",
      "extract() {",
      "  if [ -f $1 ]; then",
      "    case $1 in",
      "      *.tar.bz2) tar xjf $1 ;;",
      "      *.tar.gz) tar xzf $1 ;;",
      "      *.zip) unzip $1 ;;",
      "      *.rar) unrar x $1 ;;",
      "      *) echo 'Unknown format' ;;",
      "    esac",
      "  fi",
      "}",
      "# Make directory and cd into it",
      "mkcd() {",
      "  mkdir -p \"$1\" && cd \"$1\"",
      "}",
      "# Find process by name",
      "psgrep() {",
      "  ps aux | grep -v grep | grep -i -e VSZ -e \"$1\"",
      "}",
      "EOF",
      "Source: source ~/.bashrc",
      "AGENT: 'Functions created!'",
      "AGENT: '- extract file.zip (auto-extract)'",
      "AGENT: '- mkcd newdir (create and enter)'",
      "AGENT: '- psgrep chrome (find process)'",
      "AGENT: 'Your workflow is now much faster! ✓'"
    ],
    "commands": ["alias", "source", "cat"],
    "packages": {"debian_ubuntu": [], "arch": []},
    "related_commands": ["alias", "function", "source"],
    "complexity": "beginner",
    "tags": ["aliases", "functions", "bash", "productivity", "shortcuts", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_print_server_setup_001",
    "command": "multiple",
    "scenario": "User: Setup network printer",
    "problem": "Can't print, printer not detected",
    "solution": "Configure CUPS printing system",
    "steps": [
      "USER SAYS: 'I have a network printer but can't print from Linux!'",
      "AGENT: 'Let me set up your printer with CUPS.'",
      "Install CUPS: sudo apt install cups || sudo pacman -S cups",
      "Start service: sudo systemctl start cups",
      "Enable: sudo systemctl enable cups",
      "Add user to group: sudo usermod -a -G lpadmin $USER",
      "AGENT: 'CUPS installed. Open browser to http://localhost:631'",
      "AGENT: 'Steps in web interface:'",
      "AGENT: '1. Click Administration'",
      "AGENT: '2. Add Printer'",
      "AGENT: '3. Select your network printer'",
      "AGENT: '4. Choose driver'",
      "AGENT: '5. Set as default'",
      "Test print: echo 'Test page' | lp",
      "AGENT: 'Test page sent to printer ✓'",
      "Check status: lpstat -t",
      "Create print helper: cat > ~/print-file.sh << 'EOF'",
      "#!/bin/bash",
      "if [ -z \"$1\" ]; then",
      "  echo 'Usage: print-file.sh <file>'",
      "  exit 1",
      "fi",
      "lp -d $(lpstat -d | awk '{print $NF}') \"$1\"",
      "echo \"✓ Sent to printer: $1\"",
      "EOF",
      "chmod +x ~/print-file.sh",
      "AGENT: 'Printer setup complete ✓'"
    ],
    "commands": ["cups", "lp", "lpstat", "systemctl"],
    "packages": {"debian_ubuntu": ["cups"], "arch": ["cups"]},
    "related_commands": ["lp", "lpstat", "lpq", "lprm"],
    "complexity": "intermediate",
    "tags": ["printing", "cups", "printer", "hardware", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_bluetooth_setup_001",
    "command": "multiple",
    "scenario": "User: Connect Bluetooth devices",
    "problem": "Bluetooth not working or can't pair devices",
    "solution": "Configure Bluetooth with bluetoothctl",
    "steps": [
      "USER SAYS: 'My Bluetooth headphones won't connect!'",
      "AGENT: 'Let me help you with Bluetooth setup.'",
      "Install: sudo apt install bluez bluez-tools || sudo pacman -S bluez bluez-utils",
      "Start service: sudo systemctl start bluetooth",
      "Enable: sudo systemctl enable bluetooth",
      "Check status: sudo systemctl status bluetooth",
      "AGENT: 'Bluetooth service running ✓'",
      "Start pairing: bluetoothctl",
      "AGENT: 'In bluetoothctl, run these commands:'",
      "Commands: power on",
      "Commands: agent on",
      "Commands: default-agent",
      "Commands: scan on",
      "AGENT: 'Wait for your device to appear...'",
      "Commands: pair XX:XX:XX:XX:XX:XX",
      "Commands: trust XX:XX:XX:XX:XX:XX",
      "Commands: connect XX:XX:XX:XX:XX:XX",
      "AGENT: 'Device paired and connected! ✓'",
      "Create BT script: cat > ~/bluetooth-connect.sh << 'EOF'",
      "#!/bin/bash",
      "DEVICE=\"$1\"",
      "if [ -z \"$DEVICE\" ]; then",
      "  echo 'Saved devices:'",
      "  bluetoothctl devices",
      "  exit 0",
      "fi",
      "bluetoothctl connect \"$DEVICE\"",
      "EOF",
      "chmod +x ~/bluetooth-connect.sh",
      "AGENT: 'Bluetooth helper created ✓'"
    ],
    "commands": ["bluetoothctl", "systemctl"],
    "packages": {"debian_ubuntu": ["bluez", "bluez-tools"], "arch": ["bluez", "bluez-utils"]},
    "related_commands": ["bluetoothctl", "hciconfig", "hcitool"],
    "complexity": "beginner",
    "tags": ["bluetooth", "wireless", "audio", "devices", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_laptop_power_management_001",
    "command": "multiple",
    "scenario": "User: Improve laptop battery life",
    "problem": "Battery drains too fast on Linux",
    "solution": "Configure power management with TLP",
    "steps": [
      "USER SAYS: 'My laptop battery only lasts 2 hours on Linux!'",
      "AGENT: 'Let me optimize power management for better battery life.'",
      "Install TLP: sudo apt install tlp tlp-rdw || sudo pacman -S tlp",
      "Start TLP: sudo systemctl start tlp",
      "Enable: sudo systemctl enable tlp",
      "AGENT: 'TLP installed and running ✓'",
      "Check status: sudo tlp-stat -s",
      "AGENT: 'TLP is now managing power automatically.'",
      "Configure: sudo vim /etc/tlp.conf",
      "AGENT: 'Recommended settings:'",
      "Settings: CPU_SCALING_GOVERNOR_ON_BAT=powersave",
      "Settings: SATA_LINKPWR_ON_BAT=min_power",
      "Apply: sudo tlp start",
      "Check battery: upower -i /org/freedesktop/UPower/devices/battery_BAT0",
      "Install powertop: sudo apt install powertop || sudo pacman -S powertop",
      "Analyze: sudo powertop --auto-tune",
      "AGENT: 'Power optimization complete!'",
      "AGENT: 'Expected battery improvement: 30-50% ✓'",
      "Create battery info: cat > ~/battery-info.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Battery Info ==='",
      "upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep -E 'percentage|time|state'",
      "EOF",
      "chmod +x ~/battery-info.sh",
      "AGENT: 'Battery info tool created ✓'"
    ],
    "commands": ["tlp", "powertop", "upower", "systemctl"],
    "packages": {"debian_ubuntu": ["tlp", "tlp-rdw", "powertop"], "arch": ["tlp", "powertop"]},
    "related_commands": ["tlp", "powertop", "upower", "acpi"],
    "complexity": "intermediate",
    "tags": ["battery", "power", "laptop", "optimization", "tlp", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_virtualization_kvm_001",
    "command": "multiple",
    "scenario": "User: Want to run virtual machines",
    "problem": "Need to test other OSes or run VMs",
    "solution": "Setup KVM/QEMU virtualization",
    "steps": [
      "USER SAYS: 'I need to run Windows in a VM for testing.'",
      "AGENT: 'Let me set up KVM virtualization for you.'",
      "Check support: egrep -c '(vmx|svm)' /proc/cpuinfo",
      "AGENT: 'CPU has virtualization support ✓'",
      "Install: sudo apt install qemu-kvm libvirt-daemon-system virt-manager || sudo pacman -S qemu virt-manager",
      "Add to group: sudo usermod -a -G libvirt $USER",
      "Start service: sudo systemctl start libvirtd",
      "Enable: sudo systemctl enable libvirtd",
      "AGENT: 'KVM installed. Log out and back in.'",
      "Start manager: virt-manager &",
      "AGENT: 'Virtual Machine Manager opened ✓'",
      "AGENT: 'To create VM:'",
      "AGENT: '1. Click + button'",
      "AGENT: '2. Select ISO file'",
      "AGENT: '3. Allocate RAM and CPU'",
      "AGENT: '4. Create virtual disk'",
      "AGENT: '5. Start installation'",
      "CLI create: virt-install --name win10 --ram 4096 --disk size=50 --cdrom win10.iso",
      "AGENT: 'Virtualization ready ✓'"
    ],
    "commands": ["qemu", "virt-manager", "virt-install", "systemctl"],
    "packages": {"debian_ubuntu": ["qemu-kvm", "libvirt-daemon-system", "virt-manager"], "arch": ["qemu", "virt-manager", "ebtables", "dnsmasq"]},
    "related_commands": ["virsh", "virt-install", "virt-manager"],
    "complexity": "advanced",
    "tags": ["virtualization", "kvm", "qemu", "vm", "virtual-machine", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_screen_recording_001",
    "command": "multiple",
    "scenario": "User: Need to record screen for tutorial",
    "problem": "Want to create screen recording or GIF",
    "solution": "Setup screen recording tools",
    "steps": [
      "USER SAYS: 'I want to record my screen to make a tutorial.'",
      "AGENT: 'Let me set up screen recording for you.'",
      "Install OBS: sudo apt install obs-studio || sudo pacman -S obs-studio",
      "Start OBS: obs &",
      "AGENT: 'OBS Studio launched (professional recording) ✓'",
      "Simple recording: sudo apt install simplescreenrecorder || sudo pacman -S simplescreenrecorder",
      "For GIFs: sudo apt install peek || sudo pacman -S peek",
      "Start Peek: peek &",
      "AGENT: 'Peek launched (easy GIF recording) ✓'",
      "CLI recording: ffmpeg -f x11grab -s 1920x1080 -i :0.0 output.mp4",
      "Create recorder: cat > ~/record-screen.sh << 'EOF'",
      "#!/bin/bash",
      "OUTPUT=~/Videos/recording-$(date +%Y%m%d-%H%M%S).mp4",
      "echo 'Recording... Press Ctrl+C to stop'",
      "ffmpeg -f x11grab -s $(xdpyinfo | grep dimensions | awk '{print $2}') -i :0.0 -c:v libx264 $OUTPUT",
      "echo \"Saved: $OUTPUT\"",
      "EOF",
      "chmod +x ~/record-screen.sh",
      "AGENT: 'Screen recording tools ready ✓'"
    ],
    "commands": ["obs", "peek", "ffmpeg", "simplescreenrecorder"],
    "packages": {"debian_ubuntu": ["obs-studio", "peek", "ffmpeg"], "arch": ["obs-studio", "peek", "ffmpeg"]},
    "related_commands": ["ffmpeg", "obs", "simplescreenrecorder"],
    "complexity": "beginner",
    "tags": ["recording", "screen-capture", "video", "tutorial", "real-world", "ai-agent"]
  },
  {
    "id": "scenario_image_optimization_001",
    "command": "multiple",
    "scenario": "User: Need to optimize/resize images in bulk",
    "problem": "Many large images need compression or resizing",
    "solution": "Batch process images with ImageMagick",
    "steps": [
      "USER SAYS: 'I have 500 photos that are too large. Need to resize them all!'",
      "AGENT: 'Let me set up batch image processing for you.'",
      "Install: sudo apt install imagemagick || sudo pacman -S imagemagick",
      "AGENT: 'ImageMagick installed ✓'",
      "Resize one: convert input.jpg -resize 50% output.jpg",
      "Batch resize: for img in *.jpg; do convert \"$img\" -resize 50% \"resized-$img\"; done",
      "Create optimizer: cat > ~/optimize-images.sh << 'EOF'",
      "#!/bin/bash",
      "echo '=== Image Optimizer ==='",
      "echo ''",
      "echo '1. Resize images'",
      "echo '2. Compress images'",
      "echo '3. Convert format'",
      "echo '4. Create thumbnails'",
      "read -p 'Choice: ' OPT",
      "read -p 'Directory: ' DIR",
      "case $OPT in",
      "  1)",
      "    read -p 'Width (e.g., 1920): ' WIDTH",
      "    mkdir -p \"$DIR/resized\"",
      "    for img in \"$DIR\"/*.{jpg,png,jpeg}; do",
      "      [ -f \"$img\" ] && convert \"$img\" -resize ${WIDTH}x \"$DIR/resized/$(basename $img)\"",
      "    done",
      "    ;;",
      "  2)",
      "    mkdir -p \"$DIR/compressed\"",
      "    for img in \"$DIR\"/*.jpg; do",
      "      [ -f \"$img\" ] && convert \"$img\" -quality 85 \"$DIR/compressed/$(basename $img)\"",
      "    done",
      "    ;;",
      "  3)",
      "    read -p 'Convert to (jpg/png/webp): ' FMT",
      "    mkdir -p \"$DIR/converted\"",
      "    for img in \"$DIR\"/*; do",
      "      [ -f \"$img\" ] && convert \"$img\" \"$DIR/converted/$(basename ${img%.*}).$FMT\"",
      "    done",
      "    ;;",
      "  4)",
      "    mkdir -p \"$DIR/thumbnails\"",
      "    for img in \"$DIR\"/*.{jpg,png}; do",
      "      [ -f \"$img\" ] && convert \"$img\" -thumbnail 200x200 \"$DIR/thumbnails/$(basename $img)\"",
      "    done",
      "    ;;",
      "esac",
      "echo '✓ Processing complete'",
      "EOF",
      "chmod +x ~/optimize-images.sh",
      "AGENT: 'Image optimizer created ✓'",
      "AGENT: 'Now you can batch process images easily!'"
    ],
    "commands": ["convert", "mogrify", "identify"],
    "packages": {"debian_ubuntu": ["imagemagick"], "arch": ["imagemagick"]},
    "related_commands": ["convert", "mogrify", "identify", "optipng"],
    "complexity": "beginner",
    "tags": ["images", "optimization", "imagemagick", "batch", "resize", "real-world", "ai-agent"]
  }
]

[
  {
    "id": "scenario_system_monitoring_001",
    "command": "multiple",
    "scenario": "User: Help me monitor system health and set up alerts",
    "problem": "Need to track system resources, disk space, and get alerts before issues",
    "solution": "Setup comprehensive monitoring with automated alerts",
    "steps": [
      "USER SAYS: 'I want to monitor my system so I know before something breaks.'",
      "AGENT: 'Smart thinking! Let me set up comprehensive monitoring with alerts.'",
      "AGENT: 'What do you want to monitor? CPU, RAM, disk, services, temperatures?'",
      "USER: 'All of it'",
      "AGENT: 'Perfect! Setting up complete monitoring system...'",
      "Phase 1: Install monitoring tools",
      "AGENT: 'Phase 1: Installing monitoring tools...'",
      "Install: sudo apt install htop iotop nethogs sysstat || sudo pacman -S htop iotop nethogs sysstat",
      "Enable sysstat: sudo systemctl enable --now sysstat",
      "AGENT: 'Monitoring tools installed. ✓'",
      "Phase 2: Disk space monitor",
      "AGENT: 'Phase 2: Setting up disk space monitoring...'",
      "Create script: cat > ~/monitor-disk.sh << 'EOF'",
      "#!/bin/bash",
      "THRESHOLD=80",
      "USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')",
      "if [ $USAGE -gt $THRESHOLD ]; then",
      "  echo \"WARNING: Disk usage at ${USAGE}%!\"",
      "  notify-send 'Disk Space Warning' \"Disk usage at ${USAGE}%\"",
      "  echo \"$(date): Disk at ${USAGE}%\" >> ~/monitor.log",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/monitor-disk.sh",
      "Test: ~/monitor-disk.sh",
      "AGENT: 'Disk monitor created. Alerts when >80% full.'",
      "Phase 3: Memory monitor",
      "AGENT: 'Phase 3: Setting up memory monitoring...'",
      "Create script: cat > ~/monitor-memory.sh << 'EOF'",
      "#!/bin/bash",
      "THRESHOLD=90",
      "USED=$(free | grep Mem | awk '{print ($3/$2) * 100.0}' | cut -d. -f1)",
      "if [ $USED -gt $THRESHOLD ]; then",
      "  echo \"WARNING: Memory usage at ${USED}%!\"",
      "  notify-send 'Memory Warning' \"Memory at ${USED}%\"",
      "  echo \"$(date): Memory at ${USED}%\" >> ~/monitor.log",
      "  echo \"Top processes:\" >> ~/monitor.log",
      "  ps aux --sort=-rss | head -5 >> ~/monitor.log",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/monitor-memory.sh",
      "AGENT: 'Memory monitor created. Alerts when >90% used.'",
      "Phase 4: CPU temperature",
      "AGENT: 'Phase 4: Setting up temperature monitoring...'",
      "Install sensors: sudo apt install lm-sensors || sudo pacman -S lm_sensors",
      "Detect: sudo sensors-detect --auto",
      "Test: sensors",
      "Create script: cat > ~/monitor-temp.sh << 'EOF'",
      "#!/bin/bash",
      "THRESHOLD=80",
      "TEMP=$(sensors | grep -i 'Package id 0' | awk '{print $4}' | sed 's/+//;s/°C//' | cut -d. -f1)",
      "if [ ! -z \"$TEMP\" ] && [ $TEMP -gt $THRESHOLD ]; then",
      "  echo \"WARNING: CPU temperature at ${TEMP}°C!\"",
      "  notify-send -u critical 'Temperature Warning' \"CPU at ${TEMP}°C\"",
      "  echo \"$(date): CPU temp ${TEMP}°C\" >> ~/monitor.log",
      "fi",
      "EOF",
      "Make executable: chmod +x ~/monitor-temp.sh",
      "AGENT: 'Temperature monitor created. Alerts when >80°C.'",
      "Phase 5: Service monitor",
      "AGENT: 'Phase 5: Setting up service monitoring...'",
      "AGENT: 'What services should I monitor?'",
      "USER: 'SSH, nginx, postgresql'",
      "Create script: cat > ~/monitor-services.sh << 'EOF'",
      "#!/bin/bash",
      "SERVICES=(\"ssh\" \"nginx\" \"postgresql\")",
      "for SERVICE in \"${SERVICES[@]}\"; do",
      "  if ! systemctl is-active --quiet $SERVICE 2>/dev/null; then",
      "    echo \"WARNING: $SERVICE is not running!\"",
      "    notify-send -u critical 'Service Down' \"$SERVICE has stopped\"",
      "    echo \"$(date): $SERVICE down\" >> ~/monitor.log",
      "    # Auto-restart",
      "    sudo systemctl start $SERVICE",
      "    echo \"$(date): Auto-restarted $SERVICE\" >> ~/monitor.log",
      "  fi",
      "done",
      "EOF",
      "Make executable: chmod +x ~/monitor-services.sh",
      "AGENT: 'Service monitor created. Auto-restarts if down. ✓'",
      "Phase 6: Master monitor",
      "AGENT: 'Phase 6: Creating master monitoring script...'",
      "Create master: cat > ~/monitor-all.sh << 'EOF'",
      "#!/bin/bash",
      "echo \"=== System Monitor - $(date) ===\" >> ~/monitor.log",
      "~/monitor-disk.sh",
      "~/monitor-memory.sh",
      "~/monitor-temp.sh",
      "~/monitor-services.sh",
      "# System stats",
      "echo \"Load: $(uptime | awk -F'load average:' '{print $2}')\" >> ~/monitor.log",
      "EOF",
      "Make executable: chmod +x ~/monitor-all.sh",
      "AGENT: 'Master monitor created. Runs all checks.'",
      "Phase 7: Schedule monitoring",
      "AGENT: 'Phase 7: Scheduling automatic monitoring...'",
      "Add to cron: (crontab -l 2>/dev/null; echo '*/5 * * * * ~/monitor-all.sh') | crontab -",
      "AGENT: 'Monitoring scheduled: Runs every 5 minutes. ✓'",
      "Verify cron: crontab -l | grep monitor",
      "Phase 8: Dashboard",
      "AGENT: 'Phase 8: Creating monitoring dashboard...'",
      "Create dashboard: cat > ~/dashboard.sh << 'EOF'",
      "#!/bin/bash",
      "while true; do",
      "  clear",
      "  echo '╔════════════════════════════════════════╗'",
      "  echo '║       System Health Dashboard          ║'",
      "  echo '╚════════════════════════════════════════╝'",
      "  echo ''",
      "  echo '⏰ Time: '$(date +%H:%M:%S)",
      "  echo ''",
      "  echo '━━━ CPU ━━━'",
      "  echo 'Load: '$(uptime | awk -F'load average:' '{print $2}')",
      "  echo 'Temp: '$(sensors 2>/dev/null | grep 'Package id 0' | awk '{print $4}' || echo 'N/A')",
      "  echo ''",
      "  echo '━━━ Memory ━━━'",
      "  free -h | grep 'Mem:' | awk '{printf \"Used: %s / %s (%s)\\n\", $3, $2, int($3/$2*100)\"%\"}'",
      "  echo ''",
      "  echo '━━━ Disk ━━━'",
      "  df -h / | tail -1 | awk '{printf \"Used: %s / %s (%s)\\n\", $3, $2, $5}'",
      "  echo ''",
      "  echo '━━━ Network ━━━'",
      "  RXBYTES_OLD=$(cat /sys/class/net/$(ip route | grep default | awk '{print $5}')/statistics/rx_bytes)",
      "  TXBYTES_OLD=$(cat /sys/class/net/$(ip route | grep default | awk '{print $5}')/statistics/tx_bytes)",
      "  sleep 1",
      "  RXBYTES=$(cat /sys/class/net/$(ip route | grep default | awk '{print $5}')/statistics/rx_bytes)",
      "  TXBYTES=$(cat /sys/class/net/$(ip route | grep default | awk '{print $5}')/statistics/tx_bytes)",
      "  echo 'Download: '$((($RXBYTES - $RXBYTES_OLD) / 1024))' KB/s'",
      "  echo 'Upload: '$((($TXBYTES - $TXBYTES_OLD) / 1024))' KB/s'",
      "  echo ''",
      "  echo '━━━ Services ━━━'",
      "  for SVC in ssh nginx postgresql; do",
      "    if systemctl is-active --quiet $SVC 2>/dev/null; then",
      "      echo \"✓ $SVC\"",
      "    else",
      "      echo \"✗ $SVC\"",
      "    fi",
      "  done",
      "  echo ''",
      "  echo '━━━ Recent Alerts ━━━'",
      "  tail -3 ~/monitor.log 2>/dev/null",
      "  echo ''",
      "  echo 'Press Ctrl+C to exit'",
      "  sleep 4",
      "done",
      "EOF",
      "Make executable: chmod +x ~/dashboard.sh",
      "AGENT: 'Dashboard created. Run: ~/dashboard.sh'",
      "Demo: AGENT: 'Want to see the dashboard?'",
      "USER: 'Yes, show me'",
      "Run: ~/dashboard.sh &",
      "PID=$!",
      "Wait: sleep 10",
      "Stop: kill $PID",
      "AGENT: 'Dashboard shows real-time system health. ✓'",
      "Phase 9: Email alerts",
      "AGENT: 'Phase 9: Want email alerts for critical issues?'",
      "USER: 'Yes'",
      "Install: sudo apt install mailutils || sudo pacman -S mailutils",
      "Create alert script: cat > ~/alert-email.sh << 'EOF'",
      "#!/bin/bash",
      "EMAIL='your@email.com'",
      "SUBJECT='System Alert'",
      "MESSAGE=\"$1\"",
      "echo \"$MESSAGE\" | mail -s \"$SUBJECT\" $EMAIL",
      "EOF",
      "Make executable: chmod +x ~/alert-email.sh",
      "AGENT: 'Email alerts setup. Configure with your email address.'",
      "Phase 10: Report generator",
      "AGENT: 'Phase 10: Creating daily health report...'",
      "Create report: cat > ~/daily-report.sh << 'EOF'",
      "#!/bin/bash",
      "REPORT=~/health-report-$(date +%Y%m%d).txt",
      "echo 'System Health Report' > $REPORT",
      "echo 'Date: '$(date) >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== System Info ===' >> $REPORT",
      "uname -a >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== Uptime ===' >> $REPORT",
      "uptime >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== Disk Usage ===' >> $REPORT",
      "df -h >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== Memory Usage ===' >> $REPORT",
      "free -h >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== Top Processes ===' >> $REPORT",
      "ps aux --sort=-rss | head -10 >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== Service Status ===' >> $REPORT",
      "systemctl list-units --state=running --type=service | head -20 >> $REPORT",
      "echo '' >> $REPORT",
      "echo '=== Recent Alerts ===' >> $REPORT",
      "tail -20 ~/monitor.log >> $REPORT",
      "echo ''",
      "echo \"Report saved: $REPORT\"",
      "EOF",
      "Make executable: chmod +x ~/daily-report.sh",
      "Schedule: (crontab -l 2>/dev/null; echo '0 8 * * * ~/daily-report.sh') | crontab -",
      "AGENT: 'Daily report scheduled for 8 AM. ✓'",
      "Add aliases: cat >> ~/.bashrc << 'EOF'",
      "# Monitoring aliases",
      "alias monitor='~/dashboard.sh'",
      "alias monitor-check='~/monitor-all.sh'",
      "alias monitor-logs='tail -f ~/monitor.log'",
      "alias health-report='~/daily-report.sh'",
      "EOF",
      "Source: source ~/.bashrc",
      "Create quick status: cat > ~/status.sh << 'EOF'",
      "#!/bin/bash",
      "echo '🖥️  Quick Status'",
      "echo ''",
      "echo '💾 Disk: '$(df / | tail -1 | awk '{print $5}')",
      "echo '🧠 RAM: '$(free | grep Mem | awk '{print int($3/$2*100)}')%",
      "echo '🔥 CPU Load: '$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}')",
      "echo '🌡️  Temp: '$(sensors 2>/dev/null | grep 'Package id 0' | awk '{print $4}' || echo 'N/A')",
      "echo '⏱️  Uptime: '$(uptime -p | sed 's/up //')",
      "EOF",
      "Make executable: chmod +x ~/status.sh",
      "Add to bashrc: echo 'alias status=\"~/status.sh\"' >> ~/.bashrc && source ~/.bashrc",
      "AGENT: 'Quick status command added: just type status'",
      "Test: ~/status.sh",
      "Final summary: AGENT: 'Monitoring system complete! Summary:'",
      "AGENT: ''",
      "AGENT: '✓ Disk space monitoring (alert >80%)'",
      "AGENT: '✓ Memory monitoring (alert >90%)'",
      "AGENT: '✓ CPU temperature monitoring (alert >80°C)'",
      "AGENT: '✓ Service monitoring (auto-restart)'",
      "AGENT: '✓ Automated checks every 5 minutes'",
      "AGENT: '✓ Daily health reports at 8 AM'",
      "AGENT: '✓ Real-time dashboard'",
      "AGENT: ''",
      "AGENT: 'Commands available:'",
      "AGENT: '- monitor (real-time dashboard)'",
      "AGENT: '- status (quick health check)'",
      "AGENT: '- monitor-logs (view alert log)'",
      "AGENT: '- health-report (generate report)'",
      "AGENT: ''",
      "AGENT: 'Monitoring tools:'",
      "AGENT: '- ~/dashboard.sh (live dashboard)'",
      "AGENT: '- ~/monitor-all.sh (run all checks)'",
      "AGENT: '- ~/monitor.log (alert history)'",
      "AGENT: '- ~/health-report-*.txt (daily reports)'",
      "AGENT: ''",
      "AGENT: 'Your system is now fully monitored! ✓'"
    ],
    "commands": ["htop", "iotop", "nethogs", "sysstat", "free", "df", "sensors", "systemctl", "uptime", "ps", "crontab", "mail", "notify-send", "cat", "chmod", "source"],
    "packages": {
      "debian_ubuntu": ["htop", "iotop", "nethogs", "sysstat", "lm-sensors", "mailutils", "libnotify-bin"],
      "arch": ["htop", "iotop", "nethogs", "sysstat", "lm_sensors", "mailutils", "libnotify"]
    },
    "related_commands": ["htop", "top", "free", "df", "sensors", "systemctl", "cron"],
    "complexity": "intermediate",
    "tags": ["monitoring", "alerts", "system-health", "automation", "dashboards", "cron", "real-world", "ai-agent"]
  }
]

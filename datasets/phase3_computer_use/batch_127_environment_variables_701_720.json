[
  {
    "id": "scenario_environment_variables_130",
    "command": "export",
    "scenario": "Manage environment variables for shell configuration and application settings.",
    "problem": "Need to set environment variables for applications, configure PATH, make variables persistent across sessions, understand difference between shell and environment variables, and manage application configuration through environment.",
    "solution": "Use export to create environment variables, understand ~/.bashrc vs ~/.bash_profile, set system-wide variables in /etc/environment, use .env files for applications, and properly configure PATH and other critical variables.",
    "steps": [
      "USER SAYS: 'How do I set environment variables that persist across reboots? And what's the difference between setting in .bashrc vs .bash_profile?'",
      "AGENT: 'Let me show you environment variable management! We'll cover export, shell vs environment variables, persistence methods, and best practices.'",
      "AGENT: ''",
      "AGENT: '🔍 RESEARCH PHASE: Environment variables...'",
      "AGENT: '[Searching] \"environment variables export bashrc bash_profile PATH\"'",
      "AGENT: '[Found] export makes variables available to child processes.'",
      "AGENT: '[Found] ~/.bashrc for interactive shells, ~/.bash_profile for login shells.'",
      "AGENT: '[Found] /etc/environment for system-wide variables.'",
      "AGENT: '[Found] PATH determines where shell looks for commands.'",
      "AGENT: '✓ Research complete! Let's master environment variables.'",
      "AGENT: ''",
      "AGENT: '--- Approach 1: View Current Environment ---'",
      "Run command: `env`",
      "AGENT: 'Shows all environment variables'",
      "AGENT: 'PATH=/usr/local/bin:/usr/bin:/bin'",
      "AGENT: 'HOME=/home/user'",
      "AGENT: 'USER=user'",
      "AGENT: 'SHELL=/bin/bash'",
      "AGENT: 'LANG=en_US.UTF-8'",
      "AGENT: '...'",
      "AGENT: ''",
      "Run command: `printenv`",
      "AGENT: 'Same as env - shows all environment variables'",
      "AGENT: ''",
      "Run command: `printenv PATH`",
      "AGENT: '/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games'",
      "AGENT: 'Shows specific variable'",
      "AGENT: ''",
      "Run command: `echo $PATH`",
      "AGENT: '/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games'",
      "AGENT: 'Another way to print variable'",
      "AGENT: ''",
      "AGENT: '--- Approach 2: Set Temporary Variables (Current Session Only) ---'",
      "Run command: `MY_VAR=\"Hello World\"`",
      "AGENT: 'Creates shell variable (not exported)'",
      "AGENT: ''",
      "Run command: `echo $MY_VAR`",
      "AGENT: 'Hello World'",
      "AGENT: ''",
      "Run command: `bash -c 'echo $MY_VAR'`",
      "AGENT: '(empty) ← Child process can\\'t see it!'",
      "AGENT: ''",
      "AGENT: 'Now export it:'",
      "Run command: `export MY_VAR=\"Hello World\"`",
      "AGENT: ''",
      "Run command: `bash -c 'echo $MY_VAR'`",
      "AGENT: 'Hello World ← Now child processes can see it!'",
      "AGENT: ''",
      "AGENT: 'Or combine in one line:'",
      "Run command: `export DATABASE_URL=\"postgresql://localhost/mydb\"`",
      "AGENT: ''",
      "AGENT: '--- Approach 3: Modify PATH ---'",
      "Run command: `echo $PATH`",
      "AGENT: '/usr/local/bin:/usr/bin:/bin'",
      "AGENT: ''",
      "AGENT: 'Add directory to beginning:'",
      "Run command: `export PATH=\"/opt/myapp/bin:$PATH\"`",
      "AGENT: ''",
      "Run command: `echo $PATH`",
      "AGENT: '/opt/myapp/bin:/usr/local/bin:/usr/bin:/bin'",
      "AGENT: ''",
      "AGENT: 'Add directory to end:'",
      "Run command: `export PATH=\"$PATH:/home/user/scripts\"`",
      "AGENT: ''",
      "Run command: `echo $PATH`",
      "AGENT: '/opt/myapp/bin:/usr/local/bin:/usr/bin:/bin:/home/user/scripts'",
      "AGENT: ''",
      "AGENT: '--- Approach 4: Persistent Variables - User Level ---'",
      "AGENT: ''",
      "AGENT: 'For interactive non-login shells (most terminals):'",
      "Run command: `echo 'export MY_VAR=\"persistent value\"' >> ~/.bashrc`",
      "AGENT: ''",
      "AGENT: 'For login shells (SSH, console login):'",
      "Run command: `echo 'export MY_VAR=\"persistent value\"' >> ~/.bash_profile`",
      "AGENT: ''",
      "AGENT: '💡 Best practice: Put in ~/.bashrc and source it from ~/.bash_profile'",
      "Create tool: `cat >> ~/.bash_profile << 'EOF'`",
      "# Source bashrc for consistency\nif [ -f ~/.bashrc ]; then\n    . ~/.bashrc\nfi\nEOF",
      "AGENT: ''",
      "AGENT: 'Now add to ~/.bashrc:'",
      "Create tool: `cat >> ~/.bashrc << 'EOF'`",
      "\n# Custom environment variables\nexport EDITOR=vim\nexport VISUAL=vim\nexport PAGER=less\nexport PATH=\"$HOME/bin:$HOME/.local/bin:$PATH\"\n\n# Application-specific\nexport DATABASE_URL=\"postgresql://localhost/mydb\"\nexport API_KEY=\"your-api-key-here\"\nexport NODE_ENV=\"development\"\nEOF",
      "AGENT: ''",
      "Run command: `source ~/.bashrc`",
      "AGENT: 'Reload configuration without logging out'",
      "AGENT: ''",
      "AGENT: '--- Approach 5: System-Wide Variables ---'",
      "Run command: `sudo nano /etc/environment`",
      "AGENT: 'Add system-wide variables:'",
      "AGENT: 'PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"'",
      "AGENT: 'JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk-amd64\"'",
      "AGENT: 'LC_ALL=\"en_US.UTF-8\"'",
      "AGENT: ''",
      "AGENT: '⚠️ Note: No \"export\" keyword in /etc/environment'",
      "AGENT: '⚠️ Requires re-login to take effect'",
      "AGENT: ''",
      "AGENT: 'Alternative: /etc/profile.d/ for shell scripts'",
      "Run command: `sudo nano /etc/profile.d/custom.sh`",
      "Create tool: `cat << 'EOF'`",
      "#!/bin/bash\nexport JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk-amd64\"\nexport PATH=\"$JAVA_HOME/bin:$PATH\"\nEOF",
      "Run command: `sudo chmod +x /etc/profile.d/custom.sh`",
      "AGENT: ''",
      "AGENT: '--- Approach 6: Application .env Files ---'",
      "Create tool: `cat > .env << 'EOF'`",
      "# Database configuration\nDATABASE_HOST=localhost\nDATABASE_PORT=5432\nDATABASE_NAME=myapp\nDATABASE_USER=dbuser\nDATABASE_PASSWORD=secret123\n\n# API Keys\nAPI_KEY=your-api-key-here\nAPI_SECRET=your-api-secret-here\n\n# Application settings\nDEBUG=true\nLOG_LEVEL=info\nPORT=3000\nEOF",
      "AGENT: ''",
      "AGENT: 'Load .env file in shell:'",
      "Run command: `export $(grep -v '^#' .env | xargs)`",
      "AGENT: 'Loads all variables from .env'",
      "AGENT: ''",
      "Run command: `echo $DATABASE_HOST`",
      "AGENT: 'localhost'",
      "AGENT: ''",
      "AGENT: 'Or use set -a:'",
      "Run command: `set -a && source .env && set +a`",
      "AGENT: '  set -a = Auto-export all variables'",
      "AGENT: '  set +a = Disable auto-export'",
      "AGENT: ''",
      "AGENT: '--- Approach 7: Unset Variables ---'",
      "Run command: `export TEMP_VAR=\"temporary\"`",
      "Run command: `echo $TEMP_VAR`",
      "AGENT: 'temporary'",
      "AGENT: ''",
      "Run command: `unset TEMP_VAR`",
      "Run command: `echo $TEMP_VAR`",
      "AGENT: '(empty)'",
      "AGENT: ''",
      "AGENT: '--- Approach 8: Read-Only Variables ---'",
      "Run command: `readonly CONSTANT=\"cannot change\"`",
      "Run command: `echo $CONSTANT`",
      "AGENT: 'cannot change'",
      "AGENT: ''",
      "Run command: `CONSTANT=\"new value\"`",
      "AGENT: 'bash: CONSTANT: readonly variable'",
      "AGENT: ''",
      "Run command: `declare -r ANOTHER_CONST=\"also readonly\"`",
      "AGENT: 'Alternative syntax'",
      "AGENT: ''",
      "AGENT: '--- Approach 9: Conditional Variables ---'",
      "Create tool: `cat >> ~/.bashrc << 'EOF'`",
      "\n# Set default if not already set\nexport EDITOR=\"${EDITOR:-vim}\"\nexport BROWSER=\"${BROWSER:-firefox}\"\n\n# Different values based on hostname\nif [ \"$(hostname)\" = \"production\" ]; then\n    export NODE_ENV=\"production\"\n    export DEBUG=\"false\"\nelse\n    export NODE_ENV=\"development\"\n    export DEBUG=\"true\"\nfi\n\n# Load private variables if file exists\nif [ -f ~/.env.private ]; then\n    set -a\n    source ~/.env.private\n    set +a\nfi\nEOF",
      "AGENT: ''",
      "AGENT: '--- Approach 10: Debugging Variable Issues ---'",
      "Run command: `declare -p PATH`",
      "AGENT: 'declare -x PATH=\"/usr/local/bin:/usr/bin:/bin\"'",
      "AGENT: '  -x = exported variable'",
      "AGENT: ''",
      "Run command: `declare -p MY_VAR`",
      "AGENT: 'declare -- MY_VAR=\"value\"'",
      "AGENT: '  -- = not exported (shell variable only)'",
      "AGENT: ''",
      "AGENT: 'Check where variable is defined:'",
      "Run command: `grep -r \"JAVA_HOME\" ~/.bashrc ~/.bash_profile /etc/environment /etc/profile.d/`",
      "AGENT: '/etc/profile.d/java.sh:export JAVA_HOME=\"/usr/lib/jvm/java-11\"'",
      "AGENT: ''",
      "AGENT: 'Trace variable changes:'",
      "Run command: `bash -x -c 'echo $PATH' 2>&1 | grep PATH`",
      "AGENT: 'Shows how PATH is built'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Common Environment Variables ---'",
      "Create tool: `cat > ~/.bashrc.d/common-vars.sh << 'EOF'`",
      "#!/bin/bash\n\n# Editor configuration\nexport EDITOR=\"vim\"\nexport VISUAL=\"vim\"\n\n# Pager\nexport PAGER=\"less\"\nexport LESS=\"-R\"  # Raw color codes\n\n# History\nexport HISTSIZE=10000\nexport HISTFILESIZE=20000\nexport HISTCONTROL=\"ignoredups:erasedups\"\n\n# Colors\nexport CLICOLOR=1\nexport LSCOLORS=\"ExGxBxDxCxEgEdxbxgxcxd\"\nexport GREP_COLOR=\"1;32\"\n\n# Locale\nexport LANG=\"en_US.UTF-8\"\nexport LC_ALL=\"en_US.UTF-8\"\n\n# Development\nexport PYTHONDONTWRITEBYTECODE=1\nexport PIP_REQUIRE_VIRTUALENV=true\nexport COMPOSE_DOCKER_CLI_BUILD=1\n\n# PATH additions\nexport PATH=\"$HOME/bin:$HOME/.local/bin:$PATH\"\n\n# XDG Base Directory\nexport XDG_CONFIG_HOME=\"$HOME/.config\"\nexport XDG_DATA_HOME=\"$HOME/.local/share\"\nexport XDG_CACHE_HOME=\"$HOME/.cache\"\nEOF",
      "AGENT: ''",
      "AGENT: '--- Bonus: Variable Management Script ---'",
      "Create tool: `cat > manage-env.sh << 'EOF'`",
      "#!/bin/bash\nset -euo pipefail\n\ncase \"${1:-}\" in\n    list)\n        echo \"=== Current Environment Variables ===\"\n        env | sort\n        ;;\n    search)\n        if [ -z \"${2:-}\" ]; then\n            echo \"Usage: $0 search PATTERN\"\n            exit 1\n        fi\n        echo \"=== Variables matching '$2' ===\"\n        env | grep -i \"$2\"\n        ;;\n    set)\n        if [ -z \"${2:-}\" ] || [ -z \"${3:-}\" ]; then\n            echo \"Usage: $0 set VAR_NAME VAR_VALUE\"\n            exit 1\n        fi\n        echo \"export $2=\\\"$3\\\"\" >> ~/.bashrc\n        export \"$2\"=\"$3\"\n        echo \"✓ Set $2=$3 (added to ~/.bashrc)\"\n        ;;\n    unset)\n        if [ -z \"${2:-}\" ]; then\n            echo \"Usage: $0 unset VAR_NAME\"\n            exit 1\n        fi\n        sed -i \"/export $2=/d\" ~/.bashrc\n        unset \"$2\" 2>/dev/null || true\n        echo \"✓ Unset $2 (removed from ~/.bashrc)\"\n        ;;\n    reload)\n        source ~/.bashrc\n        echo \"✓ Reloaded ~/.bashrc\"\n        ;;\n    *)\n        echo \"Usage: $0 {list|search|set|unset|reload} [args]\"\n        echo \"\"\n        echo \"Examples:\"\n        echo \"  $0 list                    # List all variables\"\n        echo \"  $0 search PATH             # Search for PATH variables\"\n        echo \"  $0 set MY_VAR value        # Set variable\"\n        echo \"  $0 unset MY_VAR            # Unset variable\"\n        echo \"  $0 reload                  # Reload configuration\"\n        exit 1\n        ;;\nesac\nEOF",
      "Run command: `chmod +x manage-env.sh`",
      "Run command: `./manage-env.sh set DATABASE_URL \"postgresql://localhost/mydb\"`",
      "AGENT: '✓ Set DATABASE_URL=postgresql://localhost/mydb (added to ~/.bashrc)'",
      "AGENT: ''",
      "AGENT: '--- Bonus: Troubleshooting Guide ---'",
      "AGENT: ''",
      "AGENT: 'Problem: Variable not persisting after reboot'",
      "AGENT: '  → Check ~/.bashrc AND ~/.bash_profile'",
      "AGENT: '  → Ensure ~/.bash_profile sources ~/.bashrc'",
      "AGENT: '  → Use /etc/environment for system-wide variables'",
      "AGENT: ''",
      "AGENT: 'Problem: Variable set but not available to scripts'",
      "AGENT: '  → Use \"export\" not just assignment'",
      "AGENT: '  → Check with: declare -p VAR_NAME'",
      "AGENT: ''",
      "AGENT: 'Problem: PATH not updated after adding directory'",
      "AGENT: '  → Run: source ~/.bashrc'",
      "AGENT: '  → Or: exec bash (restart shell)'",
      "AGENT: ''",
      "AGENT: 'Problem: Which config file to use?'",
      "AGENT: '  → SSH/console login: ~/.bash_profile'",
      "AGENT: '  → Terminal emulator: ~/.bashrc'",
      "AGENT: '  → Best: Put in ~/.bashrc, source from ~/.bash_profile'",
      "AGENT: ''",
      "AGENT: '✓ SOLUTION SUMMARY:'",
      "AGENT: '  ✓ Viewed current environment with env and printenv.'",
      "AGENT: '  ✓ Set temporary variables with export.'",
      "AGENT: '  ✓ Modified PATH by prepending/appending directories.'",
      "AGENT: '  ✓ Made variables persistent in ~/.bashrc.'",
      "AGENT: '  ✓ Set system-wide variables in /etc/environment.'",
      "AGENT: '  ✓ Used .env files for application configuration.'",
      "AGENT: '  ✓ Created read-only variables with readonly.'",
      "AGENT: '  ✓ Debugged variable issues with declare -p.'",
      "AGENT: '  ✓ Built management script for easy variable control.'",
      "AGENT: '  ✓ You now master environment variable management! 🔧'"
    ],
    "commands": ["export", "env", "printenv", "echo", "source", "unset", "readonly", "declare"],
    "packages": {
      "debian_ubuntu": ["bash"],
      "arch": ["bash"]
    },
    "related_commands": ["set", "bash", "sh"],
    "complexity": "intermediate",
    "tags": ["environment-variables", "export", "PATH", "bashrc", "bash_profile", "configuration", "shell", "persistence"]
  }
]

[
  {
    "id": "cmd_grep_001",
    "command": "grep",
    "scenario": "Search for error messages across multiple log files",
    "problem": "Application having issues, need to find all error messages in logs spread across multiple files",
    "solution": "Use grep with recursive search and pattern matching to find all relevant errors",
    "steps": [
      "Search single file: grep 'error' /var/log/syslog",
      "Case-insensitive search: grep -i 'error' /var/log/syslog",
      "Search recursively in directory: grep -r 'error' /var/log/",
      "Show line numbers: grep -n 'error' /var/log/syslog",
      "Show filename with matches: grep -H 'error' /var/log/*",
      "Count matches: grep -c 'error' /var/log/syslog",
      "Show context (3 lines before/after): grep -C 3 'error' /var/log/syslog",
      "Only lines before: grep -B 3 'error' /var/log/syslog",
      "Only lines after: grep -A 3 'error' /var/log/syslog",
      "Multiple patterns: grep -E 'error|fail|critical' /var/log/syslog",
      "Invert match (exclude): grep -v 'debug' /var/log/syslog | grep 'error'",
      "Match whole words only: grep -w 'error' /var/log/syslog (won't match 'errors')",
      "Search compressed files: zgrep 'error' /var/log/syslog.1.gz",
      "List only filenames with matches: grep -l 'error' /var/log/*",
      "List filenames without matches: grep -L 'error' /var/log/*",
      "Use extended regex: grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}.*error' /var/log/syslog",
      "Perl regex (more powerful): grep -P '\\d{4}-\\d{2}-\\d{2}.*error' /var/log/syslog",
      "Color output: grep --color=always 'error' /var/log/syslog",
      "Fixed string search (faster): grep -F 'exact.string' /var/log/syslog",
      "Exclude directories: grep -r --exclude-dir={proc,sys} 'error' /",
      "Exclude file patterns: grep -r --exclude='*.log.old' 'error' /var/log/",
      "Search with sudo for protected files: sudo grep -r 'error' /var/log/",
      "Pipe to less for paging: grep -r 'error' /var/log/ | less",
      "Find and count unique errors: grep 'error' /var/log/syslog | sort | uniq -c | sort -rn",
      "Save results: grep -r 'error' /var/log/ > errors.txt"
    ],
    "commands": ["grep", "zgrep", "sort", "uniq", "less", "sudo"],
    "packages": {
      "debian_ubuntu": ["grep"],
      "arch": ["grep"]
    },
    "related_commands": ["egrep", "fgrep", "ripgrep", "ag", "awk", "sed"],
    "complexity": "beginner",
    "tags": ["grep", "search", "logs", "text-processing", "troubleshooting"]
  },
  {
    "id": "cmd_grep_002",
    "command": "grep",
    "scenario": "Find all files containing specific code pattern in project",
    "problem": "Need to find where a function/variable is used across entire codebase",
    "solution": "Use grep with appropriate flags to search source code effectively",
    "steps": [
      "Basic recursive search: grep -r 'function_name' /path/to/project/",
      "Search specific file types: grep -r --include='*.py' 'function_name' .",
      "Multiple file types: grep -r --include='*.py' --include='*.js' 'function_name' .",
      "Exclude file types: grep -r --exclude='*.min.js' 'function_name' .",
      "Exclude directories: grep -r --exclude-dir=node_modules --exclude-dir=.git 'function_name' .",
      "Case-sensitive function search: grep -rn 'def function_name' --include='*.py' .",
      "Find class definitions: grep -rn 'class ClassName' --include='*.py' .",
      "Find function calls: grep -rn 'function_name(' --include='*.py' .",
      "Regex for variable declarations: grep -rn -E '(var|let|const) variableName' --include='*.js' .",
      "Find imports: grep -rn 'import.*module_name' --include='*.py' .",
      "Show function and usage context: grep -rn -B 2 -A 5 'function_name' --include='*.py' .",
      "Count occurrences per file: grep -rc 'function_name' --include='*.py' . | grep -v ':0$'",
      "Find TODO comments: grep -rn 'TODO\\|FIXME\\|XXX' --include='*.py' .",
      "With line numbers and color: grep -rn --color=always 'function_name' --include='*.py' . | less -R",
      "Alternative: use ripgrep (faster): rg 'function_name' --type py",
      "Or ag (silver searcher): ag 'function_name' --python",
      "Find empty functions: grep -rn -A 1 'def.*:$' --include='*.py' . | grep pass",
      "Complex regex example: grep -rn -E 'function_name\\s*\\([^)]*\\)' --include='*.py' .",
      "Case-insensitive: grep -rin 'classname' --include='*.py' .",
      "Exclude test files: grep -rn --exclude='*test*.py' 'function_name' .",
      "Find and replace preview: grep -rn 'old_name' --include='*.py' . (review before sed replace)",
      "Export results: grep -rn 'function_name' --include='*.py' . > search_results.txt",
      "Performance: For large codebases, use ripgrep: rg -t py 'function_name' (5-10x faster)"
    ],
    "commands": ["grep", "rg", "ag", "less", "sed"],
    "packages": {
      "debian_ubuntu": ["grep", "ripgrep", "silversearcher-ag"],
      "arch": ["grep", "ripgrep", "the_silver_searcher"]
    },
    "related_commands": ["ripgrep", "ag", "ack", "find", "sed"],
    "complexity": "intermediate",
    "tags": ["grep", "code-search", "development", "text-search", "regex"]
  },
  {
    "id": "cmd_find_001",
    "command": "find",
    "scenario": "Locate files modified in last 24 hours",
    "problem": "System had issues yesterday, need to find all files that were modified recently",
    "solution": "Use find with time-based predicates to locate recently modified files",
    "steps": [
      "Files modified in last 24 hours: find /path -type f -mtime 0",
      "-mtime 0 = within last 24 hours, -mtime 1 = 24-48 hours ago",
      "More precise: find /path -type f -mmin -1440 (last 1440 minutes = 24 hours)",
      "Files modified in last hour: find /path -type f -mmin -60",
      "Files modified after specific date: find /path -type f -newermt '2025-10-06'",
      "Files modified between dates: find /path -type f -newermt '2025-10-06' ! -newermt '2025-10-07'",
      "With human-readable details: find /path -type f -mtime 0 -ls",
      "Show with modification time: find /path -type f -mtime 0 -exec ls -lh {} \\;",
      "Sort by modification time: find /path -type f -mtime 0 -printf '%T+ %p\\n' | sort",
      "Exclude directories: find /path -type f -mtime 0 ! -path '*/.*' ! -path '*/tmp/*'",
      "Only in specific directory (not recursive): find /path -maxdepth 1 -type f -mtime 0",
      "Files accessed (not modified): find /path -type f -atime 0",
      "Files status changed: find /path -type f -ctime 0 (includes permission changes)",
      "Large files modified recently: find /path -type f -mtime 0 -size +100M",
      "Specific file types: find /path -type f -mtime 0 -name '*.log'",
      "Execute command on results: find /path -type f -mtime 0 -exec grep 'error' {} \\;",
      "Count results: find /path -type f -mtime 0 | wc -l",
      "Delete old files (be careful!): find /path -type f -mtime +30 -delete",
      "Confirm before delete: find /path -type f -mtime +30 -exec rm -i {} \\;",
      "Find in system: sudo find / -type f -mtime 0 -not -path '/proc/*' -not -path '/sys/*'",
      "Save results: find /path -type f -mtime 0 > recent_files.txt",
      "With xargs for efficiency: find /path -type f -mtime 0 -print0 | xargs -0 ls -lh"
    ],
    "commands": ["find", "ls", "sort", "grep", "wc", "rm", "xargs"],
    "packages": {
      "debian_ubuntu": ["findutils"],
      "arch": ["findutils"]
    },
    "related_commands": ["locate", "mlocate", "grep", "ls"],
    "complexity": "intermediate",
    "tags": ["find", "file-search", "mtime", "recently-modified", "troubleshooting"]
  },
  {
    "id": "cmd_find_002",
    "command": "find",
    "scenario": "Find and remove large files to free disk space",
    "problem": "Disk is 95% full, need to identify and remove large files",
    "solution": "Use find to locate large files, analyze, and safely remove them",
    "steps": [
      "Find files larger than 1GB: find / -type f -size +1G 2>/dev/null",
      "Redirect errors to /dev/null to avoid permission denied messages",
      "With human-readable sizes: find / -type f -size +1G -exec ls -lh {} \\; 2>/dev/null",
      "Sort by size: find / -type f -size +1G -printf '%s %p\\n' 2>/dev/null | sort -rn | head -20",
      "%s = size in bytes, %p = path",
      "Top 10 largest files: find / -type f -printf '%s %p\\n' 2>/dev/null | sort -rn | head -10",
      "Human-readable top 10: find / -type f -printf '%s %p\\n' 2>/dev/null | sort -rn | head -10 | awk '{print $1/1024/1024 \" MB \" $2}'",
      "Limit search to specific partition: find /home -type f -size +1G",
      "Find large files in /var/log: find /var/log -type f -size +100M -exec ls -lh {} \\;",
      "Find old large files: find / -type f -size +500M -mtime +30 2>/dev/null",
      "Exclude mounted filesystems: find / -xdev -type f -size +1G 2>/dev/null",
      "Find core dumps: find / -name 'core' -o -name 'core.*' 2>/dev/null",
      "Find .log files over 100MB: find /var/log -name '*.log' -size +100M",
      "Safe preview before delete: find /path -type f -size +1G -exec du -h {} \\;",
      "Delete with confirmation: find /path -type f -size +1G -ok rm {} \\;",
      "Delete without confirmation (dangerous!): find /path -type f -size +1G -delete",
      "Alternative: Use ncdu for interactive: sudo ncdu /",
      "Find duplicate large files: Find files, then use fdupes or rdfind",
      "Check what's using space by directory: du -sh /* | sort -h",
      "Find empty files: find /path -type f -empty",
      "Find old downloaded files: find ~/Downloads -type f -mtime +90 -size +50M",
      "Compress large log files: find /var/log -name '*.log' -size +100M -exec gzip {} \\;",
      "After cleanup, verify space: df -h"
    ],
    "commands": ["find", "ls", "sort", "head", "awk", "du", "rm", "gzip", "ncdu", "df"],
    "packages": {
      "debian_ubuntu": ["findutils", "ncdu", "coreutils"],
      "arch": ["findutils", "ncdu", "coreutils"]
    },
    "related_commands": ["du", "ncdu", "df", "ls", "rm"],
    "complexity": "intermediate",
    "tags": ["find", "disk-space", "large-files", "cleanup", "storage-management"]
  },
  {
    "id": "cmd_ps_001",
    "command": "ps",
    "scenario": "Identify process consuming high CPU or memory",
    "problem": "System is slow, need to find which process is causing the issue",
    "solution": "Use ps with sorting options to identify resource-intensive processes",
    "steps": [
      "All processes with details: ps aux",
      "a = all users, u = user-oriented format, x = include processes without TTY",
      "Sort by CPU usage: ps aux --sort=-%cpu | head -10",
      "Sort by memory usage: ps aux --sort=-%mem | head -10",
      "Both CPU and memory top consumers: ps aux | sort -k 3,4 -rn | head -10",
      "Specific user's processes: ps aux | grep username",
      "Process tree view: ps auxf or ps --forest",
      "Long format with more details: ps -ef",
      "-e = all processes, -f = full format",
      "Process with specific name: ps aux | grep process_name",
      "Get PID of process: ps aux | grep process_name | grep -v grep | awk '{print $2}'",
      "Or use pgrep: pgrep -f process_name",
      "Detailed info for specific PID: ps -p <PID> -o pid,ppid,%cpu,%mem,cmd",
      "Process threads: ps -L -p <PID>",
      "Custom columns: ps -eo pid,ppid,cmd,%cpu,%mem --sort=-%cpu | head -10",
      "Processes by start time: ps -eo pid,etime,cmd --sort=etime",
      "Zombie processes: ps aux | awk '$8 == \"Z\"'",
      "Real-time monitoring (better to use top/htop): watch -n 1 'ps aux --sort=-%cpu | head -10'",
      "All processes of a user: ps -u username",
      "Process group: ps -g <PGID>",
      "Parent-child relationship: ps -o pid,ppid,cmd -C process_name",
      "Wide output (no truncation): ps auxww",
      "Export to file: ps aux > processes.txt",
      "Advanced: Find process using port: lsof -i :80 or ss -tulpn | grep :80",
      "Kill high CPU process: kill <PID> or kill -9 <PID> (force)"
    ],
    "commands": ["ps", "grep", "awk", "sort", "head", "pgrep", "watch", "lsof", "ss", "kill"],
    "packages": {
      "debian_ubuntu": ["procps"],
      "arch": ["procps-ng"]
    },
    "related_commands": ["top", "htop", "pgrep", "pkill", "kill", "lsof"],
    "complexity": "intermediate",
    "tags": ["ps", "process-management", "cpu-usage", "memory-usage", "performance"]
  },
  {
    "id": "cmd_top_001",
    "command": "top",
    "scenario": "Monitor system performance and processes in real-time",
    "problem": "Need to see live system resource usage and identify bottlenecks",
    "solution": "Use top with keyboard shortcuts to interactively monitor system",
    "steps": [
      "Launch top: top",
      "Press '?' for help, 'q' to quit",
      "Sort by CPU: Press 'P' (default)",
      "Sort by memory: Press 'M'",
      "Sort by time/age: Press 'T'",
      "Sort by PID: Press 'N'",
      "Reverse sort order: Press 'R'",
      "Show full command: Press 'c' (toggle)",
      "Show absolute paths: Press 'c' multiple times",
      "Hide idle processes: Press 'i'",
      "Show individual CPU cores: Press '1'",
      "Show threads: Press 'H'",
      "Kill a process: Press 'k', enter PID, then signal (15=TERM, 9=KILL)",
      "Renice (change priority): Press 'r', enter PID, then new nice value",
      "Filter by user: Press 'u', enter username",
      "Filter by string: Press 'L', enter pattern",
      "Change update interval: Press 'd', enter seconds (e.g., 1)",
      "Show memory in different units: Press 'E' (summary), 'e' (process list)",
      "Highlight running processes: Press 'y'",
      "Highlight sort column: Press 'x'",
      "Change colors: Press 'z'",
      "Save configuration: Press 'W'",
      "Understanding top output:",
      "Load average: 1min, 5min, 15min - should be < number of CPU cores",
      "%Cpu(s): us=user, sy=system, ni=nice, id=idle, wa=I/O wait, hi/si=hardware/software interrupts",
      "High 'wa' = disk bottleneck, high 'sy' = kernel/system load",
      "Memory: total, free, used, buff/cache",
      "Swap usage indicates memory pressure",
      "Process states: R=running, S=sleeping, D=uninterruptible sleep, Z=zombie",
      "Alternative: htop (more user-friendly): htop"
    ],
    "commands": ["top", "htop", "kill", "renice"],
    "packages": {
      "debian_ubuntu": ["procps", "htop"],
      "arch": ["procps-ng", "htop"]
    },
    "related_commands": ["htop", "btop", "ps", "kill", "nice", "renice"],
    "complexity": "beginner",
    "tags": ["top", "performance-monitoring", "cpu", "memory", "real-time", "system-monitoring"]
  }
]

[
  {
    "id": "cmd_git_001",
    "command": "git",
    "scenario": "Initialize repository and make first commit",
    "problem": "Starting new project, need to set up version control",
    "solution": "Use git to initialize repository and commit initial files",
    "steps": [
      "Navigate to project: cd /path/to/project",
      "Initialize git repository: git init",
      "Creates .git directory",
      "Configure user (if first time): git config --global user.name 'Your Name'",
      "Set email: git config --global user.email 'your.email@example.com'",
      "Check config: git config --list",
      "Or: git config user.name && git config user.email",
      "Check status: git status",
      "Shows untracked files",
      "Add specific file: git add filename.txt",
      "Add multiple files: git add file1.txt file2.py file3.md",
      "Add all files: git add .",
      "Or: git add -A or git add --all",
      "Add by pattern: git add *.py",
      "Interactive add: git add -i",
      "Patch mode (select hunks): git add -p filename.txt",
      "Check what's staged: git status",
      "View staged changes: git diff --staged or git diff --cached",
      "Commit with message: git commit -m 'Initial commit'",
      "Multi-line message: git commit (opens editor)",
      "Or: git commit -m 'Title' -m 'Description'",
      "Add and commit together: git add -A && git commit -m 'message'",
      "Or shortcut (tracked files only): git commit -am 'message'",
      "View commit history: git log",
      "One line format: git log --oneline",
      "With graph: git log --oneline --graph --all",
      "Last N commits: git log -n 5",
      "Amend last commit: git commit --amend",
      "Change message or add forgotten files",
      "Unstage file: git reset HEAD filename.txt",
      "Or: git restore --staged filename.txt (newer)",
      "Discard changes: git checkout -- filename.txt",
      "Or: git restore filename.txt (newer)",
      "Ignore files: Create .gitignore file",
      "Example content: *.log\\n__pycache__/\\n.env\\nnode_modules/",
      "Common patterns: echo '*.log' >> .gitignore",
      "Then: git add .gitignore && git commit -m 'Add gitignore'",
      "View ignored files: git status --ignored",
      "Remove file from repo: git rm filename.txt",
      "Removes from filesystem too",
      "Keep file but untrack: git rm --cached filename.txt",
      "Rename file: git mv oldname.txt newname.txt",
      "View specific commit: git show <commit-hash>",
      "Show file at commit: git show <commit>:path/to/file",
      "After commits: Ready to push to remote (if exists)",
      "Check remote: git remote -v"
    ],
    "commands": ["git", "cd", "echo"],
    "packages": {
      "debian_ubuntu": ["git"],
      "arch": ["git"]
    },
    "related_commands": ["git-add", "git-commit", "git-status", "git-log"],
    "complexity": "beginner",
    "tags": ["git", "version-control", "init", "commit", "repository"]
  },
  {
    "id": "cmd_git_002",
    "command": "git",
    "scenario": "Clone repository and set up for contribution",
    "problem": "Need to work on existing project from GitHub/GitLab",
    "solution": "Clone repository and configure for development",
    "steps": [
      "Clone repository: git clone https://github.com/user/repo.git",
      "Or with SSH: git clone git@github.com:user/repo.git",
      "Clone to specific directory: git clone https://github.com/user/repo.git my-directory",
      "Clone specific branch: git clone -b branch-name https://github.com/user/repo.git",
      "Shallow clone (faster, less history): git clone --depth=1 https://github.com/user/repo.git",
      "Navigate into repo: cd repo",
      "Check status: git status",
      "View remotes: git remote -v",
      "Shows 'origin' (default remote)",
      "List branches: git branch",
      "Shows local branches, * indicates current",
      "List all branches: git branch -a",
      "Includes remote branches",
      "Remote branches only: git branch -r",
      "Switch to existing branch: git checkout branch-name",
      "Or newer syntax: git switch branch-name",
      "Create new branch: git checkout -b feature-name",
      "Or: git switch -c feature-name",
      "Based on remote: git checkout -b local-name origin/remote-branch",
      "Update from remote: git fetch origin",
      "Fetches all branches, doesn't merge",
      "Pull latest changes: git pull origin main",
      "Equals: git fetch + git merge",
      "Pull with rebase: git pull --rebase origin main",
      "View commit history: git log --oneline --graph --all",
      "Check differences: git diff",
      "Uncommitted changes",
      "Diff with remote: git diff origin/main",
      "Make changes, stage them: git add modified-file.txt",
      "Commit changes: git commit -m 'Descriptive message'",
      "Push to remote: git push origin branch-name",
      "First time push: git push -u origin branch-name",
      "-u sets upstream tracking",
      "Configure upstream: git branch --set-upstream-to=origin/main main",
      "Then just: git pull or git push",
      "View remote details: git remote show origin",
      "Add another remote: git remote add upstream https://github.com/original/repo.git",
      "Useful for forks",
      "Fetch upstream changes: git fetch upstream",
      "Merge upstream: git merge upstream/main",
      "Update fork: git checkout main && git pull upstream main && git push origin main",
      "Stash changes: git stash",
      "Saves uncommitted changes",
      "Apply stash: git stash pop",
      "List stashes: git stash list",
      "Configure editor: git config --global core.editor nano",
      "Or: vim, emacs, code, etc.",
      "Set default branch: git config --global init.defaultBranch main",
      "View repo info: git log --oneline | head && git remote -v"
    ],
    "commands": ["git", "cd"],
    "packages": {
      "debian_ubuntu": ["git"],
      "arch": ["git"]
    },
    "related_commands": ["git-clone", "git-pull", "git-push", "git-fetch", "git-branch"],
    "complexity": "beginner",
    "tags": ["git", "clone", "repository", "collaboration", "github", "remote"]
  },
  {
    "id": "cmd_git_003",
    "command": "git",
    "scenario": "Resolve merge conflicts",
    "problem": "Git pull or merge resulted in conflicts, need to resolve them",
    "solution": "Manually resolve conflicts and complete the merge",
    "steps": [
      "Conflict occurs during: git pull or git merge branch-name",
      "Error: CONFLICT (content): Merge conflict in filename",
      "Check status: git status",
      "Shows: both modified: filename",
      "View conflicted files: git diff --name-only --diff-filter=U",
      "Open conflicted file: nano filename or vim filename",
      "Conflict markers look like:",
      "<<<<<<< HEAD",
      "Your changes",
      "=======",
      "Their changes",
      ">>>>>>> branch-name",
      "Edit file to resolve: Remove markers, keep desired code",
      "Option 1: Keep your version (delete their changes + markers)",
      "Option 2: Keep their version (delete your changes + markers)",
      "Option 3: Combine both (merge changes manually)",
      "Save and close file",
      "Mark as resolved: git add filename",
      "Check remaining conflicts: git status",
      "Repeat for all conflicted files",
      "View merge state: git diff --staged",
      "Complete merge: git commit",
      "Opens editor with default merge message",
      "Or: git commit -m 'Resolved merge conflicts'",
      "Abort merge if needed: git merge --abort",
      "Returns to state before merge",
      "View merge history: git log --oneline --graph",
      "Tools for conflict resolution:",
      "Use merge tool: git mergetool",
      "Configure merge tool: git config --global merge.tool vimdiff",
      "Or meld: git config --global merge.tool meld",
      "Accept theirs: git checkout --theirs filename",
      "Accept ours: git checkout --ours filename",
      "Then: git add filename",
      "Visual diff: git difftool filename",
      "During rebase conflicts:",
      "Same process, but finish with: git rebase --continue",
      "Or abort: git rebase --abort",
      "Skip commit: git rebase --skip",
      "Prevention tips:",
      "Pull often: git pull origin main (before starting work)",
      "Small commits: Easier to merge",
      "Communicate: Coordinate with team on file changes",
      "After resolution:",
      "Test code: Run tests, check functionality",
      "Push changes: git push origin branch-name",
      "Verify merge: git log --oneline --graph",
      "Complex conflicts:",
      "Check original: git show :1:filename (common ancestor)",
      "Our version: git show :2:filename",
      "Their version: git show :3:filename",
      "Diff tools: meld, kdiff3, p4merge, beyond compare"
    ],
    "commands": ["git", "nano", "vim"],
    "packages": {
      "debian_ubuntu": ["git", "meld"],
      "arch": ["git", "meld"]
    },
    "related_commands": ["git-merge", "git-rebase", "git-mergetool", "git-diff"],
    "complexity": "intermediate",
    "tags": ["git", "merge-conflicts", "conflict-resolution", "merging", "troubleshooting"]
  },
  {
    "id": "cmd_git_004",
    "command": "git",
    "scenario": "Undo commits and recover from mistakes",
    "problem": "Committed wrong changes, pushed to wrong branch, or need to revert changes",
    "solution": "Use git reset, revert, or reflog to undo mistakes",
    "steps": [
      "View recent commits: git log --oneline -10",
      "Undo last commit (keep changes): git reset --soft HEAD~1",
      "Changes remain staged",
      "Undo last commit (unstage changes): git reset HEAD~1",
      "Or: git reset --mixed HEAD~1 (default)",
      "Changes remain in working directory",
      "Undo last commit (discard changes): git reset --hard HEAD~1",
      "DANGEROUS: Permanently deletes changes",
      "Undo multiple commits: git reset --soft HEAD~3",
      "Goes back 3 commits",
      "Reset to specific commit: git reset --hard <commit-hash>",
      "Example: git reset --hard a1b2c3d",
      "Undo reset (recovery): git reflog",
      "Shows history of HEAD movements",
      "Find commit before reset: Look for entry before 'reset'",
      "Restore: git reset --hard HEAD@{2}",
      "Or: git reset --hard <commit-hash>",
      "Undo pushed commit (safe way): git revert <commit-hash>",
      "Creates new commit that undoes changes",
      "Doesn't rewrite history",
      "Revert last commit: git revert HEAD",
      "Revert multiple: git revert HEAD~3..HEAD",
      "Revert without commit: git revert -n <commit-hash>",
      "Stages changes, manual commit needed",
      "Amend last commit: git commit --amend",
      "Change message or add files",
      "For pushed commits: git commit --amend then git push --force-with-lease",
      "Discard local changes: git checkout -- filename",
      "Or: git restore filename",
      "Discard all changes: git checkout -- .",
      "Or: git restore .",
      "Remove untracked files: git clean -f",
      "Dry run first: git clean -n",
      "Include directories: git clean -fd",
      "Include ignored: git clean -fdx",
      "Unstage file: git reset HEAD filename",
      "Or: git restore --staged filename",
      "Remove file from last commit: git reset --soft HEAD~1 then git reset HEAD filename then git commit",
      "Fix wrong branch: git log --oneline (note commit hash)",
      "Switch to correct branch: git checkout correct-branch",
      "Cherry-pick commit: git cherry-pick <commit-hash>",
      "Delete commit from wrong branch: git checkout wrong-branch && git reset --hard HEAD~1",
      "Recover deleted branch: git reflog",
      "Find branch commit: git checkout -b recovered-branch <commit-hash>",
      "Undo merge: git reset --hard HEAD~1 (if not pushed)",
      "Or: git revert -m 1 HEAD (if pushed)",
      "Undo rebase: git reflog then git reset --hard HEAD@{before-rebase}",
      "Interactive rebase to edit: git rebase -i HEAD~5",
      "Change 'pick' to 'edit', 'drop', or 'reword'",
      "Reset remote branch (DANGEROUS): git push --force-with-lease",
      "Only if you're sure!",
      "Safer: git push --force-with-lease origin branch-name",
      "View reflog: git reflog show --all",
      "Recover lost commit: git fsck --lost-found",
      "Final safety check: git diff HEAD@{1} HEAD before dangerous ops"
    ],
    "commands": ["git"],
    "packages": {
      "debian_ubuntu": ["git"],
      "arch": ["git"]
    },
    "related_commands": ["git-reset", "git-revert", "git-reflog", "git-cherry-pick"],
    "complexity": "advanced",
    "tags": ["git", "undo", "reset", "revert", "recovery", "mistakes", "reflog"]
  },
  {
    "id": "cmd_git_005",
    "command": "git",
    "scenario": "Work with branches and merging strategies",
    "problem": "Need to develop features in isolation and merge them properly",
    "solution": "Use git branches for parallel development and proper merging",
    "steps": [
      "List branches: git branch",
      "* indicates current branch",
      "List all (including remote): git branch -a",
      "Create new branch: git branch feature-name",
      "Switch to branch: git checkout feature-name",
      "Or newer: git switch feature-name",
      "Create and switch: git checkout -b feature-name",
      "Or: git switch -c feature-name",
      "From specific commit: git checkout -b feature-name <commit-hash>",
      "From remote branch: git checkout -b local-feature origin/remote-feature",
      "Or track: git checkout --track origin/remote-feature",
      "Rename branch: git branch -m old-name new-name",
      "Rename current: git branch -m new-name",
      "Delete branch: git branch -d branch-name",
      "Safe delete, prevents if unmerged",
      "Force delete: git branch -D branch-name",
      "Deletes even if unmerged",
      "Delete remote branch: git push origin --delete branch-name",
      "View branch info: git branch -v",
      "Shows last commit on each",
      "Merged branches: git branch --merged",
      "Shows branches merged into current",
      "Unmerged branches: git branch --no-merged",
      "Update branch list: git fetch --prune",
      "Removes deleted remote branches",
      "Merge branch into current: git merge feature-name",
      "Fast-forward if possible",
      "Force merge commit: git merge --no-ff feature-name",
      "Creates merge commit even for fast-forward",
      "Merge with squash: git merge --squash feature-name",
      "Combines all commits into one",
      "Then: git commit -m 'Merged feature'",
      "Abort merge: git merge --abort",
      "Rebase instead of merge: git rebase main",
      "Replays commits on top of main",
      "Cleaner history, no merge commits",
      "Interactive rebase: git rebase -i HEAD~5",
      "Edit, squash, reword, drop commits",
      "Continue after conflict: git rebase --continue",
      "Skip commit: git rebase --skip",
      "Abort rebase: git rebase --abort",
      "Update feature branch: git checkout feature && git rebase main",
      "Or merge: git checkout feature && git merge main",
      "Push branch: git push origin feature-name",
      "Set upstream: git push -u origin feature-name",
      "Force push (after rebase): git push --force-with-lease",
      "View branch differences: git diff main..feature-name",
      "Commits in feature not in main: git log main..feature-name",
      "Graphical history: git log --graph --oneline --all",
      "Compare branches: git diff branch1...branch2",
      "Three dots shows changes since fork",
      "Common workflow:",
      "1. git checkout -b feature/new-feature",
      "2. Make changes, commit",
      "3. git push -u origin feature/new-feature",
      "4. Create pull request on GitHub/GitLab",
      "5. After review: git checkout main && git pull",
      "6. git merge feature/new-feature",
      "7. git push origin main",
      "8. git branch -d feature/new-feature",
      "9. git push origin --delete feature/new-feature",
      "Cleanup local branches: git branch --merged | grep -v '\\*\\|main\\|develop' | xargs -n 1 git branch -d"
    ],
    "commands": ["git", "grep", "xargs"],
    "packages": {
      "debian_ubuntu": ["git"],
      "arch": ["git"]
    },
    "related_commands": ["git-branch", "git-checkout", "git-merge", "git-rebase", "git-switch"],
    "complexity": "intermediate",
    "tags": ["git", "branches", "merging", "workflow", "feature-branches", "rebase"]
  }
]
